# On any tag push, we only need to build and deploy to PyPI.  Only existing
# commits can be tagged, so they must already have passed CI in the PR process.

trigger:
  tags:
    include: ["*"]

pr: none

jobs:
  - template: "jobs/wheels.yml"
    parameters:
      jobName: "linux"
      pool: {vmImage: 'ubuntu-latest'}

  - template: "jobs/wheels.yml"
    parameters:
      jobName: "macos"
      pool: {vmImage: 'macOS-10.15'}

  - template: "jobs/wheels.yml"
    parameters:
      jobName: "macos_arm"
      pool: {vmImage: 'macOS-10.15'}
      env:
        CIBW_BEFORE_ALL: rustup target add aarch64-apple-darwin
        CIBW_ARCHS_MACOS: arm64 universal2
        CIBW_ENVIRONMENT: CARGO_BUILD_TARGET="aarch64-apple-darwin" PYO3_CROSS_LIB_DIR="/Library/Frameworks/Python.framework/Versions/$(python -c 'import sys; print(str(sys.version_info[0])+"."+str(sys.version_info[1]))')/lib/python$(python -c 'import sys; print(str(sys.version_info[0])+"."+str(sys.version_info[1]))')"

  - template: "jobs/wheels.yml"
    parameters:
      jobName: "windows"
      pool: {vmImage: 'windows-latest'}
      setupPython:
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x86}}
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.8', architecture: x86}}
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.8', architecture: x64}}
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.9', architecture: x86}}
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.9', architecture: x64}}
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.10', architecture: x86}}
        - {task: UsePythonVersion@0, inputs: {versionSpec: '3.10', architecture: x64}}

  - job: 'sdist'
    pool: {vmImage: 'ubuntu-latest'}
    steps:
      - task: UsePythonVersion@0
      - bash: |
          set -e
          python -m pip install --upgrade pip
          python setup.py sdist
      - task: PublishBuildArtifacts@1
        inputs: {pathtoPublish: 'dist'}
        condition: succeededOrFailed()
      - bash: |
          twine upload dist/*
        env:
          TWINE_USERNAME: "qiskit"
          TWINE_PASSWORD: $(TWINE_PASSWORD)
