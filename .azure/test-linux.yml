parameters:
  - name: "pythonVersion"
    type: string
    displayName: "Version of Python to test"

  - name: "testQPY"
    type: boolean
    default: false

  - name: "testImages"
    type: boolean
    default: false

  - name: "installFromSdist"
    type: boolean
    default: false

  - name: "rustVersion"
    type: string
    default: "stable"


jobs:
  - job: "Linux_Tests_Python${{ replace(parameters.pythonVersion, '.', '') }}"
    displayName: "Test Linux Python ${{ parameters.pythonVersion }}"
    pool: {vmImage: 'ubuntu-latest'}

    variables:
      QISKIT_SUPPRESS_PACKAGING_WARNINGS: Y
      PIP_CACHE_DIR: $(Pipeline.Workspace)/.pip
      QISKIT_TEST_CAPTURE_STREAMS: 1

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '${{ parameters.pythonVersion }}'
        displayName: 'Use Python ${{ parameters.pythonVersion }}'

      - task: Cache@2
        inputs:
          key: 'stestr | "$(Agent.OS)" | "${{ parameters.pythonVersion }}" | "$(Build.BuildNumber)"'
          restoreKeys: |
            stestr | "$(Agent.OS)" | "${{ parameters.pythonVersion }}"
            stestr | "$(Agent.OS)"
            stestr
          path: .stestr
        displayName: "Cache stestr"

      - bash: |
          rustup default "${{ parameters.rustVersion }}"
        displayName: "Use rust version ${{ parameters.rustVersion }}"

      - bash: |
          set -e
          python -m pip install --upgrade pip setuptools wheel virtualenv
          virtualenv test-job
        displayName: "Prepare venv"

      - ${{ if eq(parameters.installFromSdist, true) }}:
        - bash: |
            set -e
            source test-job/bin/activate
            pip install -U -r requirements.txt -r requirements-dev.txt -c constraints.txt
            # Install setuptools-rust for building sdist
            pip install -U -c constraints.txt setuptools-rust
            python setup.py sdist
            pip install -U -c constraints.txt dist/qiskit-terra*.tar.gz
          displayName: "Install Terra from sdist"

      - ${{ if eq(parameters.installFromSdist, false) }}:
        - bash: |
            set -e
            source test-job/bin/activate
            pip install -U -r requirements.txt -r requirements-dev.txt -c constraints.txt
            pip install -U -c constraints.txt -e .
          displayName: "Install Terra directly"
          env:
            SETUPTOOLS_ENABLE_FEATURES: "legacy-editable"

      - bash: |
          set -e
          source test-job/bin/activate
          pip install -U "cplex;python_version < '3.11'" "qiskit-aer" "z3-solver" -c constraints.txt
          mkdir -p /tmp/terra-tests
          cp -r test /tmp/terra-tests/.
          cp tools/verify_parallel_map.py /tmp/terra-tests/.
          cp .stestr.conf /tmp/terra-tests/.
          cp -r .stestr /tmp/terra-tests/. || :
          sudo apt-get update
          sudo apt-get install -y graphviz
          pip check
        displayName: 'Install post-install optional dependencies'

      - bash: |
          set -e
          source test-job/bin/activate
          pushd /tmp/terra-tests
          export PYTHONHASHSEED=$(python -S -c "import random; print(random.randint(1, 4294967295))")
          echo "PYTHONHASHSEED=$PYTHONHASHSEED"
          stestr run
          python ./verify_parallel_map.py
          popd
        env:
          QISKIT_PARALLEL: FALSE
          RUST_BACKTRACE: 1
        displayName: 'Run tests'

      - bash: |
          set -e
          source test-job/bin/activate
          cp tools/subunit_to_junit.py /tmp/terra-tests/.
          pip install -U junitxml
          pushd /tmp/terra-tests
          mkdir -p junit
          stestr last --subunit | ./subunit_to_junit.py -o junit/test-results.xml
          pushd .stestr
          ls | grep -P "^\d" | xargs -d "\n" rm -f
          popd
          popd
          cp -r /tmp/terra-tests/junit .
          cp -r /tmp/terra-tests/.stestr .
        displayName: 'Generate results'
        condition: succeededOrFailed()

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/test-*.xml'
          testRunTitle: 'Test results for Linux Python ${{ parameters.pythonVersion }}'

      - task: CopyFiles@2
        inputs:
          contents: '**/*.png'
          targetFolder: $(Build.ArtifactStagingDirectory)
        displayName: 'Copy images on test failure'
        condition: failed()

      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)'
          artifactName: 'drop_linux'
        displayName: 'Publish images on test failure'
        condition: failed()

      - ${{ if eq(parameters.testQPY, true) }}:
        - bash: |
            set -e
            pushd test/qpy_compat
            ./run_tests.sh
            popd
          displayName: 'Run QPY backwards compat tests'

      - ${{ if eq(parameters.testImages, true) }}:
        - bash: |
            set -e
            virtualenv image_tests
            image_tests/bin/pip install -U -r requirements.txt -c constraints.txt
            image_tests/bin/pip install -U -c constraints.txt -e ".[visualization]"
            sudo apt-get update
            sudo apt-get install -y graphviz pandoc
            image_tests/bin/pip check
          displayName: 'Install dependencies'
          env:
            SETUPTOOLS_ENABLE_FEATURES: "legacy-editable"

        - bash: image_tests/bin/python -m unittest discover -v test/ipynb
          displayName: 'Run image test'
          env:
            # Needed to suppress a warning in jupyter-core 5.x by eagerly migrating to
            # a new internal interface that will be the default in jupyter-core 6.x.
            # This variable should become redundant on release of jupyter-core 6.
            JUPYTER_PLATFORM_DIRS: 1
