---
features:
  - |
    Introduced a new class :class:`~.SingletonGate` which is a subclass of
    :class:`~.Gate` that uses a single instance for all objects of that type.
    The intent behind this class is to minimize the memory and construction
    overhead of using multiple gates in a circuit with the tradeoff of having
    global shared state. For this reason this class is only applicable to
    gates that do not have any unique and/or mutable state stored in an instance.
    For example, the best example of this is :class:`.XGate` doesn't contain
    any state and could leveerage :class:`~.SingletonGate` (and does starting in
    this release), while :class:`~.RXGate` stores an angle parameter in an instance
    and thus can not use :class:`~.SingletonGate` because a single shared global
    instance can not represent the parameter values.

    The other potential issue to be aware of when using this class is around the
    use of the :class:`~.SingletonGate` class is that the :class:`~.Gate`
    data model supports some mutable state. Specifically, the
    :attr:`~.Gate.label`, :attr:`~.Gate.duration`, :attr:`~.Gate.unit`, and
    :attr:`~.Gate.condition` attributes are all accessible and mutable in the
    :class:`~.Gate` and its direct subclasses. However, this is incompatible
    with having a shared object via :class:`~.SingletonGate`. For instances of
    :class:`~.SingletonGate` setting these attributes directly is not allowed
    and it will raise an exception. If they are needed for a particular
    instance you must set them on the constructor (or via
    :meth:`~.SingletonGate.c_if` for :attr:`~.SingletonGate.condition`) when
    creating a new object. When this is done the output from the constructor
    will be a separate instance with the custom state instead of the globally
    shared instance. You can also use the :meth:`.SingletonGate.to_mutable`
    method to get a mutable copy of a gate object and then mutate the attributes
    like you would on any other :class:`~.circuit.Instruction` object.
  - |
    The following standard library gates are now instances of
    :class:`~.SingletonGate`:

        * :class:`~.DCXGate`
        * :class:`~.ECRGate`
        * :class:`~.HGate`
        * :class:`~.IGate`
        * :class:`~.iSwapGate`
        * :class:`~.SGate`
        * :class:`~.SdgGate`
        * :class:`~.SwapGate`
        * :class:`~.SXGate`
        * :class:`~.SXdgGate`
        * :class:`~.TGate`
        * :class:`~.TdgGate`
        * :class:`~.XGate`
        * :class:`~.RCCXGate`
        * :class:`~.RC3XGate`
        * :class:`~.YGate`
        * :class:`~.ZGate`

    This means that unless a ``label``, ``condition``, ``duration``, or ``unit``
    are set on the instance at creation time they will all share a single global
    instance whenever a new gate object is created. This results in large reduction
    in the memory overhead for > 1 object of these types and significantly faster
    object construction time.
  - |
    Added a new method :meth`.Instruction.to_mutable` and attribute
    :attr:`.Instruction.mutable` which is used to get a mutable copy and check whether
    an :class:`~.circuit.Instruction` object is mutable. With the introduction
    of :class:`~.SingletonGate` these methods can be used to have a unified interface
    to deal with the mutablitiy of instruction objects.
upgrade:
  - |
    The following standard library gates:

        * :class:`~.DCXGate`
        * :class:`~.ECRGate`
        * :class:`~.HGate`
        * :class:`~.IGate`
        * :class:`~.iSwapGate`
        * :class:`~.SGate`
        * :class:`~.SdgGate`
        * :class:`~.SwapGate`
        * :class:`~.SXGate`
        * :class:`~.SXdgGate`
        * :class:`~.TGate`
        * :class:`~.TdgGate`
        * :class:`~.XGate`
        * :class:`~.RCCXGate`
        * :class:`~.RC3XGate`
        * :class:`~.YGate`
        * :class:`~.ZGate`

    no longer are able to set :attr:`~.Gate.label`, :attr:`~.Gate.condition`,
    :attr:`~.Gate.duration`, or :attr:`~.Gate.unit` after instantiating an object
    anymore. You will now only be able to set these attributes as arguments
    when creating a new object or in the case of :attr:`~.Gate.condtion` through
    the use :meth:`~.Gate.c_if`. Alternatively you can use :meth:`~.Gate.to_mutable`
    to get a mutable copy of the instruction and then use the setter on that copy
    instead of the original object. This change was necssary as part of converting
    these classes to be :class:`~.SingletonGate` types which greatly reduces the
    memory footprint of repeated instances of these gates.
  - |
    For anything that interacts with :class:`~.Gate`, :class:`~.Operation`,
    or :class:`~.circuit.Instruction` objects or works with these as part of a
    :class:`~.QuantumCircuit` or :class:`~.DAGCircuit` classes it is important
    to note that the use of shared references for instances is much more common
    now. Previously, it was possible to reuse and share an instance of a
    a circuit operation it wasn't very commonly used and a copy would generate
    a unique instance. This has changed starting in this release because of
    :class:`~.SingletonGate` being made available (and a large number of standard
    library gates now built off of it). If your usage of these objects is assuming
    unique instances for every circuit operation there are potential issue because
    of shared state that will be reused between operations of the same type (that
    will persist through copy and deep copies). You can rely on the
    :attr:`.Instruction.mutable` attribute to check the mutability of an object or
    use :meth:`.Instruction.to_mutable` to get a mutable copy of any instruction.
fixes:
  - |
    Fixed an oversight in the :class:`~.ECRGate` that prevented setting an
    :attr:`.ECRGate.label` attribute at object construction time. All other
    :class:`~.Gate` classes and subclasses enable setting a ``label`` keyword
    argument in the constructor.
  - |
    Fixed an oversight in the :class:`~.Gate` (and all its subclasses) constructor
    where the :attr:`.Gate.duration` and :attr:`.Gate.unit` attributes could not
    be set as keyword arguments during construction. The parent class
    :class:`~.circuit.Instruction` supported setting this but :class:`~.Gate` was
    previously not exposing this interface correctly.
