---
features_quantum_info:
  - |
    Added :meth:`.SparsePauliOperator.to_sparse_list` to convert an operator into
    a sparse list format. This works inversely to :meth:`.SparsePauliOperator.from_sparse_list`.
    For example::

      from qiskit.quantum_info import SparsePauliOp

      op = SparsePauliOp(["XIII", "IZZI"], coeffs=[1, 2])
      sparse = op.to_sparse_list()  # [("X", [3], 1), ("ZZ", [1, 2], 2)]

      other = SparsePauliOp.from_sparse_list(sparse, op.num_qubits)
      print(other == op)  # True

features_synthesis:
  - |
    Added :meth:`.ProductFormula.expand` which allows to view the expansion of a product formula
    in a sparse Pauli format.
  - |
    Added the plugin structure for the :class:`.PauliEvolutionGate`. The default plugin,
    :class:`.PauliEvolutionSynthesisDefault`, constructs circuit as before, but faster as it
    internally uses Rust. The larger the circuit (e.g. by the Hamiltonian size, the number 
    of timesteps, or the Suzuki-Trotter order), the higher the speedup. For example,
    a 100-qubit Heisenberg Hamiltonian with 10 timesteps and a 4th-order Trotter formula is 
    now constructed ~9.4x faster.

upgrade:
  - | 
    The following classes now use the :math:`\sqrt{X}` operation to diagonalize the Pauli-Y
    operator: :class:`.PauliEvolutionGate`, :class:`.EvolvedOperatorAnsatz`, 
    :class:`.PauliFeatureMap`. Previously, these classes used either :math:`H S` or
    :math:`R_X(-\pi/2)` as basis transformation. Using the :math:`\sqrt{X}` operation, 
    represented by the :class:`.SXGate` is more efficient as it uses only a single gate
    implemented as singleton.
