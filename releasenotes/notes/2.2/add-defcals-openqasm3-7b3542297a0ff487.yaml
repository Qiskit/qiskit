---
features_qasm:
  - |
    Added partial support for ``defcal`` symbols in the OpenQASM3 exporter. This enables downstream packages to export custom instructions 
    that operate on both quantum and classical bits using :meth:`qiskit.qasm3.dumps`. 
    Users can now define custom instructions (e.g., a ``CustomMeasure`` that acts on a qubit and returns a classical bit) and specify their behavior using 
    :class:`.DefcalInstruction`. These defcals are passed to the exporter via the ``implicit_defcals`` argument in :meth:`qiskit.qasm3.dumps`.

    For example::

      from qiskit.circuit import Instruction, QuantumCircuit
      from qiskit.qasm3 import dumps
      from qiskit.qasm3.exporter import DefcalInstruction, types

      custom_measure = Instruction("measure_2", 1, 1, [])
      qc = QuantumCircuit(1, 1)
      qc.h(0)
      qc.append(custom_measure, [0], [0])
      qc.measure(0, 0)

      defcals = {
          "measure_2": DefcalInstruction("measure_2", 0, 1, types.Bool()),
      }

      out_qasm = dumps(qc, implicit_defcals=defcals)
      print(out_qasm)

    Would output the following valid OpenQASM3 string::

      OPENQASM 3.0;
      bit[1] c;
      qubit[1] q;
      h q[0];
      c[0] = measure_2 q[0];
      c[0] = measure q[0];

    This approach assumes that the grammar definition for the defcal is provided externally (e.g., in a header file), 
    although such a file is not strictly required for the exporter to function.


