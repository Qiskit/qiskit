---
features_transpiler:
  - |
    The scheduling passes :class:`.PadDelay` and :class:`.PadDynamicalDecoupling` now have new arguments on
    their constructors: ``target`` and ``durations``. These are used to specify the :class:`.Target` or
    :class:`.InstructionDurations` respectively. For access to the instruction durations when the pass is run, one of the arguments is required.
  - |
    Added a new :meth:`~.Target.seconds_to_dt` method to the :class:`.Target` class.
    This is used to translate a duration in seconds to a number of discretized
    time steps of the system time resolution specified in the :attr:`.Target.dt` attribute.
    This is typically useful for converting the :attr:`.InstructionProperties.duration` value
    to units of ``dt``.
upgrade_circuits:
  - |
    The deprecated attributes for :class:`~qiskit.circuit.Instruction` and :class:`.Gate`:
    ``duration`` and ``unit`` have been removed, so you can no longer
    set the ``unit`` or ``duration`` arguments for any :class:`qiskit.circuit.Instruction`
    or subclass. These attributes were deprecated in Qiskit v1.3.0 and
    were used to attach a custom execution
    duration and unit for that duration to an individual instruction. However,
    the source of truth of the duration of a gate is the :class:`.BackendV2`
    :class:`.Target`, which contains the duration for each instruction supported
    on the backend. The duration of an instruction is not
    typically user adjustable and is an immutable property of the backend. If
    you previously used this capability to experiment with different
    gate durations, you can mutate the
    :attr:`.InstructionProperties.duration` field in a given :class:`.Target` to
    set a custom duration for an instruction on a backend. (The unit is always in
    seconds in the :class:`.Target`.)
  - |
    The deprecated attribute for :class:`qiskit.circuit.Instruction` and :class:`.Gate`: ``condition`` has been
    removed.
    This functionality has been superseded by the :class:`.IfElseOp` class,
    which can be used to describe a classical condition in a circuit.
    This attribute was deprecated in the v1.3.0 release.
  - |
    The deprecated methods for :class:`~qiskit.circuit.Instruction` and :class:`.Gate`: ``c_if`` and ``condition_bits``
    have been removed. These methods were deprecated in the v1.3.0 release.
    This functionality has been superseded by the :class:`.IfElseOp` class,
    which can be used to describe a classical condition in a circuit.
    For example, a circuit previously using ``Instruction.c_if()`` like::

        from qiskit.circuit import QuantumCircuit

        qc = QuantumCircuit(2, 2)
        qc.h(0)
        qc.x(0).c_if(0, 1)
        qc.z(1.c_if(1, 0)
        qc.measure(0, 0)
        qc.measure(1, 1)

    can be rewritten as::

        qc = QuantumCircuit(2, 2)
        qc.h(0)
        with expected.if_test((expected.clbits[0], True)):
            qc.x(0)
        with expected.if_test((expected.clbits[1], False)):
            qc.z(1)
        qc.measure(0, 0)
        qc.measure(1, 1)

  - |
    The deprecated method ``InstructionSet.c_if`` has been removed. This method
    was deprecated in the 1.3.0 release. This functionality has been superseded
    by the :class:`.IfElseOp` class which can be used to describe a classical
    condition in a circuit.

upgrade_transpiler:
  - |
    The :class:`.ResetAfterMeasureSimplification` transpiler pass now uses an :class:`.IfElseOp`
    to condition the execution of the :class:`.XGate` instead of setting a ``condition`` attribute
    on the gate. This is because the ``condition`` attribute has been removed from the Qiskit data model.
  - |
    The deprecated ``ConvertConditionsToIfOps`` transpiler pass has been removed. The underlying
    ``condition`` attribute of :class:`~qiskit.circuit.Instruction` class has been removed so this transpiler pass
    no longer had anything to convert from. Instead you should directly use :class:`.IfElseOp` to
    classically condition the execution of an operation.
  - |
    The :class:`.PadDelay` and :class:`.PadDynamicalDecoupling` transpiler passes now require a new
    argument when constructed. Either ``target`` or ``durations`` need to be specified with a
    :class:`.Target` or :class:`.InstructionDurations` respectively. Without these, the passes cannot
    determine the duration of instructions in the circuit and will error. Previously
    these passes determined these values from the now removed ``duration`` attribute of
    :class:`~qiskit.circuit.Instruction` objects.
  - |
    The previously deprecated ``AlignMeasures`` transpiler pass has been removed. This pass was deprecated in Qiskit v1.1.0. Instead, the
    :class:`.ConstrainedReschedule` pass should be used. :class:`.ConstrainedReschedule` performs the
    same function and also supports aligning to additional timing constraints.
  - |
    When scheduling by using :func:`.generate_preset_pass_manager` or :func:`.transpile`, if the
    ``instruction_durations`` argument is specified, the durations are formatted as a ``list``, and they are
    in units of ``dt``. You must also set the ``dt`` input argument of the transpilation function.
upgrade_providers:
  - |
    The :class:`.BasicSimulator` backend can no longer simulate classical
    control flow. It only supported using the ``.c_if()``/``.condition`` for
    modeling control flow, but this construction has now been removed from the Qiskit
    data model.
upgrade_visualization:
  - |
    The timeline drawer now requires that the ``target`` argument is specified when called. As instructions no
    longer contain duration attributes, this extra argument is required to
    specify the durations for all the supported instructions. Without the
    argument, the timeline drawer does not have access to this information.

deprecations_transpiler:
  - |
    The ``propagate_condition`` argument of :meth:`.DAGCircuit.substitute_node`
    and :meth:`.DAGCircuit.substitute_node_with_dag` has been deprecated. With the removal
    of ``Instruction.condition`` from the Qiskit data model this option no longer serves a
    purpose. If it is set it no longer has any effect. It is not removed from the signature
    to maintain compatibility during the migration from Qiskit 1.x -> 2.0. This option will
    be removed in Qiskit 3.0.
