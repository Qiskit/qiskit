---
prelude: >
    We are pleased to release Qiskit v2.0.0, with new features that improve its 
    performance and capabilities.
    The feature highlights of Qiskit v2.0.0 include:

      * The introduction of a `C API <https://quantum.cloud.ibm.com/docs/api/qiskit-c>`__ for 
        building and interacting with :class:`.SparseObservable` objects. This first 
        compiled language interface represents an important milestone in the 
        evolution of Qiskit and will grow in scope throughout the v2.x release series.
        The initial iteration of the C API is an experimental feature, and there
        may be breaking API changes in minor versions following our
        `version strategy <https://docs.quantum.ibm.com/open-source/qiskit-sdk-version-strategy>`__.
      
      * The addition of a new :class:`.BoxOp` control-flow op that maps to 
        `the OpenQASM 3 concept of a box <https://openqasm.com/language/delays.html#boxed-expressions>`__
        and allows to group series of instructions for later processing and custom scheduling.
        This operator is useful for applications such as twirling, noise-learning, and stretch-based scheduling
        among others.

      * The ability to create ``stretch`` durations for :class:`.Delay` instructions,  
        which enable expressing relationships between timing-aware instructions.  
        The new :class:`~.expr.Stretch` type extends the existing classical expression system,  
        allowing design intent to be captured at circuit construction time and resolved at compile time.
        See the `OpenQASM documentation <https://openqasm.com/language/delays.html#duration-and-stretch-types>`__ for details.

      * Improved synthesis when a :class:`.Target` contains fractional two qubit basis gates with support
        for arbitrary angles such as :class:`.RZXGate` or :class:`.RZZGate`, which significantly reduces 
        gate counts in the synthesized circuits.
        
      * Improved runtime performance, particularly during the circuit construction step,  
        where `benchpress <https://github.com/Qiskit/benchpress>`__ benchmarking shows a 2x speedup over Qiskit v1.3.  
        This improvement is achieved through a combination of contributions, including leveraging additional native Rust 
        gate representations, such as :class:`.UnitaryGate`, and removing legacy data model elements.  

    In line with our `semantic versioning policy <https://docs.quantum.ibm.com/open-source/qiskit-sdk-version-strategy>`__, documented at the time of 
    the v1.0.0 release, this major release also includes API changes that 
    are not backward-compatible with the v1.x release series. 
    In particular, several deprecated components of the Qiskit data model have
    been removed, such as the ``.c_if()`` method, the ``qobj`` module,
    ``BackendV1``, and ``qiskit.pulse``, as well as the deprecated  V1 
    primitive reference implementations.

    You can refer to the upgrade release notes sections for more details on all of
    these removals and API changes. The removed APIs are still supported in the Qiskit v1.4.x
    release which will receive bug fixes for another six months and will have security
    updates for one year.