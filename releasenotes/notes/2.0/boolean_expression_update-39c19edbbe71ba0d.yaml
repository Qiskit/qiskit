---
upgrade_circuits:
  - |
     The ``qiskit.circuit.classicalfunction`` module has been removed following its deprecation in Qiskit v1.4.
     That includes the ``ClassicalFunction`` class, its related ``classical_function`` function, and
     the ``BooleanExpression`` class. This change was made to remove the dependency on the ``tweedledum`` 
     library, which is no longer compatible with all of Qiskit's supported platforms and Python versions.
     ``ClassicalFunction`` was exclusively used in :class:`.PhaseOracle`, which has been upgraded to only accept
     expressions in ``string`` format (see following release note). ``BooleanExpression`` has been superseded by the
     new :class:`.BitFlipOracleGate` class. 

  - |
     The :class:`.PhaseOracle` class no longer depends on the ``tweedledum`` library, 
     as the dependency is not actively maintained. The interface has been simplified: 
     it no longer accepts a ``synthesizer`` parameter, and the ``expression`` parameter 
     can only be a string. The previously accepted ``ClassicalFunction``
     type, deprecated in Qiskit v1.4, has been removed in Qiskit v2.0.

     Despite these upgrades, the standard usage of the :class:`.PhaseOracle` class remains unchanged:

     .. plot::
         :include-source:

          from qiskit.circuit.library.phase_oracle import PhaseOracle
          bool_expr = "(x0 & x1 | ~x2) & x4"
          oracle = PhaseOracle(bool_expr)
          oracle.draw('mpl')

     Note that this change may affect synthesis effectiveness, but was required for compatibility with all 
     of Qiskit's supported platforms and Python versions.

features_circuits:
  - |
     Added two new classes: :class:`.BitFlipOracleGate` and :class:`.PhaseOracleGate`.
     :class:`.BitFlipOracleGate` was introduced as an alternative to directly 
     synthesizing :class:`.BooleanExpression`, which has been removed in Qiskit v2.0. 
     :class:`.PhaseOracleGate` was added as an alternative to :class:`.PhaseOracle`, as the 
     latter will be deprecated throughout the v2.x releases. Both classes share the interface 
     of :class:`.PhaseOracle`, except for the ``evaluate_bitstring`` method, which is no longer
     present.

     :class:`.BitFlipOracleGate` synthesizes a bit-flip oracle instead of a phase-flip 
     oracle, meaning it acts on one additional qubit and can be viewed as applying a 
     controlled-X operation, where the control is determined by the value of the 
     expression encoded by the oracle.

     .. plot::
         :include-source:

          from qiskit import QuantumCircuit
          from qiskit.circuit.library.bit_flip_oracle import BitFlipOracleGate
          qc = QuantumCircuit(5)
          bool_expr = "(x0 & x1 | ~x2) & x4"
          oracle = BitFlipOracleGate(bool_expr)
          qc.compose(oracle, inplace=True)
          qc.draw('mpl')
          qc.decompose().draw('mpl')

     .. plot::
         :include-source:

          from qiskit import QuantumCircuit
          from qiskit.circuit.library.phase_oracle import PhaseOracleGate
          qc = QuantumCircuit(5)
          bool_expr = "(x0 & x1 | ~x2) & x4"
          oracle = PhaseOracleGate(bool_expr)
          qc.compose(oracle, inplace=True)
          qc.draw('mpl')
          qc.decompose().draw('mpl')