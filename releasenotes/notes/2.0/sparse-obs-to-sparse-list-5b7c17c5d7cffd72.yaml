---
features_quantum_info:
  - |
    Added a new :meth:`.SparseObservable.to_sparse_list` method to obtain a sparse list representation
    of a :class:`.SparseObservable`. For example::

      from qiskit.quantum_info import SparseObservable

      obs = SparseObservable.from_list([("+II", 1), ("-II", 1)])
      print(obs.to_sparse_list())  # [("+", [2], 1), ("-", [2], 1)]

  - |
    Added a new :meth:`.SparseObservable.as_paulis` method to express a sparse observable in terms of Paulis
    only, by expanding all projectors. For example::

      from qiskit.quantum_info import SparseObservable

      obs = SparseObservable("+-")
      obs_paulis = obs.as_paulis()  # 1/4 ( II + XI - IX - XX )

  - |
    Qiskit v2.0.0 supports constructing a :class:`.SparsePauliOp` from a :class:`.SparseObservable`
    by using the new method :meth:`.SparsePauliOp.from_sparse_observable`. It is important
    to remember that :class:`.SparseObservable` objects can efficiently represent projectors,
    which require an exponential number of terms in the :class:`.SparsePauliOp`.
