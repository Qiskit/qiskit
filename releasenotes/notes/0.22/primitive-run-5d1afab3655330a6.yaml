---
features:
  - |
    Added new methods for executing primitives: :meth:`.BaseSampler.run` and :meth:`.BaseEstimator.run`.
    These methods execute asynchronously and return `~qiskit.providers.JobV1` objects which
    provide a handle to the exections. These new run methods can be passed :class:`~.QuantumCircuit`
    objects (and observables for :class:`~.BaseEstimator`) that are not registered in the constructor.
    For example::

        estimator = Estimator()
        result = estimator.run(circuits, observables, parameter_values).result()

    This provides an alternative to the previous execution model (which is now deprecated) for the
    :class:`~.BaseSampler` and :class:`~.BaseEstimator` primitives which would take all the inputs via
    the constructor and calling the primitive object with the combination of those input parameters
    to use in the execution.
deprecations:
  - |
    The method of executing primitives has been changed.
    :meth:`~qiskit.primitives.BaseSampler.__call__` method was deprecated and
    :meth:`~qiskit.primitives.BaseEstimator.__call__` method was deprecated.
    For example::

      estimator = Estimator(...)
      result = estimator(circuits, observables, parameters)

      sampler = Sampler(...)
      result = sampler(circuits, observables, parameters)

    are equivalent by rewriting

    .. code-block:: python

      estimator = Estimator()
      result = estimator.run(circuits, observables, parameter_values).result()

      sampler = Sampler()
      result = sampler.run(circuits, parameter_values).result()

    Context manager for primitives was deprecated.
    Not all Primitives have a context manager available. When available (e.g. qiskit-ibm-runtime),
    the session's context manager provides equivalent functionality.

    ``circuits``, ``observables``, and ``parameters`` in the constructor was deprecated.
    ``circuits`` and ``observables`` can be passed from ``run`` methods.
    ``run`` methods do not support ``parameters``. Users need to resort parameter values by themselves.
