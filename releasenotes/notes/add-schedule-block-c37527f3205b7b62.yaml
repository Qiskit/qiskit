---
features:
  - |
    A new pulse program representation :py:class:`~qiskit.pulse.ScheduleBlock` has been added.
    This representation is best suited for the pulse builder syntax and is based on
    relative instruction ordering.

    This representation takes ``alignment_context`` instead of specifying starting time ``t0`` for
    each instruction. The start time of instruction is implicitly allocated with
    the specified transformation and relative position of instructions.

    This representation allows lazy instruction scheduling, meaning we can assign
    arbitrary parameters to the duration of instructions.

    For example,

    .. code-block:: python

        from qiskit.pulse import ScheduleBlock, DriveChannel, Gaussian
        from qiskit.pulse.instructions import Play, Call
        from qiskit.pulse.transforms import AlignRight
        from qiskit.circuit import Parameter

        dur = Parameter('rabi_duration')

        block = ScheduleBlock(alignment_context=AlignRight())
        block += Play(Gaussian(dur, 0.1, dur/4), DriveChannel(0))
        block += Call(measure_sched)  # subroutine defined elsewhere

    this code defines an experiment scanning a Gaussian pulse's duration followed by
    a measurement ``measure_sched``, i.e. a Rabi experiment.
    You can reuse the ``block`` object for every scanned duration
    by assigning a target duration value.
deprecations:
  - |
    :meth:`assign_parameters` is being deprecated from :py:class:`~qiskit.pulse.channels.Channel`,
    :py:class:`~qiskit.pulse.library.Pulse`, :py:class:`~qiskit.pulse.instructions.Instruction`,
    and their subclasses. :meth:`parameters` is also being deprecated from
    :py:class:`~qiskit.pulse.channels.Channel` and
    :py:class:`~qiskit.pulse.instructions.Instruction`.
upgrade:
  - |
    In pulse programs, the parameter framework is replaced with the visitor pattern.
    This removes the parameter management logic from each object consisting a program,
    yielding performance improvements of object construction with pulse programming.
    Parameter management logic is newly implemented in
    :py:mod:`~qiskit.pulse.parameter_manager`. This upgrade may influence code developers who
    are providing custom pulse instruction based on Qiskit Pulse.
