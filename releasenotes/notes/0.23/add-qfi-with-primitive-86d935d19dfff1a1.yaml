---
features:
  - |
    Added new classes for Quantum Fisher Information (QFI) and Quantum
    Geometric Tensor (QGT) algorithms using :mod:`~qiskit.primitives`,
    :class:`qiskit.algorithms.gradients.QFI` and
    :class:`qiskit.algorithms.gradients.LinCombQGT`, to the
    gradients module: :mod:`qiskit.algorithms.gradients`. For example::

      from qiskit.circuit import QuantumCircuit, Parameter
      from qiskit.algorithms.gradients import LinCombQGT, QFI

      estimator = Estimator()
      a, b = Parameter("a"), Parameter("b")
      qc = QuantumCircuit(1)
      qc.h(0)
      qc.rz(a, 0)
      qc.rx(b, 0)

      parameter_value = [[np.pi / 4, 0]]

      qgt = LinCombQGT(estimator)
      qgt_result = qgt.run([qc], parameter_value).result()

      qfi = QFI(qgt)
      qfi_result = qfi.run([qc], parameter_value).result()

  - |
    Added a new keyword argument, ``derivative_type``, to the constructor for the
    :class:`~qiskit.algorithms.gradients.LinCombEstimatorGradient`. This argument
    takes a :class:`~.DerivativeType` enum that enables specifying to compute
    only the real or imaginary parts of the gradient.
