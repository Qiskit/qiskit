---
features:
  - |
    Added a new transpiler pass, :class:`~.CollectAndCollapse`, to collect and to consolidate
    blocks of nodes in a circuit. This pass is designed to be a general base class for
    combined block collection and consolidation.  To be completely general, the work of
    collecting and collapsing the blocks is done via functions provided during
    instantiating the pass. For example, the :class:`~.CollectLinearFunctions` has been
    updated to inherit from :class:`~.CollectAndCollapse` and  collects blocks of
    :class:`.CXGate` and :class:`.SwapGate` gates, and replaces each block with a
    :class:`.LinearFunction`. The :class:`~.CollectCliffords` which is also now
    based on :class:`~.CollectAndCollapse`, collects blocks of "Clifford" gates and
    replaces each block with a :class:`.Clifford`.

    The interface also supports the option ``do_commutative_analysis``, which allows
    to exploit commutativity between gates in order to collect larger blocks of nodes.
    For example, collecting blocks of CX gates in the following circuit::

        qc = QuantumCircuit(2)
        qc.cx(0, 1)
        qc.z(0)
        qc.cx(1, 0)

    using ``do_commutative_analysis`` enables consolidating the two CX gates, as
    the first CX gate and the Z gate commute.
  - |
    Added a new class :class:`~.BlockCollector` that implements various collection strategies,
    and a new class :class:`~.BlockCollapser` that implements various collapsing strategies.
    Currently :class:`~.BlockCollector` includes the strategy to greedily collect all gates
    adhering to a given filter function (for example, collecting all Clifford gates), and
    :class:`~.BlockCollapser` includes the strategy to consolidate all gates in a block to a
    single object (or example, a block of Clifford gates can be consolidated to a single
    :class:`.Clifford`).
  - |
    Added a new :class:`~.CollectCliffords` transpiler pass that collects blocks of Clifford
    gates and consolidates these blocks into :class:`qiskit.quantum_info.Clifford` objects.
    This pass inherits from :class:`~.CollectAndCollapse` and in particular supports the option
    ``do_commutative_analysis``.
    It also supports two additional options ``split_blocks`` and ``min_block_size``.
    See the release notes for :class:`~.CollectAndCollapse` and  :class:`~.CollectLinearFunctions`
    for additional details.
  - |
    The :class:`~.CollectLinearFunctions` transpiler pass has several new arguments
    on its constructor:

      * ``do_commutative_analysis``: enables exploiting commutativity between gates
        in order to collect larger blocks of nodes.

      * ``split_blocks``: enables spliting collected blocks into sub-blocks over
        disjoint subsets of qubits. For example, in the following circuit::

            qc = QuantumCircuit(4)
            qc.cx(0, 2)
            qc.cx(1, 3)
            qc.cx(2, 0)
            qc.cx(3, 1)
            qc.cx(1, 3)

        the single block of CX gates over qubits ``{0, 1, 2, 3}`` can be split into two disjoint
        sub-blocks, one over qubits ``{0, 2}`` and the other over qubits ``{1, 3}``.

      * ``min_block_size``: allows to specify the minimum size of the block to be consolidated,
        blocks with fewer gates will not be modified. For example, in the following circuit::

            qc = QuantumCircuit(4)
            qc.cx(1, 2)
            qc.cx(2, 1)

        the two CX gates will be consolidated when ``min_block_size`` is 1 or 2, and will remain unchanged
        when ``min_block_size`` is 3 or larger.
