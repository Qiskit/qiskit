---
features:
  - |
    The ability to pass qubit and measurement LO frequencies has now been added to circuit jobs at
    both the job and experiment (individual circuit) level.

    At the job level, the fields ``default_qubit_los`` and ``default_meas_los`` may be used as
    arguments to ``execute`` for both circuit and pulse jobs. The fields are lists of floats
    representing qubit drive and measure LO frequencies (in Hz) and are indexed by qubit number
    (entry 0 is qubit 0, entry 1 is qubit 1, etc...). The length of the list must be equal to the
    number of qubits in the system. The same functionality is provided by passing the arguments
    ``qubit_lo_freq`` and ``meas_lo_freq`` to assemble. For example, consider running circuit
    ``circ`` on some ``backend`` with 3 qubits. You want to use qubit frequencies
    ``[5e9, 4.9e9, 5.1e9]`` and measurement frequencies ``[5.5e9, 6.5e9, 7.1e9]``. This can be
    achieved by::

      job = execute(
              circ,
              backend,
              default_qubit_los=[5e9, 4.9e9, 5.1e9],
              default_meas_los=[5.5e9, 6.5e9, 7.1e9]
            )

    or::

      qobj = assemble(
              circ,
              backend,
              qubit_lo_freq=[5e9, 4.9e9, 5.1e9],
              meas_lo_freq=[5.5e9, 6.5e9, 7.1e9]
            )

    At the experiment (individual circuit/schedule) level, the field ``schedule_los`` may be used as
    an argument to either ``execute`` or ``assemble``. This field is used as in standard pulse jobs.
    For single experiments (or a single configuration), users provide either an ``LoConfig`` object
    or a dict mapping ``PulseChannel``'s to floats. For multiple experiments, users provide a list
    combining the prior two types. If ``schedule_los`` is provided and an LO for a given qubit is
    missing, the job level values will be used. If the job level values are also missing, an error
    will be thrown. As an example, suppose we wish to apply drive LO ``5.5e9`` to qubit 0 and meas
    LO ``6.5e9`` to qubit 2, on a backend with 3 qubits. We will use the same job level values and
    circuit as above. This is done via::

      import qiskit.pulse
      job = execute(
              circ,
              backend,
              default_qubit_los=[5e9, 4.9e9, 5.1e9],
              default_meas_los=[5.5e9, 6.5e9, 7.1e9]),
              schedule_los={pulse.DriveChannel(0):5.5e9}, pulse.MeasureChannel(2):6.5e9}
            )

    or::

      import qiskit.pulse
      qobj = assemble(
              circ,
              backend,
              qubit_lo_freq=[5e9, 4.9e9, 5.1e9],
              meas_lo_freq=[5.5e9, 6.5e9, 7.1e9]),
              schedule_los={pulse.DriveChannel(0):5.5e9}, pulse.MeasureChannel(2):6.5e9}
            )

    Support has also been added for returning ``qubit_lo_range`` and ``meas_lo_range`` from
    qasm-only backends. This will allow users to determine reasonable values for ``qubit_lo_freq``
    and ``meas_lo_freq``. These fields can be accessed by::

      qubit_lo_range = backend.configuration().qubit_lo_range
      meas_lo_range = backend.configuration().meas_lo_range

fixes:
  - |
    Bug where ``qubit_lo_range`` and ``meas_lo_range`` were not being used to check
    ``qubit_lo_freq`` and ``meas_lo_freq`` values.
