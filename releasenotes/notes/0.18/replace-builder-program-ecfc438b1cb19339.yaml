---
upgrade:
  - |
    The output program representation from the pulse builder
    (:func:`qiskit.pulse.builder.build`) has changed from a
    :class:`~qiskit.pulse.Schedule` to a
    :class:`~qiskit.pulse.ScheduleBlock`. This new representation disables
    some timing related operations such as shift and insert. However, this
    enables parameterized instruction durations within the builder context.
    For example:

    .. code-block:: python

        from qiskit import pulse
        from qiskit.circuit import Parameter

        dur = Parameter('duration')

        with pulse.build() as sched:
            with pulse.align_sequential():
                pulse.delay(dur, pulse.DriveChannel(1))
                pulse.play(pulse.Gaussian(dur, 0.1, dur/4), pulse.DriveChannel(0))

        assigned0 = sched.assign_parameters({dur: 100})
        assigned1 = sched.assign_parameters({dur: 200})

    You can directly pass the duration-assigned schedules to the assembler (or backend),
    or you can attach them to your quantum circuit as pulse gates.
deprecations:
  - |
    The pulse builder (:func:`qiskit.pulse.builder.build`) syntax
    :func:`qiskit.pulse.builder.inline` is deprecated and will be removed in a
    future release. Instead of using this context, you can just remove alignment
    contexts within the inline context.
  - |
    The pulse builder (:func:`qiskit.pulse.builder.build`) syntax
    :func:`qiskit.pulse.builder.pad` is deprecated and will be removed in a
    future release. This was done because the :class:`~qiskit.pulse.ScheduleBlock`
    now being returned by the pulse builder  doesn't support the ``.insert`` method
    (and there is no insert syntax in the builder). The use of timeslot placeholders
    to block the insertion of other instructions is no longer necessary.
    The returned :class:`~qiskit.pulse.ScheduleBlock` can be converted to
    a :class:`~qiskit.pulse.Schedule` using :func:`qiskit.pulse.transforms.block_to_schedule`.
