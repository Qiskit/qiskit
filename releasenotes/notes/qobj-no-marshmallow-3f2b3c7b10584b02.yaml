---
upgrade:
  - |
    `fastjsonschema <https://pypi.org/project/fastjsonschema/>`_ is added as a
    dependency. This is used for much faster validation of qobj dictionaries
    against the JSON schema when the ``to_dict()`` method is called on qobj
    objects with the ``validate`` set to ``True``.
  - |
    The classes:

    * ``QobjInstruction``
    * ``QobjExperimentHeader``
    * ``QobjExperimentConfig``
    * ``QobjExperiment``
    * ``QobjConfig``
    * ``QobjHeader``
    * ``PulseQobjInstruction``
    * ``PulseQobjExperimentConfig``
    * ``PulseQobjExperiment``
    * ``PulseQobjConfig``
    * ``QobjMeasurementOption``
    * ``PulseLibraryItem``
    * ``PulseLibraryItemSchema``
    * ``PulseQobjInstructionSchema``
    * ``QasmQobjInstruction``
    * ``QasmQobjExperimentConfig``
    * ``QasmQobjExperiment``
    * ``QasmQobjConfig``
    * ``QasmQobj``
    * ``PulseQobj``

    from ``qiskit.qobj`` do not validate their inputs by default anymore. If
    you would like to validate them against the qobj schema this can be done
    by setting the ``validate`` kwarg to ``True`` on to_dict() method
    from the top level classes ``QasmQobj`` and ``PulseQobj``. For example:

    .. code-block:

        from qiskit import qobj

        my_qasm = qobj.QasmQobj(
            qobj_id='12345',
            header=qobj.QobjHeader(),
            config=qobj.QasmQobjConfig(shots=1024, memory_slots=2,
                                       max_credits=10),
            experiments=[
                qobj.QasmQobjExperiment(instructions=[
                    qobj.QasmQobjInstruction(name='u1', qubits=[1],
                                             params=[0.4]),
                    qobj.QasmQobjInstruction(name='u2', qubits=[1],
                                             params=[0.4, 0.2])
                ])
            ]
        )
        qasm_dict = my_qasm.to_dict(validate=True)

    which will validate the output dictionary against the Qasm jsonschema.

  - |
    The output from ``qiskit.qobj.QasmQobj.to_dict()`` and
    ``qiskit.qobj.PulseQobj.to_dict()`` is no longer in a dictionary format
    for json serialization as expected by IBMQ's API. These Qobj objects are
    the current format we pass to providers/backends and while having a
    dictionary format that could just be passed to the IBMQ api directly was
    moderately useful for the qiskit-ibmq-provider it made things more difficult
    for other providers. Especially for providers that wrap local simulators.
    Moving forward the definitions of what is passed between providers and
    the IBMQ API requests will be further decoupled (in a backwards compatible
    manner) which should ease the burden of writing providers and backends.

    The only functional difference between the output of these methods now is
    that complex numbers are represented with the ``complex`` type and numpy
    arrays are not silently converted to list types. If you want to json encode
    a dictionary from the ``to_dict()`` methods as before this can be done by
    building a custom json encoder. For example::

        import json

        from qiskit import qobj

        my_qasm = qobj.QasmQobj(
            qobj_id='12345',
            header=qobj.QobjHeader(),
            config=qobj.QasmQobjConfig(shots=1024, memory_slots=2,
                                       max_credits=10),
            experiments=[
                qobj.QasmQobjExperiment(instructions=[
                    qobj.QasmQobjInstruction(name='u1', qubits=[1],
                                             params=[0.4]),
                    qobj.QasmQobjInstruction(name='u2', qubits=[1],
                                             params=[0.4, 0.2])
                ])
            ]
        )
        qasm_dict = my_qasm.to_dict()

        class QobjEncoder(json.JSONEncoder):
            """A json encoder for pulse qobj"""
            def default(self, obj):
                # Convert numpy arrays:
                if hasattr(obj, 'tolist'):
                    return obj.tolist()
                # Use Qobj complex json format:
                if isinstance(obj, complex):
                    return (obj.real, obj.imag)
                return json.JSONEncoder.default(self, obj)

        json_str = json.dumps(qasm_dict, cls=QobjEncoder)
    
    will generate a json string in the same exact manner that
    ``json.dumps(my_qasm.to_dict())`` did in previous releases.

other:
  - |
    The qasm and pulse qobj classes:

    * ``QobjInstruction``
    * ``QobjExperimentHeader``
    * ``QobjExperimentConfig``
    * ``QobjExperiment``
    * ``QobjConfig``
    * ``QobjHeader``
    * ``PulseQobjInstruction``
    * ``PulseQobjExperimentConfig``
    * ``PulseQobjExperiment``
    * ``PulseQobjConfig``
    * ``QobjMeasurementOption``
    * ``PulseLibraryItem``
    * ``PulseLibraryItemSchema``
    * ``PulseQobjInstructionSchema``
    * ``QasmQobjInstruction``
    * ``QasmQobjExperimentConfig``
    * ``QasmQobjExperiment``
    * ``QasmQobjConfig``
    * ``QasmQobj``
    * ``PulseQobj``
    
    From ``qiskit.qobj`` have all been reimplemented without using the
    marsmallow library. These new implementations are designed to be drop-in
    replacement (except for as noted in the upgrade release notes) but
    specifics inherited from marshmallow may not work. Please file issues for
    any incompatibilities found.
