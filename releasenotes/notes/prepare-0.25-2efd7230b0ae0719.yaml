---
prelude: |
  The Qiskit Terra 0.25.0 release highlights are:

  * Control-flow operations are now supported through the transpiler at
    all optimization levels, including levels 2 and 3 (e.g. calling
    :func:`.transpile` or :func:`.generate_preset_pass_manager` with
    keyword argument ``optimization_level`` specified as 2 or 3 is now
    supported).

  * The fields :attr:`.IfElseOp.condition`, :attr:`.WhileLoopOp.condition` and
    :attr:`.SwitchCaseOp.target` can now be instances of the new runtime classical-expression type
    :class:`.expr.Expr`.  This is distinct from :class:`.ParameterExpression` because it is
    evaluated *at runtime* for backends that support such operations.

    These new expressions have significantly more power than the old two-tuple form of supplying
    classical conditions.  For example, one can now represent equality constraints between two
    different classical registers, or the logic "or" of two classical bits.  These two examples
    would look like::

      from qiskit.circuit import QuantumCircuit, ClassicalRegister, QuantumRegister
      from qiskit.circuit.classical import expr

      qr = QuantumRegister(4)
      cr1 = ClassicalRegister(2)
      cr2 = ClassicalRegister(2)
      qc = QuantumCircuit(qr, cr1, cr2)
      qc.h(0)
      qc.cx(0, 1)
      qc.h(2)
      qc.cx(2, 3)
      qc.measure([0, 1, 2, 3], [0, 1, 2, 3])

      # If the two registers are equal to each other.
      with qc.if_test(expr.equal(cr1, cr2)):
        qc.x(0)

      # While either of two bits are set.
      with qc.while_loop(expr.logic_or(cr1[0], cr1[1])):
        qc.reset(0)
        qc.reset(1)
        qc.measure([0, 1], cr1)

    For more examples, see the documentation for :mod:`qiskit.circuit.classical`.

    This feature is new for both Qiskit and the available quantum hardware that
    Qiskit works with. As the features are still being developed there are likely
    to be places where there are unexpected edge cases that will need some time to
    be worked out. If you encounter any issue around classical expression support
    or usage please open an issue with Qiskit or your hardware vendor.

    In this initial release, Qiskit has added the operations:

    * :func:`~.expr.bit_not`
    * :func:`~.expr.logic_not`
    * :func:`~.expr.bit_and`
    * :func:`~.expr.bit_or`
    * :func:`~.expr.bit_xor`
    * :func:`~.expr.logic_and`
    * :func:`~.expr.logic_or`
    * :func:`~.expr.equal`
    * :func:`~.expr.not_equal`
    * :func:`~.expr.less`
    * :func:`~.expr.less_equal`
    * :func:`~.expr.greater`
    * :func:`~.expr.greater_equal`

    These can act on Python integer and Boolean literals, or on :class:`.ClassicalRegister`
    and :class:`.Clbit` instances.

    All these classical expressions are fully supported through the Qiskit transpiler stack, through
    QPY serialisation (:mod:`qiskit.qpy`) and for export to OpenQASM 3 (:mod:`qiskit.qasm3`). Import
    from OpenQASM 3 is currently managed by `a separate package <https://github.com/Qiskit/qiskit-qasm3-import>`__
    (which is re-exposed via :mod:`qiskit.qasm3`), which we hope will be extended to match the new
    features in Qiskit.

  * The :mod:`qiskit.algorithms` module has been deprecated and will be removed
    in a future release. It has been superseded by a new standalone library
    ``qiskit-algorithms`` which can be found on PyPi or on Github here:

    https://github.com/qiskit-community/qiskit-algorithms

    The :mod:`qiskit.algorithms` module will continue to work as before and bug fixes
    will be made to it until its future removal, but active development
    of new features has moved to the new package.
    If you're relying on :mod:`qiskit.algorithms` you should update your
    Python requirements to also include ``qiskit-algorithms`` and update the imports
    from ``qiskit.algorithms`` to ``qiskit_algorithms``. Please note that this
    new package does not include already deprecated algorithms code, including
    ``opflow`` and ``QuantumInstance``-based algorithms. If you have not yet
    migrated from ``QuantumInstance``-based to primitives-based algorithms,
    you should follow the migration guidelines in https://qisk.it/algo_migration.
    The decision to migrate the :mod:`~.algorithms` module to a
    separate package was made to clarify the purpose Qiskit and
    make a distinction between the tools and libraries built on top of it.

  Qiskit Terra 0.25 has dropped support for Python 3.7 following
  deprecation warnings started in Qiskit Terra 0.23. This is consistent
  with Python 3.7â€™s end-of-life on the 27th of June, 2023. To continue
  using Qiskit, you must upgrade to a more recent version of Python. 
