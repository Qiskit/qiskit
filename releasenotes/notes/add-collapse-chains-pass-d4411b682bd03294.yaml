---
features:
  - |
    Added a new base transpiler pass, :class:`~CollapseChains`, that provides an
    abstract interface for walking over a circuit, collecting blocks of gates that
    match a given filter function, and consolidating these blocks into objects of
    a given type. As an example, an inherited :class:`~CollectLinearFunctions`
    collects blocks of :class:`.CXGate` and :class:`.SwapGate` gates, and replaces
    each block with a :class:`.LinearFunction`.

    The interface also supports the following options. The option ``do_commutative_analysis``
    allows to exploit commutativity between gates in order to collect larger blocks of nodes.
    As an example, collecting blocks of CX gates in the following circuit::
        qc = QuantumCircuit(2)
        qc.cx(0, 1)
        qc.z(0)
        qc.cx(1, 0)
    allows to consolidate the two CX gates, as the first CX gate and the Z-gate commute.
    The option ``split_blocks`` allows to split collected blocks into sub-blocks over
    disjoint subsets of qubits. As an example, in the following circuit:
        qc = QuantumCircuit(4)
        qc.cx(0, 2)
        qc.cx(1, 3)
        qc.cx(2, 0)
        qc.cx(3, 1)
        qc.cx(1, 3)
    the single block of CX gates over qubits ``{0, 1, 2, 3}`` can be split into two disjoint
    sub-blocks, one over qubits ``{0, 2}`` and the other over qubits ``{1, 3}``.
    The option ``min_block_size`` allows to specify the minimum size of the block to be consolidated,
    blocks with fewer gates will not be modified. As an example, in the following circuit:
        qc = QuantumCircuit(4)
        qc.cx(1, 2)
        qc.cx(2, 1)
    the two CX gates will be consolidated when ``min_block_size`` is 1 or 2, and will remain unchanged
    when ``min_block_size`` is 3 or larger.

  - |
    Added a new :class:`~CollectCliffords` transpiler pass that collects blocks of clifford gates
    and consolidates these blocks into :class:`qiskit.quantum_info.Clifford` objects. This pass
    inherit from :class:`~CollapseChains`, and in particular supports the options
    ``do_commutative_analysis``, ``split_blocks`` and ``min_block_size``. See the release
    notes for :class:`~CollapseChains` for additional details.

upgrade:
  - |
    Modified the :class:`~CollectLinearFunctions` transpiler pass to inherit from
    :class:`~CollapseChains`. In particular, :class:`~CollectLinearFunctions` supports the new
    options ``do_commutative_analysis``, ``split_blocks`` and ``min_block_size``. See the release
    notes for :class:`~CollapseChains` for additional details.
