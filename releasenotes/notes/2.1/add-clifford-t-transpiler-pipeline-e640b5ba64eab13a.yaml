---
features_transpiler:
  - |
    The function :func:`.generate_preset_pass_manager` now generates a special
    pass manager when the basis set consists only of Clifford+T gates.
    Formally, a Clifford+T basis set must contain only Clifford gates, along
    with either :class:`.TGate`, :class:`.TdgGate`, or both. The full list of supported
    Clifford gates can be obtained by using :func:`.get_clifford_gate_names`.

    For example::

      from qiskit.circuit import QuantumCircuit
      from qiskit.transpiler.preset_passmanagers import generate_preset_pass_manager
      from qiskit.quantum_info import get_clifford_gate_names

      basis_gates = get_clifford_gate_names() + ["t", "tdg"]
      pm = generate_preset_pass_manager(basis_gates=basis_gates)

      qc = QuantumCircuit(1)
      qc.rx(0.8, 0)
      qct = pm.run(qc)
      print(qct.count_ops())

    Previously, the generated pass manager could not handle the example above
    because it couldn't decompose single-qubit :class:`.UGate` rotation gates into
    Clifford+T gates. However, the new pass manager uses the
    Solovay-Kitaev decomposition to approximate single-qubit rotation gates
    using ``H``, ``T`` and ``Tdg`` gates, and calls the :class:`~.BasisTranslator`
    transpiler pass to further translate the gates into the target basis set.
    The new pass manager also has other changes as to enable a more efficient
    translation into Clifford+T gates.

    It is important to note that the specified Clifford+T basis gate set should be
    universal, or else transpilation might not succeed. While the gate set
    ``["h", "t", "tdg"]`` or even ``["h", "t"]`` is sufficient for universality,
    it is recommended to add more Clifford gates to the set if possible, as
    otherwise the translation might be less efficient. For example, if S-gate is not included,
    S-gates might be decomposed into pairs of T-gates (that is,
    Clifford gates might be decomposed into non-Clifford gates, which might not be the
    desired behavior).

    Following is a slightly larger example::

      from qiskit.circuit import QuantumCircuit
      from qiskit.circuit.library import QFTGate
      from qiskit.transpiler.preset_passmanagers import generate_preset_pass_manager

      qc = QuantumCircuit(4)
      qc.append(QFTGate(4), [0, 1, 2, 3])

      basis_gates = ["cx", "s", "sdg", "h", "t", "tdg"]
      pm = generate_preset_pass_manager(basis_gates=basis_gates, optimization_level=2)

      qc = QuantumCircuit(4)
      qc.append(QFTGate(4), [0, 1, 2, 3])

      qct = pm.run(qc)
      print(qct.count_ops())
