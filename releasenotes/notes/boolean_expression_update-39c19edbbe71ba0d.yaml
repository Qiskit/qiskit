---
upgrade_circuits:
  - |
    The :class:`.PhaseOracle` no longer relies on the `tweedledum` library
    but might not be synthesized as effectively as before.
    :class:`.BitFlipOracle` was added as an alternative to
    directly synthesizing :class:`.BooleanExpression`, as this
    class is removed in Qiskit 2.0.

    The interface of :class:`.PhaseOracle` was simplified; it no longer
    accepts a `synthesizer` parameter, and the `expression` parameter
    can only be a string; `ClassicalElement` has been deprecated.

    :class:`.PhaseOracle` is used exactly as before:
    .. code-block:: python
      
      from qiskit.circuit.library.phase_oracle import PhaseOracle
      bool_expr = "(x0 & x1 | ~x2) & x4"
      oracle = PhaseOracle(bool_expr)
      print(oracle)
    
    .. code-block:: text

      q_0: ─o──■──■─
            │  │  │ 
      q_1: ─┼──o──■─
            │  │  │ 
      q_2: ─o──o──┼─
            │  │  │ 
      q_3: ─■──■──■─
                      
features_circuits:
  - |
   The new :class:`.PhaseBitFlipOracle` has the same interface as
    :class:`.PhaseOracle`, but synthesizes a bit flip oracle instead
    of a phase flip oracle, meaning it acts on one additional qubit
    and can be seen a applying a controlled X operation, where the
    control is the value of the expression encoded by the oracle.

    .. code-block:: python
    
      from qiskit.circuit.library.bit_flip_oracle import BitFlipOracle
      bool_expr = "(x0 & x1 | ~x2) & x4"
      oracle = BitFlipOracle(bool_expr)
      print(oracle)

    .. code-block:: text

      q_0: ──o────■────■──
             │    │    │  
      q_1: ──┼────o────■──
             │    │    │  
      q_2: ──o────o────┼──
             │    │    │  
      q_3: ──■────■────■──
           ┌─┴─┐┌─┴─┐┌─┴─┐
      q_4: ┤ X ├┤ X ├┤ X ├
           └───┘└───┘└───┘

    .. code-block:: python

      print(oracle.evaluate_bitstring("1010"))

    .. code-block:: text

      True
