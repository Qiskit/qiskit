---
prelude: >
    OpenPulse now supports four parametric pulses: Gaussian, GaussianSquare,
    Drag, and ConstantPulse. These are Pulse commands which take parameters
    rather than sample points to describe a pulse. They can be played on
    channels and added to schedules exactly like other commands. This creates
    a more consistent interface for adding commands from the pulse_lib, and
    dramatically reduces the size of assembled pulse-Qobjs when the backend
    supports parametric pulses.
features:
  - |
    Parametric pulses have been added to OpenPulse. These are pulse commands
    which are parameterized and understood by the backend. Arbitrary pulse shapes are
    still supported by the SamplePulse Command. The new supported pulses are:

      - ConstantPulse
      - Drag
      - Gaussian
      - GaussianSquare

    They can be used like any other Pulse command. An example:

        from qiskit.pulse import (Schedule, Gaussian, Drag, ConstantPulse,
                                  GaussianSquare)

        sched = Schedule(name='parametric_demo')
        sched += Gaussian(duration=25, sigma=4, amp=0.5j)(DriveChannel(0))
        sched += Drag(duration=25, amp=0.1, sigma=5, beta=4)(DriveChannel(1))
        sched += ConstantPulse(duration=25, amp=0.3+0.1j)(DriveChannel(1))
        sched += GaussianSquare(duration=1500, amp=0.2, sigma=8,
                                width=140)(MeasureChannel(0)) << sched.duration

    The resulting schedule will be similar to a SamplePulse schedule built
    using `pulse.pulse_lib`, however, waveform sampling will be performed by the
    backend. The method `sched.draw()` can still be used as usual. However, the
    command will be converted to a SamplePulse with the `get_sample_pulse`
    method, so the pulse shown may not sample the continuous function the same
    way that the backend will.

    This feature can be used to construct Pulse programs for any backend, but
    the pulses will be converted to `SamplePulse`s if the backend does not
    support parametric pulses. Backends which support them will have the
    following new attribute:

        backend.configuration().parametric_pulses: List[str]
        # e.g. ['gaussian', 'drag', 'constant']

    Note that the backend does not need to support all of the parametric
    pulses defined in Qiskit.

    When the backend supports parametric pulses, and the Pulse schedule is
    built with them, the assembled Qobj is significantly smaller. The size
    of a PulseQobj built entirely with parametric pulses is dependent only
    on the number of instructions, whereas the size of a PulseQobj built
    otherwise will grow with the duration of the instructions (since every
    sample must be specified with a value).

    New parametric pulses can easily be added. The new command must implement
    a `get_sample_pulse` method to convert itself to a SamplePulse (for drawing
    and to assemble to backends which do not support it). It should be added
    to `qiskit/pulse/commands/parametric_pulses.py`.
    The new pulse must then be registered by the assembler in
    `qiskit/qobj/converters/pulse_instruction.py:ParametricPulseShapes`
    by following the existing pattern:
        class ParametricPulseShapes(Enum):
            ...
            backend_config_pulse_str = commands.YourPulseCommandClass
