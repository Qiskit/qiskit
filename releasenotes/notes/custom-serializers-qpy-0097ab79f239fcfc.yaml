---
features:
  - |
    Added a new kwarg, ``metadata_serializer`` to the
    :func:`.qpy_serialization.dump` function for specifying a custom
    ``JSONEncoder`` subclass for use when serializing the
    :attr`.QuantumCircuit.metadata` attribute and a dual kwarg
    ``metadata_deserializer`` to the :func:`.qpy_serialization.load` function
    for specifying a ``JSONDecoder`` subclass. By default the
    :func:`~qiskit.circuit.qpy_serialization.dump` and
    :func:`~qiskit.circuit.qpy_serialization.load` functions will attempt to
    JSON serialize and deserialize with the stdlib default json encoder and
    decoder. The contents of :attr`.QuantumCircuit.metadata` for each circuit,
    but since :attr`.QuantumCircuit.metadata` can contain any Python
    dictionary even those with contents not JSON serializable by the default
    encoder will lead to circuits that can't be serialized. The new
    ``metadata_serializer`` argument for
    :func:`~qiskit.circuit.qpy_serialization.dump` enables users to specify a
    custom ``JSONEncoder`` that will be used with the internal ``json.dump()``
    call for  serializing the :attr`.QuantumCircuit.metadata` dictionary. This
    can then be paired with the new ``metadata_deserializer`` argument of the
    :func:`.qpy_serialization.load` function to decode those custom JSON
    encodings. If ``metadata_serializer`` is specified on
    :func:`~qiskit.circuit.qpy_serialization.dump` but ``metadata_deserializer``
    is not specified on :func:`~qiskit.circuit.qpy_serialization.load` calls
    the QPY will be loaded, but the circuit metadata may not be reconstructed
    fully.
