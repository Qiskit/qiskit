---
features_transpiler:
  - |
    The :class:`.DAGCircuit` has been reimplemented in Rust. This rewrite of the Python class
    should be fully API compatible with the previous Python implementation. While the class
    was previously implemented using `rustworkx <https://www.rustworkx.org/>`__, for which
    the underlying data graph structure exists in Rust, the implementation of the class and
    all the data was lived in Python. This new version of :class:`.DAGCircuit` stores Rust native
    representations for all its data and is more memory-efficient due to the compressed qubit
    and clbit representation designed for instructions at rest. It also enables transpiler passes
    to fully manipulate a :class:`.DAGCircuit` from Rust, enabling improvements in performance.
upgrade_transpiler:
  - |
    :class:`.DAGNode` objects (and its subclasses :class:`.DAGInNode`, :class:`.DAGOutNode`, and
    :class:`.DAGOpNode`) no longer return references to the same underlying object from
    :class:`.DAGCircuit` methods. This was never a guarantee before that all returned nodes would
    be shared reference to the same object. However, with the migration of the :class:`.DAGCircuit` to
    Rust, a new :class:`.DAGNode` instance is generated on the fly when a node is returned to Python.
    These objects will evaluate as equal using ``==`` or similar checks that rely on ``__eq__``
    but will no longer identify as the same object.
  - |
    The :class:`.DAGOpNode` instances returned from the :class:`.DAGCircuit` are no longer shared
    references to the underlying data stored on the DAG. In previous release it was possible to
    do something like::

        for node in dag.op_nodes():
            node.op = new_op

    however this type of mutation was always unsound as it could break the DAG's internal caching
    and cause corruption of the data structure. Instead you should use the API provided by
    :class:`.DAGCircuit` for mutation such as :meth:`.DAGCircuit.substitute_node` or
    :meth:`.DAGCircuit.substitute_node_with_dag`. For example
    the above code block would become::

        for node in dag.op_nodes():
          dag.substitute_node(node, new_op)

    This is similar to an upgrade note from 1.2.0 where this was noted on for mutation of the
    :attr:`.DAGOpNode.op` attribute, not the :class:`.DAGOpNode` itself. However in 1.3 this extends
    to the entire object, not just it's inner ``op`` attribute. In general this type of mutation was
    always unsound and not supported, but could previously have potentially worked in some cases.
fixes:
  - |
    Fixed an issue with :meth:`.DAGCircuit.apply_operation_back` and
    :meth:`.DAGCircuit.apply_operation_front` where previously if you set a
    :class:`.Clbit` object to the input for the ``qargs`` argument it would silently be accepted.
    This has been fixed so the type mismatch is correctly identified and an exception is raised.
