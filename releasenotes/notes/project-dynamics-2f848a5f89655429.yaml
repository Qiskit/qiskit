features:
  - |
    Added the :class:`PVQD` class to the time evolution framework. This class implements the
    projected Variational Quantum Dynamics (p-VQD) algorithm as :class:`.PVQD` of
    `Barison et al. <https://quantum-journal.org/papers/q-2021-07-28-512/>`_.

    In each timestep this algorithm computes the next state with a Trotter formula and projects it
    onto a variational form. The projection is determined by maximizing the fidelity of the
    Trotter-evolved state and the ansatz, using a classical optimization routine.

    .. code-block:: python

        import numpy as np

        from qiskit import BasicAer
        from qiskit.circuit.library import EfficientSU2
        from qiskit.opflow import X, Z, I, MatrixExpectation

        backend = BasicAer.get_backend("statevector_simulator")
        expectation = MatrixExpectation()
        hamiltonian = 0.1 * (Z ^ Z) + (I ^ X) + (X ^ I)
        observable = Z ^ Z
        ansatz = EfficientSU2(2, reps=1)
        initial_parameters = np.zeros(ansatz.num_parameters)

        time = 1
        optimizer = L_BFGS_B()

        # setup the algorithm
        pvqd = PVQD(
            ansatz,
            initial_parameters,
            num_timesteps=100,
            optimizer=optimizer,
            quantum_instance=backend,
            expectation=expectation
        )

        # specify the evolution problem
        problem = EvolutionProblem(
            hamiltonian, time, aux_operators=[hamiltonian, observable]
        )

        # and evolve!
        result = pvqd.evolve(problem)
