# Generated from qasm2.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3x")
        buf.write("\u040d\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write('\4\37\t\37\4 \t \4!\t!\4"\t"\4#\t#\4$\t$\4%\t%\4&\t')
        buf.write("&\4'\t'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\3\2\3\2\3\2\3\2\7\2\u00db\n\2\f")
        buf.write("\2\16\2\u00de\13\2\3\3\5\3\u00e1\n\3\3\3\7\3\u00e4\n\3")
        buf.write("\f\3\16\3\u00e7\13\3\3\3\7\3\u00ea\n\3\f\3\16\3\u00ed")
        buf.write("\13\3\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\6\3\6\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u0104\n\b\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u010e\n\t\3\n\3\n\3\n")
        buf.write("\3\13\3\13\5\13\u0115\n\13\3\13\3\13\3\f\3\f\5\f\u011b")
        buf.write("\n\f\3\f\3\f\3\f\5\f\u0120\n\f\3\r\3\r\5\r\u0124\n\r\3")
        buf.write("\r\3\r\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\20\3\20\3")
        buf.write("\20\3\20\3\20\3\20\3\21\3\21\7\21\u0137\n\21\f\21\16\21")
        buf.write("\u013a\13\21\3\21\3\21\3\22\3\22\3\22\5\22\u0141\n\22")
        buf.write("\3\22\3\22\5\22\u0145\n\22\3\22\5\22\u0148\n\22\3\23\3")
        buf.write("\23\3\23\5\23\u014d\n\23\3\23\3\23\5\23\u0151\n\23\3\23")
        buf.write("\5\23\u0154\n\23\3\24\3\24\3\24\7\24\u0159\n\24\f\24\16")
        buf.write("\24\u015c\13\24\3\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30")
        buf.write("\5\30\u0166\n\30\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\5\31\u0171\n\31\5\31\u0173\n\31\3\32\3\32\3\32")
        buf.write("\5\32\u0178\n\32\3\33\3\33\3\33\3\33\5\33\u017e\n\33\3")
        buf.write("\34\3\34\3\34\3\34\5\34\u0184\n\34\3\35\3\35\3\35\5\35")
        buf.write("\u0189\n\35\3\36\3\36\3\36\5\36\u018e\n\36\3\36\3\36\5")
        buf.write("\36\u0192\n\36\3\36\5\36\u0195\n\36\3\36\5\36\u0198\n")
        buf.write("\36\3\37\3\37\3\37\3\37\5\37\u019e\n\37\3 \3 \3 \7 \u01a3")
        buf.write("\n \f \16 \u01a6\13 \3 \3 \3!\3!\3!\3!\3!\3!\3!\5!\u01b1")
        buf.write("\n!\3!\3!\3!\3!\3!\5!\u01b8\n!\3!\3!\5!\u01bc\n!\3!\5")
        buf.write('!\u01bf\n!\3"\3"\3"\7"\u01c4\n"\f"\16"\u01c7\13')
        buf.write('"\3#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\5$\u01d7')
        buf.write("\n$\5$\u01d9\n$\3$\3$\3$\7$\u01de\n$\f$\16$\u01e1\13$")
        buf.write("\3%\3%\3%\7%\u01e6\n%\f%\16%\u01e9\13%\3&\3&\5&\u01ed")
        buf.write("\n&\3&\3&\5&\u01f1\n&\3&\3&\5&\u01f5\n&\3&\3&\3'\3'")
        buf.write("\3'\3'\3(\3(\3(\5(\u0200\n(\3(\5(\u0203\n(\3(\3(\3)")
        buf.write("\3)\3*\3*\3*\7*\u020c\n*\f*\16*\u020f\13*\3*\3*\3+\3+")
        buf.write("\3+\3,\3,\3,\7,\u0219\n,\f,\16,\u021c\13,\3,\5,\u021f")
        buf.write("\n,\3-\3-\3-\3-\5-\u0225\n-\3.\3.\3.\3.\3.\5.\u022c\n")
        buf.write(".\3/\7/\u022f\n/\f/\16/\u0232\13/\3/\3/\3/\3/\3/\5/\u0239")
        buf.write("\n/\3\60\3\60\3\60\3\61\3\61\3\61\3\62\3\62\3\62\5\62")
        buf.write("\u0244\n\62\3\62\3\62\3\62\3\62\5\62\u024a\n\62\3\63\3")
        buf.write("\63\5\63\u024e\n\63\3\64\3\64\3\64\5\64\u0253\n\64\3\64")
        buf.write("\3\64\3\65\3\65\3\65\3\65\3\65\3\66\3\66\3\66\3\66\3\66")
        buf.write("\5\66\u0261\n\66\3\67\7\67\u0264\n\67\f\67\16\67\u0267")
        buf.write("\13\67\3\67\3\67\3\67\3\67\3\67\5\67\u026e\n\67\3\67\3")
        buf.write("\67\38\38\39\39\3:\3:\3;\3;\3<\3<\3<\3=\3=\3=\3=\5=\u0281")
        buf.write("\n=\3=\3=\3=\7=\u0286\n=\f=\16=\u0289\13=\3>\3>\3>\3>")
        buf.write("\3>\3>\7>\u0291\n>\f>\16>\u0294\13>\3?\3?\3?\3?\3?\3?")
        buf.write("\7?\u029c\n?\f?\16?\u029f\13?\3@\3@\3@\3@\3@\3@\7@\u02a7")
        buf.write("\n@\f@\16@\u02aa\13@\3A\3A\3A\3A\3A\3A\7A\u02b2\nA\fA")
        buf.write("\16A\u02b5\13A\3B\3B\3B\3B\3B\3B\3B\7B\u02be\nB\fB\16")
        buf.write("B\u02c1\13B\3C\3C\3C\3C\3C\3C\3C\7C\u02ca\nC\fC\16C\u02cd")
        buf.write("\13C\3D\3D\3D\3D\3D\3D\7D\u02d5\nD\fD\16D\u02d8\13D\3")
        buf.write("E\3E\3E\3E\3E\3E\7E\u02e0\nE\fE\16E\u02e3\13E\3F\3F\3")
        buf.write("F\5F\u02e8\nF\3F\3F\3F\3F\5F\u02ee\nF\7F\u02f0\nF\fF\16")
        buf.write("F\u02f3\13F\3G\3G\3G\3H\3H\3H\3H\3H\5H\u02fd\nH\3I\3I")
        buf.write("\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\5I\u030e\nI\3")
        buf.write("I\3I\3I\3I\3I\3I\3I\7I\u0317\nI\fI\16I\u031a\13I\3J\3")
        buf.write("J\3K\3K\3L\3L\5L\u0322\nL\3L\3L\3L\3L\3M\3M\3N\3N\3O\3")
        buf.write("O\3O\7O\u032f\nO\fO\16O\u0332\13O\3P\3P\3P\3Q\3Q\3R\3")
        buf.write("R\3R\3R\3R\3R\5R\u033f\nR\3S\3S\3S\3S\3S\7S\u0346\nS\f")
        buf.write("S\16S\u0349\13S\3S\5S\u034c\nS\3T\3T\3T\3T\3T\3T\3T\5")
        buf.write("T\u0355\nT\3U\3U\3U\3U\3U\3U\3U\3U\3U\5U\u0360\nU\3V\3")
        buf.write("V\3V\3W\3W\3W\3X\3X\3X\5X\u036b\nX\3X\3X\3Y\3Y\3Y\3Y\5")
        buf.write("Y\u0373\nY\3Z\3Z\3Z\3Z\5Z\u0379\nZ\3Z\5Z\u037c\nZ\3Z\5")
        buf.write("Z\u037f\nZ\3Z\3Z\3[\3[\3[\5[\u0386\n[\3[\3[\3\\\3\\\3")
        buf.write("\\\3\\\5\\\u038e\n\\\3\\\5\\\u0391\n\\\3\\\5\\\u0394\n")
        buf.write("\\\3\\\5\\\u0397\n\\\3\\\3\\\3]\3]\7]\u039d\n]\f]\16]")
        buf.write("\u03a0\13]\3]\5]\u03a3\n]\3]\3]\3^\3^\3^\5^\u03aa\n^\3")
        buf.write("^\5^\u03ad\n^\3^\3^\3_\3_\3_\7_\u03b4\n_\f_\16_\u03b7")
        buf.write("\13_\3_\3_\3`\3`\3a\3a\5a\u03bf\na\3a\3a\3b\3b\3b\3b\3")
        buf.write("b\5b\u03c8\nb\3b\5b\u03cb\nb\3c\3c\3d\3d\3d\5d\u03d2\n")
        buf.write("d\3d\5d\u03d5\nd\3d\3d\3d\3e\3e\3e\3e\5e\u03de\ne\3f\3")
        buf.write("f\5f\u03e2\nf\3g\3g\3g\3g\3h\3h\3h\3h\5h\u03ec\nh\3h\5")
        buf.write("h\u03ef\nh\3h\3h\5h\u03f3\nh\3h\3h\7h\u03f7\nh\fh\16h")
        buf.write("\u03fa\13h\3h\3h\3i\3i\3j\3j\5j\u0402\nj\3k\3k\7k\u0406")
        buf.write("\nk\fk\16k\u0409\13k\3k\3k\3k\4\u03f8\u0407\16Fxz|~\u0080")
        buf.write("\u0082\u0084\u0086\u0088\u008a\u0090l\2\4\6\b\n\f\16\20")
        buf.write('\22\24\26\30\32\34\36 "$&(*,.\60\62\64\668:<>@BDFHJL')
        buf.write("NPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac")
        buf.write("\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be")
        buf.write("\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0")
        buf.write("\u00d2\u00d4\2\27\4\2rrtt\3\2\5\6\3\2\t\n\3\2\13\16\4")
        buf.write("\2\25\26ss\3\2\36\37\4\2 !kk\3\2\"%\3\2&'\4\2\23\23(")
        buf.write("(\3\2,-\3\2jk\3\2ln\3\2/\60\3\2\61\62\3\2\63;\4\2<Ghh")
        buf.write("\3\2OP\3\2TU\3\2XY\4\2\\\\vv\2\u0437\2\u00d6\3\2\2\2\4")
        buf.write("\u00e0\3\2\2\2\6\u00ee\3\2\2\2\b\u00f2\3\2\2\2\n\u00f6")
        buf.write("\3\2\2\2\f\u00f8\3\2\2\2\16\u0103\3\2\2\2\20\u010d\3\2")
        buf.write("\2\2\22\u010f\3\2\2\2\24\u0114\3\2\2\2\26\u0118\3\2\2")
        buf.write("\2\30\u0123\3\2\2\2\32\u0127\3\2\2\2\34\u012a\3\2\2\2")
        buf.write('\36\u012e\3\2\2\2 \u0138\3\2\2\2"\u0147\3\2\2\2$\u0153')
        buf.write("\3\2\2\2&\u0155\3\2\2\2(\u015d\3\2\2\2*\u015f\3\2\2\2")
        buf.write(",\u0161\3\2\2\2.\u0165\3\2\2\2\60\u0172\3\2\2\2\62\u0174")
        buf.write("\3\2\2\2\64\u0179\3\2\2\2\66\u017f\3\2\2\28\u0185\3\2")
        buf.write("\2\2:\u0194\3\2\2\2<\u019d\3\2\2\2>\u01a4\3\2\2\2@\u01be")
        buf.write("\3\2\2\2B\u01c0\3\2\2\2D\u01c8\3\2\2\2F\u01d8\3\2\2\2")
        buf.write("H\u01e2\3\2\2\2J\u01ea\3\2\2\2L\u01f8\3\2\2\2N\u01fc\3")
        buf.write("\2\2\2P\u0206\3\2\2\2R\u0208\3\2\2\2T\u0212\3\2\2\2V\u021e")
        buf.write("\3\2\2\2X\u0224\3\2\2\2Z\u022b\3\2\2\2\\\u0230\3\2\2\2")
        buf.write("^\u023a\3\2\2\2`\u023d\3\2\2\2b\u0249\3\2\2\2d\u024b\3")
        buf.write("\2\2\2f\u0252\3\2\2\2h\u0256\3\2\2\2j\u025b\3\2\2\2l\u0265")
        buf.write("\3\2\2\2n\u0271\3\2\2\2p\u0273\3\2\2\2r\u0275\3\2\2\2")
        buf.write("t\u0277\3\2\2\2v\u0279\3\2\2\2x\u0280\3\2\2\2z\u028a\3")
        buf.write("\2\2\2|\u0295\3\2\2\2~\u02a0\3\2\2\2\u0080\u02ab\3\2\2")
        buf.write("\2\u0082\u02b6\3\2\2\2\u0084\u02c2\3\2\2\2\u0086\u02ce")
        buf.write("\3\2\2\2\u0088\u02d9\3\2\2\2\u008a\u02e7\3\2\2\2\u008c")
        buf.write("\u02f4\3\2\2\2\u008e\u02fc\3\2\2\2\u0090\u030d\3\2\2\2")
        buf.write("\u0092\u031b\3\2\2\2\u0094\u031d\3\2\2\2\u0096\u0321\3")
        buf.write("\2\2\2\u0098\u0327\3\2\2\2\u009a\u0329\3\2\2\2\u009c\u032b")
        buf.write("\3\2\2\2\u009e\u0333\3\2\2\2\u00a0\u0336\3\2\2\2\u00a2")
        buf.write("\u033e\3\2\2\2\u00a4\u034b\3\2\2\2\u00a6\u034d\3\2\2\2")
        buf.write("\u00a8\u035f\3\2\2\2\u00aa\u0361\3\2\2\2\u00ac\u0364\3")
        buf.write("\2\2\2\u00ae\u0367\3\2\2\2\u00b0\u0372\3\2\2\2\u00b2\u0374")
        buf.write("\3\2\2\2\u00b4\u0382\3\2\2\2\u00b6\u0389\3\2\2\2\u00b8")
        buf.write("\u039a\3\2\2\2\u00ba\u03a6\3\2\2\2\u00bc\u03b0\3\2\2\2")
        buf.write("\u00be\u03ba\3\2\2\2\u00c0\u03bc\3\2\2\2\u00c2\u03ca\3")
        buf.write("\2\2\2\u00c4\u03cc\3\2\2\2\u00c6\u03ce\3\2\2\2\u00c8\u03dd")
        buf.write("\3\2\2\2\u00ca\u03e1\3\2\2\2\u00cc\u03e3\3\2\2\2\u00ce")
        buf.write("\u03e7\3\2\2\2\u00d0\u03fd\3\2\2\2\u00d2\u0401\3\2\2\2")
        buf.write("\u00d4\u0403\3\2\2\2\u00d6\u00dc\5\4\3\2\u00d7\u00db\5")
        buf.write("\16\b\2\u00d8\u00db\5\20\t\2\u00d9\u00db\5\u00d4k\2\u00da")
        buf.write("\u00d7\3\2\2\2\u00da\u00d8\3\2\2\2\u00da\u00d9\3\2\2\2")
        buf.write("\u00db\u00de\3\2\2\2\u00dc\u00da\3\2\2\2\u00dc\u00dd\3")
        buf.write("\2\2\2\u00dd\3\3\2\2\2\u00de\u00dc\3\2\2\2\u00df\u00e1")
        buf.write("\5\6\4\2\u00e0\u00df\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1")
        buf.write("\u00e5\3\2\2\2\u00e2\u00e4\5\b\5\2\u00e3\u00e2\3\2\2\2")
        buf.write("\u00e4\u00e7\3\2\2\2\u00e5\u00e3\3\2\2\2\u00e5\u00e6\3")
        buf.write("\2\2\2\u00e6\u00eb\3\2\2\2\u00e7\u00e5\3\2\2\2\u00e8\u00ea")
        buf.write("\5\f\7\2\u00e9\u00e8\3\2\2\2\u00ea\u00ed\3\2\2\2\u00eb")
        buf.write("\u00e9\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\5\3\2\2\2\u00ed")
        buf.write("\u00eb\3\2\2\2\u00ee\u00ef\7\3\2\2\u00ef\u00f0\t\2\2\2")
        buf.write("\u00f0\u00f1\7e\2\2\u00f1\7\3\2\2\2\u00f2\u00f3\7\4\2")
        buf.write("\2\u00f3\u00f4\7v\2\2\u00f4\u00f5\7e\2\2\u00f5\t\3\2\2")
        buf.write("\2\u00f6\u00f7\t\3\2\2\u00f7\13\3\2\2\2\u00f8\u00f9\5")
        buf.write("\n\6\2\u00f9\u00fa\5\60\31\2\u00fa\u00fb\7s\2\2\u00fb")
        buf.write("\u00fc\7e\2\2\u00fc\r\3\2\2\2\u00fd\u0104\5\u00b6\\\2")
        buf.write("\u00fe\u0104\5\u00b2Z\2\u00ff\u0104\5L'\2\u0100\u0104")
        buf.write("\5\u00caf\2\u0101\u0104\5\22\n\2\u0102\u0104\5\u00bc_")
        buf.write("\2\u0103\u00fd\3\2\2\2\u0103\u00fe\3\2\2\2\u0103\u00ff")
        buf.write("\3\2\2\2\u0103\u0100\3\2\2\2\u0103\u0101\3\2\2\2\u0103")
        buf.write("\u0102\3\2\2\2\u0104\17\3\2\2\2\u0105\u010e\5v<\2\u0106")
        buf.write("\u010e\5\30\r\2\u0107\u010e\5\24\13\2\u0108\u010e\5\u00a6")
        buf.write("T\2\u0109\u010e\5\u00aaV\2\u010a\u010e\5\u00acW\2\u010b")
        buf.write("\u010e\5D#\2\u010c\u010e\5X-\2\u010d\u0105\3\2\2\2\u010d")
        buf.write("\u0106\3\2\2\2\u010d\u0107\3\2\2\2\u010d\u0108\3\2\2\2")
        buf.write("\u010d\u0109\3\2\2\2\u010d\u010a\3\2\2\2\u010d\u010b\3")
        buf.write("\2\2\2\u010d\u010c\3\2\2\2\u010e\21\3\2\2\2\u010f\u0110")
        buf.write('\5"\22\2\u0110\u0111\7e\2\2\u0111\23\3\2\2\2\u0112\u0115')
        buf.write("\5<\37\2\u0113\u0115\5\62\32\2\u0114\u0112\3\2\2\2\u0114")
        buf.write("\u0113\3\2\2\2\u0115\u0116\3\2\2\2\u0116\u0117\7e\2\2")
        buf.write("\u0117\25\3\2\2\2\u0118\u011a\7s\2\2\u0119\u011b\5\34")
        buf.write("\17\2\u011a\u0119\3\2\2\2\u011a\u011b\3\2\2\2\u011b\u011f")
        buf.write("\3\2\2\2\u011c\u011d\5\u00a0Q\2\u011d\u011e\5x=\2\u011e")
        buf.write("\u0120\3\2\2\2\u011f\u011c\3\2\2\2\u011f\u0120\3\2\2\2")
        buf.write("\u0120\27\3\2\2\2\u0121\u0124\5\26\f\2\u0122\u0124\5b")
        buf.write("\62\2\u0123\u0121\3\2\2\2\u0123\u0122\3\2\2\2\u0124\u0125")
        buf.write("\3\2\2\2\u0125\u0126\7e\2\2\u0126\31\3\2\2\2\u0127\u0128")
        buf.write("\7i\2\2\u0128\u0129\5\60\31\2\u0129\33\3\2\2\2\u012a\u012b")
        buf.write("\7^\2\2\u012b\u012c\5x=\2\u012c\u012d\7_\2\2\u012d\35")
        buf.write("\3\2\2\2\u012e\u012f\7^\2\2\u012f\u0130\5x=\2\u0130\u0131")
        buf.write("\7g\2\2\u0131\u0132\5x=\2\u0132\u0133\7_\2\2\u0133\37")
        buf.write("\3\2\2\2\u0134\u0135\7s\2\2\u0135\u0137\7g\2\2\u0136\u0134")
        buf.write("\3\2\2\2\u0137\u013a\3\2\2\2\u0138\u0136\3\2\2\2\u0138")
        buf.write("\u0139\3\2\2\2\u0139\u013b\3\2\2\2\u013a\u0138\3\2\2\2")
        buf.write("\u013b\u013c\7s\2\2\u013c!\3\2\2\2\u013d\u013e\7\7\2\2")
        buf.write("\u013e\u0140\7s\2\2\u013f\u0141\5\34\17\2\u0140\u013f")
        buf.write("\3\2\2\2\u0140\u0141\3\2\2\2\u0141\u0148\3\2\2\2\u0142")
        buf.write("\u0144\7\b\2\2\u0143\u0145\5\34\17\2\u0144\u0143\3\2\2")
        buf.write("\2\u0144\u0145\3\2\2\2\u0145\u0146\3\2\2\2\u0146\u0148")
        buf.write("\7s\2\2\u0147\u013d\3\2\2\2\u0147\u0142\3\2\2\2\u0148")
        buf.write("#\3\2\2\2\u0149\u014a\7\7\2\2\u014a\u014c\7s\2\2\u014b")
        buf.write("\u014d\5\34\17\2\u014c\u014b\3\2\2\2\u014c\u014d\3\2\2")
        buf.write("\2\u014d\u0154\3\2\2\2\u014e\u0150\7\b\2\2\u014f\u0151")
        buf.write("\5\34\17\2\u0150\u014f\3\2\2\2\u0150\u0151\3\2\2\2\u0151")
        buf.write("\u0152\3\2\2\2\u0152\u0154\7s\2\2\u0153\u0149\3\2\2\2")
        buf.write("\u0153\u014e\3\2\2\2\u0154%\3\2\2\2\u0155\u015a\5$\23")
        buf.write("\2\u0156\u0157\7g\2\2\u0157\u0159\5$\23\2\u0158\u0156")
        buf.write("\3\2\2\2\u0159\u015c\3\2\2\2\u015a\u0158\3\2\2\2\u015a")
        buf.write("\u015b\3\2\2\2\u015b'\3\2\2\2\u015c\u015a\3\2\2\2\u015d")
        buf.write("\u015e\t\4\2\2\u015e)\3\2\2\2\u015f\u0160\t\5\2\2\u0160")
        buf.write("+\3\2\2\2\u0161\u0162\7\17\2\2\u0162-\3\2\2\2\u0163\u0166")
        buf.write("\7\20\2\2\u0164\u0166\5\u00be`\2\u0165\u0163\3\2\2\2\u0165")
        buf.write("\u0164\3\2\2\2\u0166/\3\2\2\2\u0167\u0168\5*\26\2\u0168")
        buf.write("\u0169\5\34\17\2\u0169\u0173\3\2\2\2\u016a\u016b\5,\27")
        buf.write("\2\u016b\u016c\5\36\20\2\u016c\u0173\3\2\2\2\u016d\u0173")
        buf.write("\5.\30\2\u016e\u0170\5(\25\2\u016f\u0171\5\34\17\2\u0170")
        buf.write("\u016f\3\2\2\2\u0170\u0171\3\2\2\2\u0171\u0173\3\2\2\2")
        buf.write("\u0172\u0167\3\2\2\2\u0172\u016a\3\2\2\2\u0172\u016d\3")
        buf.write("\2\2\2\u0172\u016e\3\2\2\2\u0173\61\3\2\2\2\u0174\u0175")
        buf.write("\7\21\2\2\u0175\u0177\7s\2\2\u0176\u0178\5\u009eP\2\u0177")
        buf.write("\u0176\3\2\2\2\u0177\u0178\3\2\2\2\u0178\63\3\2\2\2\u0179")
        buf.write("\u017a\5*\26\2\u017a\u017b\5\34\17\2\u017b\u017d\7s\2")
        buf.write("\2\u017c\u017e\5\u009eP\2\u017d\u017c\3\2\2\2\u017d\u017e")
        buf.write("\3\2\2\2\u017e\65\3\2\2\2\u017f\u0180\5,\27\2\u0180\u0181")
        buf.write("\5\36\20\2\u0181\u0183\7s\2\2\u0182\u0184\5\u009eP\2\u0183")
        buf.write("\u0182\3\2\2\2\u0183\u0184\3\2\2\2\u0184\67\3\2\2\2\u0185")
        buf.write("\u0186\5.\30\2\u0186\u0188\7s\2\2\u0187\u0189\5\u009e")
        buf.write("P\2\u0188\u0187\3\2\2\2\u0188\u0189\3\2\2\2\u01899\3\2")
        buf.write("\2\2\u018a\u018b\7\n\2\2\u018b\u018d\7s\2\2\u018c\u018e")
        buf.write("\5\34\17\2\u018d\u018c\3\2\2\2\u018d\u018e\3\2\2\2\u018e")
        buf.write("\u0195\3\2\2\2\u018f\u0191\7\t\2\2\u0190\u0192\5\34\17")
        buf.write("\2\u0191\u0190\3\2\2\2\u0191\u0192\3\2\2\2\u0192\u0193")
        buf.write("\3\2\2\2\u0193\u0195\7s\2\2\u0194\u018a\3\2\2\2\u0194")
        buf.write("\u018f\3\2\2\2\u0195\u0197\3\2\2\2\u0196\u0198\5\u009e")
        buf.write("P\2\u0197\u0196\3\2\2\2\u0197\u0198\3\2\2\2\u0198;\3\2")
        buf.write("\2\2\u0199\u019e\5\64\33\2\u019a\u019e\5\66\34\2\u019b")
        buf.write("\u019e\58\35\2\u019c\u019e\5:\36\2\u019d\u0199\3\2\2\2")
        buf.write("\u019d\u019a\3\2\2\2\u019d\u019b\3\2\2\2\u019d\u019c\3")
        buf.write("\2\2\2\u019e=\3\2\2\2\u019f\u01a0\5\60\31\2\u01a0\u01a1")
        buf.write("\7g\2\2\u01a1\u01a3\3\2\2\2\u01a2\u019f\3\2\2\2\u01a3")
        buf.write("\u01a6\3\2\2\2\u01a4\u01a2\3\2\2\2\u01a4\u01a5\3\2\2\2")
        buf.write("\u01a5\u01a7\3\2\2\2\u01a6\u01a4\3\2\2\2\u01a7\u01a8\5")
        buf.write("\60\31\2\u01a8?\3\2\2\2\u01a9\u01aa\5*\26\2\u01aa\u01ab")
        buf.write("\5\34\17\2\u01ab\u01b1\3\2\2\2\u01ac\u01ad\5,\27\2\u01ad")
        buf.write("\u01ae\5\36\20\2\u01ae\u01b1\3\2\2\2\u01af\u01b1\5.\30")
        buf.write("\2\u01b0\u01a9\3\2\2\2\u01b0\u01ac\3\2\2\2\u01b0\u01af")
        buf.write("\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\u01b3\7s\2\2\u01b3")
        buf.write("\u01bf\3\2\2\2\u01b4\u01b5\7\n\2\2\u01b5\u01b7\7s\2\2")
        buf.write("\u01b6\u01b8\5\34\17\2\u01b7\u01b6\3\2\2\2\u01b7\u01b8")
        buf.write("\3\2\2\2\u01b8\u01bf\3\2\2\2\u01b9\u01bb\7\t\2\2\u01ba")
        buf.write("\u01bc\5\34\17\2\u01bb\u01ba\3\2\2\2\u01bb\u01bc\3\2\2")
        buf.write("\2\u01bc\u01bd\3\2\2\2\u01bd\u01bf\7s\2\2\u01be\u01b0")
        buf.write("\3\2\2\2\u01be\u01b4\3\2\2\2\u01be\u01b9\3\2\2\2\u01bf")
        buf.write("A\3\2\2\2\u01c0\u01c5\5@!\2\u01c1\u01c2\7g\2\2\u01c2\u01c4")
        buf.write("\5@!\2\u01c3\u01c1\3\2\2\2\u01c4\u01c7\3\2\2\2\u01c5\u01c3")
        buf.write("\3\2\2\2\u01c5\u01c6\3\2\2\2\u01c6C\3\2\2\2\u01c7\u01c5")
        buf.write("\3\2\2\2\u01c8\u01c9\7\22\2\2\u01c9\u01ca\7s\2\2\u01ca")
        buf.write("\u01cb\7h\2\2\u01cb\u01cc\5F$\2\u01cc\u01cd\7e\2\2\u01cd")
        buf.write("E\3\2\2\2\u01ce\u01cf\b$\1\2\u01cf\u01d0\7s\2\2\u01d0")
        buf.write("\u01d9\5J&\2\u01d1\u01d6\7s\2\2\u01d2\u01d3\7^\2\2\u01d3")
        buf.write("\u01d4\5\u009cO\2\u01d4\u01d5\7_\2\2\u01d5\u01d7\3\2\2")
        buf.write("\2\u01d6\u01d2\3\2\2\2\u01d6\u01d7\3\2\2\2\u01d7\u01d9")
        buf.write("\3\2\2\2\u01d8\u01ce\3\2\2\2\u01d8\u01d1\3\2\2\2\u01d9")
        buf.write("\u01df\3\2\2\2\u01da\u01db\f\3\2\2\u01db\u01dc\7\23\2")
        buf.write("\2\u01dc\u01de\5F$\4\u01dd\u01da\3\2\2\2\u01de\u01e1\3")
        buf.write("\2\2\2\u01df\u01dd\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0G")
        buf.write("\3\2\2\2\u01e1\u01df\3\2\2\2\u01e2\u01e7\5F$\2\u01e3\u01e4")
        buf.write("\7g\2\2\u01e4\u01e6\5F$\2\u01e5\u01e3\3\2\2\2\u01e6\u01e9")
        buf.write("\3\2\2\2\u01e7\u01e5\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8")
        buf.write("I\3\2\2\2\u01e9\u01e7\3\2\2\2\u01ea\u01ec\7^\2\2\u01eb")
        buf.write("\u01ed\5x=\2\u01ec\u01eb\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed")
        buf.write("\u01ee\3\2\2\2\u01ee\u01f0\7d\2\2\u01ef\u01f1\5x=\2\u01f0")
        buf.write("\u01ef\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f4\3\2\2\2")
        buf.write("\u01f2\u01f3\7d\2\2\u01f3\u01f5\5x=\2\u01f4\u01f2\3\2")
        buf.write("\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6\u01f7")
        buf.write("\7_\2\2\u01f7K\3\2\2\2\u01f8\u01f9\7\24\2\2\u01f9\u01fa")
        buf.write("\5N(\2\u01fa\u01fb\5R*\2\u01fbM\3\2\2\2\u01fc\u0202\5")
        buf.write("P)\2\u01fd\u01ff\7b\2\2\u01fe\u0200\5 \21\2\u01ff\u01fe")
        buf.write("\3\2\2\2\u01ff\u0200\3\2\2\2\u0200\u0201\3\2\2\2\u0201")
        buf.write("\u0203\7c\2\2\u0202\u01fd\3\2\2\2\u0202\u0203\3\2\2\2")
        buf.write("\u0203\u0204\3\2\2\2\u0204\u0205\5 \21\2\u0205O\3\2\2")
        buf.write("\2\u0206\u0207\t\6\2\2\u0207Q\3\2\2\2\u0208\u020d\7`\2")
        buf.write("\2\u0209\u020c\5X-\2\u020a\u020c\5T+\2\u020b\u0209\3\2")
        buf.write("\2\2\u020b\u020a\3\2\2\2\u020c\u020f\3\2\2\2\u020d\u020b")
        buf.write("\3\2\2\2\u020d\u020e\3\2\2\2\u020e\u0210\3\2\2\2\u020f")
        buf.write("\u020d\3\2\2\2\u0210\u0211\7a\2\2\u0211S\3\2\2\2\u0212")
        buf.write("\u0213\5\u00a8U\2\u0213\u0214\5V,\2\u0214U\3\2\2\2\u0215")
        buf.write("\u021f\5X-\2\u0216\u021a\7`\2\2\u0217\u0219\5X-\2\u0218")
        buf.write("\u0217\3\2\2\2\u0219\u021c\3\2\2\2\u021a\u0218\3\2\2\2")
        buf.write("\u021a\u021b\3\2\2\2\u021b\u021d\3\2\2\2\u021c\u021a\3")
        buf.write("\2\2\2\u021d\u021f\7a\2\2\u021e\u0215\3\2\2\2\u021e\u0216")
        buf.write("\3\2\2\2\u021fW\3\2\2\2\u0220\u0221\5Z.\2\u0221\u0222")
        buf.write("\7e\2\2\u0222\u0225\3\2\2\2\u0223\u0225\5\u00c8e\2\u0224")
        buf.write("\u0220\3\2\2\2\u0224\u0223\3\2\2\2\u0225Y\3\2\2\2\u0226")
        buf.write("\u022c\5l\67\2\u0227\u022c\5\\/\2\u0228\u022c\5`\61\2")
        buf.write("\u0229\u022c\5^\60\2\u022a\u022c\5d\63\2\u022b\u0226\3")
        buf.write("\2\2\2\u022b\u0227\3\2\2\2\u022b\u0228\3\2\2\2\u022b\u0229")
        buf.write("\3\2\2\2\u022b\u022a\3\2\2\2\u022c[\3\2\2\2\u022d\u022f")
        buf.write("\5f\64\2\u022e\u022d\3\2\2\2\u022f\u0232\3\2\2\2\u0230")
        buf.write("\u022e\3\2\2\2\u0230\u0231\3\2\2\2\u0231\u0233\3\2\2\2")
        buf.write("\u0232\u0230\3\2\2\2\u0233\u0234\7\27\2\2\u0234\u0235")
        buf.write("\7b\2\2\u0235\u0236\5x=\2\u0236\u0238\7c\2\2\u0237\u0239")
        buf.write("\5H%\2\u0238\u0237\3\2\2\2\u0238\u0239\3\2\2\2\u0239]")
        buf.write("\3\2\2\2\u023a\u023b\7\30\2\2\u023b\u023c\5H%\2\u023c")
        buf.write("_\3\2\2\2\u023d\u023e\7\31\2\2\u023e\u023f\5H%\2\u023f")
        buf.write("a\3\2\2\2\u0240\u0243\5`\61\2\u0241\u0242\7i\2\2\u0242")
        buf.write("\u0244\5H%\2\u0243\u0241\3\2\2\2\u0243\u0244\3\2\2\2\u0244")
        buf.write("\u024a\3\2\2\2\u0245\u0246\5H%\2\u0246\u0247\7h\2\2\u0247")
        buf.write("\u0248\5`\61\2\u0248\u024a\3\2\2\2\u0249\u0240\3\2\2\2")
        buf.write("\u0249\u0245\3\2\2\2\u024ac\3\2\2\2\u024b\u024d\7\32\2")
        buf.write("\2\u024c\u024e\5H%\2\u024d\u024c\3\2\2\2\u024d\u024e\3")
        buf.write("\2\2\2\u024ee\3\2\2\2\u024f\u0253\7\33\2\2\u0250\u0253")
        buf.write("\5h\65\2\u0251\u0253\5j\66\2\u0252\u024f\3\2\2\2\u0252")
        buf.write("\u0250\3\2\2\2\u0252\u0251\3\2\2\2\u0253\u0254\3\2\2\2")
        buf.write("\u0254\u0255\7\34\2\2\u0255g\3\2\2\2\u0256\u0257\7\35")
        buf.write("\2\2\u0257\u0258\7b\2\2\u0258\u0259\5x=\2\u0259\u025a")
        buf.write("\7c\2\2\u025ai\3\2\2\2\u025b\u0260\t\7\2\2\u025c\u025d")
        buf.write("\7b\2\2\u025d\u025e\5x=\2\u025e\u025f\7c\2\2\u025f\u0261")
        buf.write("\3\2\2\2\u0260\u025c\3\2\2\2\u0260\u0261\3\2\2\2\u0261")
        buf.write("k\3\2\2\2\u0262\u0264\5f\64\2\u0263\u0262\3\2\2\2\u0264")
        buf.write("\u0267\3\2\2\2\u0265\u0263\3\2\2\2\u0265\u0266\3\2\2\2")
        buf.write("\u0266\u0268\3\2\2\2\u0267\u0265\3\2\2\2\u0268\u026d\5")
        buf.write("P)\2\u0269\u026a\7b\2\2\u026a\u026b\5\u009cO\2\u026b\u026c")
        buf.write("\7c\2\2\u026c\u026e\3\2\2\2\u026d\u0269\3\2\2\2\u026d")
        buf.write("\u026e\3\2\2\2\u026e\u026f\3\2\2\2\u026f\u0270\5H%\2\u0270")
        buf.write("m\3\2\2\2\u0271\u0272\t\b\2\2\u0272o\3\2\2\2\u0273\u0274")
        buf.write("\t\t\2\2\u0274q\3\2\2\2\u0275\u0276\t\n\2\2\u0276s\3\2")
        buf.write("\2\2\u0277\u0278\t\13\2\2\u0278u\3\2\2\2\u0279\u027a\5")
        buf.write("x=\2\u027a\u027b\7e\2\2\u027bw\3\2\2\2\u027c\u027d\b=")
        buf.write("\1\2\u027d\u0281\5\u0090I\2\u027e\u0281\5\u008cG\2\u027f")
        buf.write("\u0281\5z>\2\u0280\u027c\3\2\2\2\u0280\u027e\3\2\2\2\u0280")
        buf.write("\u027f\3\2\2\2\u0281\u0287\3\2\2\2\u0282\u0283\f\3\2\2")
        buf.write("\u0283\u0284\7\23\2\2\u0284\u0286\5z>\2\u0285\u0282\3")
        buf.write("\2\2\2\u0286\u0289\3\2\2\2\u0287\u0285\3\2\2\2\u0287\u0288")
        buf.write("\3\2\2\2\u0288y\3\2\2\2\u0289\u0287\3\2\2\2\u028a\u028b")
        buf.write("\b>\1\2\u028b\u028c\5|?\2\u028c\u0292\3\2\2\2\u028d\u028e")
        buf.write("\f\3\2\2\u028e\u028f\7(\2\2\u028f\u0291\5|?\2\u0290\u028d")
        buf.write("\3\2\2\2\u0291\u0294\3\2\2\2\u0292\u0290\3\2\2\2\u0292")
        buf.write("\u0293\3\2\2\2\u0293{\3\2\2\2\u0294\u0292\3\2\2\2\u0295")
        buf.write("\u0296\b?\1\2\u0296\u0297\5~@\2\u0297\u029d\3\2\2\2\u0298")
        buf.write("\u0299\f\3\2\2\u0299\u029a\7)\2\2\u029a\u029c\5~@\2\u029b")
        buf.write("\u0298\3\2\2\2\u029c\u029f\3\2\2\2\u029d\u029b\3\2\2\2")
        buf.write("\u029d\u029e\3\2\2\2\u029e}\3\2\2\2\u029f\u029d\3\2\2")
        buf.write("\2\u02a0\u02a1\b@\1\2\u02a1\u02a2\5\u0080A\2\u02a2\u02a8")
        buf.write("\3\2\2\2\u02a3\u02a4\f\3\2\2\u02a4\u02a5\7*\2\2\u02a5")
        buf.write("\u02a7\5\u0080A\2\u02a6\u02a3\3\2\2\2\u02a7\u02aa\3\2")
        buf.write("\2\2\u02a8\u02a6\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9\177")
        buf.write("\3\2\2\2\u02aa\u02a8\3\2\2\2\u02ab\u02ac\bA\1\2\u02ac")
        buf.write("\u02ad\5\u0082B\2\u02ad\u02b3\3\2\2\2\u02ae\u02af\f\3")
        buf.write("\2\2\u02af\u02b0\7+\2\2\u02b0\u02b2\5\u0082B\2\u02b1\u02ae")
        buf.write("\3\2\2\2\u02b2\u02b5\3\2\2\2\u02b3\u02b1\3\2\2\2\u02b3")
        buf.write("\u02b4\3\2\2\2\u02b4\u0081\3\2\2\2\u02b5\u02b3\3\2\2\2")
        buf.write("\u02b6\u02b7\bB\1\2\u02b7\u02b8\5\u0084C\2\u02b8\u02bf")
        buf.write("\3\2\2\2\u02b9\u02ba\f\3\2\2\u02ba\u02bb\5r:\2\u02bb\u02bc")
        buf.write("\5\u0084C\2\u02bc\u02be\3\2\2\2\u02bd\u02b9\3\2\2\2\u02be")
        buf.write("\u02c1\3\2\2\2\u02bf\u02bd\3\2\2\2\u02bf\u02c0\3\2\2\2")
        buf.write("\u02c0\u0083\3\2\2\2\u02c1\u02bf\3\2\2\2\u02c2\u02c3\b")
        buf.write("C\1\2\u02c3\u02c4\5\u0086D\2\u02c4\u02cb\3\2\2\2\u02c5")
        buf.write("\u02c6\f\3\2\2\u02c6\u02c7\5p9\2\u02c7\u02c8\5\u0086D")
        buf.write("\2\u02c8\u02ca\3\2\2\2\u02c9\u02c5\3\2\2\2\u02ca\u02cd")
        buf.write("\3\2\2\2\u02cb\u02c9\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc")
        buf.write("\u0085\3\2\2\2\u02cd\u02cb\3\2\2\2\u02ce\u02cf\bD\1\2")
        buf.write("\u02cf\u02d0\5\u0088E\2\u02d0\u02d6\3\2\2\2\u02d1\u02d2")
        buf.write("\f\3\2\2\u02d2\u02d3\t\f\2\2\u02d3\u02d5\5\u0088E\2\u02d4")
        buf.write("\u02d1\3\2\2\2\u02d5\u02d8\3\2\2\2\u02d6\u02d4\3\2\2\2")
        buf.write("\u02d6\u02d7\3\2\2\2\u02d7\u0087\3\2\2\2\u02d8\u02d6\3")
        buf.write("\2\2\2\u02d9\u02da\bE\1\2\u02da\u02db\5\u008aF\2\u02db")
        buf.write("\u02e1\3\2\2\2\u02dc\u02dd\f\3\2\2\u02dd\u02de\t\r\2\2")
        buf.write("\u02de\u02e0\5\u008aF\2\u02df\u02dc\3\2\2\2\u02e0\u02e3")
        buf.write("\3\2\2\2\u02e1\u02df\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2")
        buf.write("\u0089\3\2\2\2\u02e3\u02e1\3\2\2\2\u02e4\u02e5\bF\1\2")
        buf.write("\u02e5\u02e8\5\u008eH\2\u02e6\u02e8\5\u008cG\2\u02e7\u02e4")
        buf.write("\3\2\2\2\u02e7\u02e6\3\2\2\2\u02e8\u02f1\3\2\2\2\u02e9")
        buf.write("\u02ea\f\3\2\2\u02ea\u02ed\t\16\2\2\u02eb\u02ee\5\u008e")
        buf.write("H\2\u02ec\u02ee\5\u008cG\2\u02ed\u02eb\3\2\2\2\u02ed\u02ec")
        buf.write("\3\2\2\2\u02ee\u02f0\3\2\2\2\u02ef\u02e9\3\2\2\2\u02f0")
        buf.write("\u02f3\3\2\2\2\u02f1\u02ef\3\2\2\2\u02f1\u02f2\3\2\2\2")
        buf.write("\u02f2\u008b\3\2\2\2\u02f3\u02f1\3\2\2\2\u02f4\u02f5\5")
        buf.write("n8\2\u02f5\u02f6\5\u008eH\2\u02f6\u008d\3\2\2\2\u02f7")
        buf.write("\u02fd\5\u0090I\2\u02f8\u02f9\5\u0090I\2\u02f9\u02fa\7")
        buf.write(".\2\2\u02fa\u02fb\5\u008eH\2\u02fb\u02fd\3\2\2\2\u02fc")
        buf.write("\u02f7\3\2\2\2\u02fc\u02f8\3\2\2\2\u02fd\u008f\3\2\2\2")
        buf.write("\u02fe\u02ff\bI\1\2\u02ff\u030e\7o\2\2\u0300\u030e\7r")
        buf.write("\2\2\u0301\u030e\7t\2\2\u0302\u030e\5\u0092J\2\u0303\u030e")
        buf.write("\7s\2\2\u0304\u030e\7v\2\2\u0305\u030e\5\u0096L\2\u0306")
        buf.write("\u030e\5\u00b4[\2\u0307\u030e\5\u00ba^\2\u0308\u030e\5")
        buf.write("\u00c2b\2\u0309\u030a\7b\2\2\u030a\u030b\5x=\2\u030b\u030c")
        buf.write("\7c\2\2\u030c\u030e\3\2\2\2\u030d\u02fe\3\2\2\2\u030d")
        buf.write("\u0300\3\2\2\2\u030d\u0301\3\2\2\2\u030d\u0302\3\2\2\2")
        buf.write("\u030d\u0303\3\2\2\2\u030d\u0304\3\2\2\2\u030d\u0305\3")
        buf.write("\2\2\2\u030d\u0306\3\2\2\2\u030d\u0307\3\2\2\2\u030d\u0308")
        buf.write("\3\2\2\2\u030d\u0309\3\2\2\2\u030e\u0318\3\2\2\2\u030f")
        buf.write("\u0310\f\4\2\2\u0310\u0311\7^\2\2\u0311\u0312\5x=\2\u0312")
        buf.write("\u0313\7_\2\2\u0313\u0317\3\2\2\2\u0314\u0315\f\3\2\2")
        buf.write("\u0315\u0317\5\u0094K\2\u0316\u030f\3\2\2\2\u0316\u0314")
        buf.write("\3\2\2\2\u0317\u031a\3\2\2\2\u0318\u0316\3\2\2\2\u0318")
        buf.write("\u0319\3\2\2\2\u0319\u0091\3\2\2\2\u031a\u0318\3\2\2\2")
        buf.write("\u031b\u031c\t\17\2\2\u031c\u0093\3\2\2\2\u031d\u031e")
        buf.write("\t\20\2\2\u031e\u0095\3\2\2\2\u031f\u0322\5\u0098M\2\u0320")
        buf.write("\u0322\5\u009aN\2\u0321\u031f\3\2\2\2\u0321\u0320\3\2")
        buf.write("\2\2\u0322\u0323\3\2\2\2\u0323\u0324\7b\2\2\u0324\u0325")
        buf.write("\5\u009cO\2\u0325\u0326\7c\2\2\u0326\u0097\3\2\2\2\u0327")
        buf.write("\u0328\t\21\2\2\u0328\u0099\3\2\2\2\u0329\u032a\5\60\31")
        buf.write("\2\u032a\u009b\3\2\2\2\u032b\u0330\5x=\2\u032c\u032d\7")
        buf.write("g\2\2\u032d\u032f\5x=\2\u032e\u032c\3\2\2\2\u032f\u0332")
        buf.write("\3\2\2\2\u0330\u032e\3\2\2\2\u0330\u0331\3\2\2\2\u0331")
        buf.write("\u009d\3\2\2\2\u0332\u0330\3\2\2\2\u0333\u0334\7h\2\2")
        buf.write("\u0334\u0335\5x=\2\u0335\u009f\3\2\2\2\u0336\u0337\t\22")
        buf.write("\2\2\u0337\u00a1\3\2\2\2\u0338\u0339\7`\2\2\u0339\u033a")
        buf.write("\5\u009cO\2\u033a\u033b\7a\2\2\u033b\u033f\3\2\2\2\u033c")
        buf.write("\u033f\5J&\2\u033d\u033f\7s\2\2\u033e\u0338\3\2\2\2\u033e")
        buf.write("\u033c\3\2\2\2\u033e\u033d\3\2\2\2\u033f\u00a3\3\2\2\2")
        buf.write("\u0340\u034c\5\20\t\2\u0341\u034c\5\u00b0Y\2\u0342\u0347")
        buf.write("\7`\2\2\u0343\u0346\5\20\t\2\u0344\u0346\5\u00b0Y\2\u0345")
        buf.write("\u0343\3\2\2\2\u0345\u0344\3\2\2\2\u0346\u0349\3\2\2\2")
        buf.write("\u0347\u0345\3\2\2\2\u0347\u0348\3\2\2\2\u0348\u034a\3")
        buf.write("\2\2\2\u0349\u0347\3\2\2\2\u034a\u034c\7a\2\2\u034b\u0340")
        buf.write("\3\2\2\2\u034b\u0341\3\2\2\2\u034b\u0342\3\2\2\2\u034c")
        buf.write("\u00a5\3\2\2\2\u034d\u034e\7H\2\2\u034e\u034f\7b\2\2\u034f")
        buf.write("\u0350\5x=\2\u0350\u0351\7c\2\2\u0351\u0354\5\u00a4S\2")
        buf.write("\u0352\u0353\7I\2\2\u0353\u0355\5\u00a4S\2\u0354\u0352")
        buf.write("\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u00a7\3\2\2\2\u0356")
        buf.write("\u0357\7J\2\2\u0357\u0358\7s\2\2\u0358\u0359\7K\2\2\u0359")
        buf.write("\u0360\5\u00a2R\2\u035a\u035b\7L\2\2\u035b\u035c\7b\2")
        buf.write("\2\u035c\u035d\5x=\2\u035d\u035e\7c\2\2\u035e\u0360\3")
        buf.write("\2\2\2\u035f\u0356\3\2\2\2\u035f\u035a\3\2\2\2\u0360\u00a9")
        buf.write("\3\2\2\2\u0361\u0362\5\u00a8U\2\u0362\u0363\5\u00a4S\2")
        buf.write("\u0363\u00ab\3\2\2\2\u0364\u0365\7M\2\2\u0365\u0366\7")
        buf.write("e\2\2\u0366\u00ad\3\2\2\2\u0367\u036a\7N\2\2\u0368\u036b")
        buf.write("\5x=\2\u0369\u036b\5`\61\2\u036a\u0368\3\2\2\2\u036a\u0369")
        buf.write("\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u036c\3\2\2\2\u036c")
        buf.write("\u036d\7e\2\2\u036d\u00af\3\2\2\2\u036e\u036f\t\23\2\2")
        buf.write("\u036f\u0373\7e\2\2\u0370\u0373\5\u00acW\2\u0371\u0373")
        buf.write("\5\u00aeX\2\u0372\u036e\3\2\2\2\u0372\u0370\3\2\2\2\u0372")
        buf.write("\u0371\3\2\2\2\u0373\u00b1\3\2\2\2\u0374\u0375\7Q\2\2")
        buf.write("\u0375\u037b\7s\2\2\u0376\u0378\7b\2\2\u0377\u0379\5>")
        buf.write(" \2\u0378\u0377\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u037a")
        buf.write("\3\2\2\2\u037a\u037c\7c\2\2\u037b\u0376\3\2\2\2\u037b")
        buf.write("\u037c\3\2\2\2\u037c\u037e\3\2\2\2\u037d\u037f\5\32\16")
        buf.write("\2\u037e\u037d\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0380")
        buf.write("\3\2\2\2\u0380\u0381\7e\2\2\u0381\u00b3\3\2\2\2\u0382")
        buf.write("\u0383\7s\2\2\u0383\u0385\7b\2\2\u0384\u0386\5\u009cO")
        buf.write("\2\u0385\u0384\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0387")
        buf.write("\3\2\2\2\u0387\u0388\7c\2\2\u0388\u00b5\3\2\2\2\u0389")
        buf.write("\u038a\7R\2\2\u038a\u0390\7s\2\2\u038b\u038d\7b\2\2\u038c")
        buf.write('\u038e\5B"\2\u038d\u038c\3\2\2\2\u038d\u038e\3\2\2\2')
        buf.write("\u038e\u038f\3\2\2\2\u038f\u0391\7c\2\2\u0390\u038b\3")
        buf.write("\2\2\2\u0390\u0391\3\2\2\2\u0391\u0393\3\2\2\2\u0392\u0394")
        buf.write("\5&\24\2\u0393\u0392\3\2\2\2\u0393\u0394\3\2\2\2\u0394")
        buf.write("\u0396\3\2\2\2\u0395\u0397\5\32\16\2\u0396\u0395\3\2\2")
        buf.write("\2\u0396\u0397\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u0399")
        buf.write("\5\u00b8]\2\u0399\u00b7\3\2\2\2\u039a\u039e\7`\2\2\u039b")
        buf.write("\u039d\5\20\t\2\u039c\u039b\3\2\2\2\u039d\u03a0\3\2\2")
        buf.write("\2\u039e\u039c\3\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a2")
        buf.write("\3\2\2\2\u03a0\u039e\3\2\2\2\u03a1\u03a3\5\u00aeX\2\u03a2")
        buf.write("\u03a1\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a4\3\2\2\2")
        buf.write("\u03a4\u03a5\7a\2\2\u03a5\u00b9\3\2\2\2\u03a6\u03ac\7")
        buf.write("s\2\2\u03a7\u03a9\7b\2\2\u03a8\u03aa\5\u009cO\2\u03a9")
        buf.write("\u03a8\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa\u03ab\3\2\2\2")
        buf.write("\u03ab\u03ad\7c\2\2\u03ac\u03a7\3\2\2\2\u03ac\u03ad\3")
        buf.write("\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03af\5H%\2\u03af\u00bb")
        buf.write("\3\2\2\2\u03b0\u03b1\7S\2\2\u03b1\u03b5\7`\2\2\u03b2\u03b4")
        buf.write("\5\20\t\2\u03b3\u03b2\3\2\2\2\u03b4\u03b7\3\2\2\2\u03b5")
        buf.write("\u03b3\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03b8\3\2\2\2")
        buf.write("\u03b7\u03b5\3\2\2\2\u03b8\u03b9\7a\2\2\u03b9\u00bd\3")
        buf.write("\2\2\2\u03ba\u03bb\t\24\2\2\u03bb\u00bf\3\2\2\2\u03bc")
        buf.write("\u03be\7V\2\2\u03bd\u03bf\5\34\17\2\u03be\u03bd\3\2\2")
        buf.write("\2\u03be\u03bf\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0\u03c1")
        buf.write("\5R*\2\u03c1\u00c1\3\2\2\2\u03c2\u03cb\7u\2\2\u03c3\u03c4")
        buf.write("\7W\2\2\u03c4\u03c7\7b\2\2\u03c5\u03c8\7s\2\2\u03c6\u03c8")
        buf.write("\5R*\2\u03c7\u03c5\3\2\2\2\u03c7\u03c6\3\2\2\2\u03c8\u03c9")
        buf.write("\3\2\2\2\u03c9\u03cb\7c\2\2\u03ca\u03c2\3\2\2\2\u03ca")
        buf.write("\u03c3\3\2\2\2\u03cb\u00c3\3\2\2\2\u03cc\u03cd\t\25\2")
        buf.write("\2\u03cd\u00c5\3\2\2\2\u03ce\u03d4\5\u00c4c\2\u03cf\u03d1")
        buf.write("\7b\2\2\u03d0\u03d2\5\u009cO\2\u03d1\u03d0\3\2\2\2\u03d1")
        buf.write("\u03d2\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d5\7c\2\2")
        buf.write("\u03d4\u03cf\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d6\3")
        buf.write("\2\2\2\u03d6\u03d7\5\34\17\2\u03d7\u03d8\5H%\2\u03d8\u00c7")
        buf.write("\3\2\2\2\u03d9\u03da\5\u00c6d\2\u03da\u03db\7e\2\2\u03db")
        buf.write("\u03de\3\2\2\2\u03dc\u03de\5\u00c0a\2\u03dd\u03d9\3\2")
        buf.write("\2\2\u03dd\u03dc\3\2\2\2\u03de\u00c9\3\2\2\2\u03df\u03e2")
        buf.write("\5\u00ccg\2\u03e0\u03e2\5\u00ceh\2\u03e1\u03df\3\2\2\2")
        buf.write("\u03e1\u03e0\3\2\2\2\u03e2\u00cb\3\2\2\2\u03e3\u03e4\7")
        buf.write("Z\2\2\u03e4\u03e5\5\u00d0i\2\u03e5\u03e6\7e\2\2\u03e6")
        buf.write("\u00cd\3\2\2\2\u03e7\u03e8\7[\2\2\u03e8\u03ee\7s\2\2\u03e9")
        buf.write("\u03eb\7b\2\2\u03ea\u03ec\5\u00d2j\2\u03eb\u03ea\3\2\2")
        buf.write("\2\u03eb\u03ec\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed\u03ef")
        buf.write("\7c\2\2\u03ee\u03e9\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef")
        buf.write("\u03f0\3\2\2\2\u03f0\u03f2\5 \21\2\u03f1\u03f3\5\32\16")
        buf.write("\2\u03f2\u03f1\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03f4")
        buf.write("\3\2\2\2\u03f4\u03f8\7`\2\2\u03f5\u03f7\13\2\2\2\u03f6")
        buf.write("\u03f5\3\2\2\2\u03f7\u03fa\3\2\2\2\u03f8\u03f9\3\2\2\2")
        buf.write("\u03f8\u03f6\3\2\2\2\u03f9\u03fb\3\2\2\2\u03fa\u03f8\3")
        buf.write("\2\2\2\u03fb\u03fc\7a\2\2\u03fc\u00cf\3\2\2\2\u03fd\u03fe")
        buf.write('\t\26\2\2\u03fe\u00d1\3\2\2\2\u03ff\u0402\5B"\2\u0400')
        buf.write("\u0402\5\u009cO\2\u0401\u03ff\3\2\2\2\u0401\u0400\3\2")
        buf.write("\2\2\u0402\u00d3\3\2\2\2\u0403\u0407\7]\2\2\u0404\u0406")
        buf.write("\13\2\2\2\u0405\u0404\3\2\2\2\u0406\u0409\3\2\2\2\u0407")
        buf.write("\u0408\3\2\2\2\u0407\u0405\3\2\2\2\u0408\u040a\3\2\2\2")
        buf.write("\u0409\u0407\3\2\2\2\u040a\u040b\7e\2\2\u040b\u00d5\3")
        buf.write("\2\2\2t\u00da\u00dc\u00e0\u00e5\u00eb\u0103\u010d\u0114")
        buf.write("\u011a\u011f\u0123\u0138\u0140\u0144\u0147\u014c\u0150")
        buf.write("\u0153\u015a\u0165\u0170\u0172\u0177\u017d\u0183\u0188")
        buf.write("\u018d\u0191\u0194\u0197\u019d\u01a4\u01b0\u01b7\u01bb")
        buf.write("\u01be\u01c5\u01d6\u01d8\u01df\u01e7\u01ec\u01f0\u01f4")
        buf.write("\u01ff\u0202\u020b\u020d\u021a\u021e\u0224\u022b\u0230")
        buf.write("\u0238\u0243\u0249\u024d\u0252\u0260\u0265\u026d\u0280")
        buf.write("\u0287\u0292\u029d\u02a8\u02b3\u02bf\u02cb\u02d6\u02e1")
        buf.write("\u02e7\u02ed\u02f1\u02fc\u030d\u0316\u0318\u0321\u0330")
        buf.write("\u033e\u0345\u0347\u034b\u0354\u035f\u036a\u0372\u0378")
        buf.write("\u037b\u037e\u0385\u038d\u0390\u0393\u0396\u039e\u03a2")
        buf.write("\u03a9\u03ac\u03b5\u03be\u03c7\u03ca\u03d1\u03d4\u03dd")
        buf.write("\u03e1\u03eb\u03ee\u03f2\u03f8\u0401\u0407")
        return buf.getvalue()


class qasm2Parser(Parser):

    grammarFileName = "qasm2.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "'OPENQASM'",
        "'include'",
        "'input'",
        "'output'",
        "'qreg'",
        "'qubit'",
        "'bit'",
        "'creg'",
        "'int'",
        "'uint'",
        "'float'",
        "'angle'",
        "'fixed'",
        "'bool'",
        "'const'",
        "'let'",
        "'||'",
        "'gate'",
        "'U'",
        "'CX'",
        "'gphase'",
        "'reset'",
        "'measure'",
        "'barrier'",
        "'inv'",
        "'@'",
        "'pow'",
        "'ctrl'",
        "'negctrl'",
        "'~'",
        "'!'",
        "'>'",
        "'<'",
        "'>='",
        "'<='",
        "'=='",
        "'!='",
        "'&&'",
        "'|'",
        "'^'",
        "'&'",
        "'<<'",
        "'>>'",
        "'**'",
        "'true'",
        "'false'",
        "'++'",
        "'--'",
        "'sin'",
        "'cos'",
        "'tan'",
        "'exp'",
        "'ln'",
        "'sqrt'",
        "'rotl'",
        "'rotr'",
        "'popcount'",
        "'+='",
        "'-='",
        "'*='",
        "'/='",
        "'&='",
        "'|='",
        "'~='",
        "'^='",
        "'<<='",
        "'>>='",
        "'%='",
        "'**='",
        "'if'",
        "'else'",
        "'for'",
        "'in'",
        "'while'",
        "'end'",
        "'return'",
        "'break'",
        "'continue'",
        "'extern'",
        "'def'",
        "'#pragma'",
        "'duration'",
        "'stretch'",
        "'box'",
        "'durationof'",
        "'delay'",
        "'rotary'",
        "'defcalgrammar'",
        "'defcal'",
        "'\"openpulse\"'",
        "'/@'",
        "'['",
        "']'",
        "'{'",
        "'}'",
        "'('",
        "')'",
        "':'",
        "';'",
        "'.'",
        "','",
        "'='",
        "'->'",
        "'+'",
        "'-'",
        "'*'",
        "'/'",
        "'%'",
    ]

    symbolicNames = [
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "LBRACKET",
        "RBRACKET",
        "LBRACE",
        "RBRACE",
        "LPAREN",
        "RPAREN",
        "COLON",
        "SEMICOLON",
        "DOT",
        "COMMA",
        "EQUALS",
        "ARROW",
        "PLUS",
        "MINUS",
        "MUL",
        "DIV",
        "MOD",
        "Constant",
        "Whitespace",
        "Newline",
        "Integer",
        "Identifier",
        "RealNumber",
        "TimingLiteral",
        "StringLiteral",
        "LineComment",
        "BlockComment",
    ]

    RULE_program = 0
    RULE_header = 1
    RULE_version = 2
    RULE_include = 3
    RULE_ioIdentifier = 4
    RULE_io = 5
    RULE_globalStatement = 6
    RULE_statement = 7
    RULE_quantumDeclarationStatement = 8
    RULE_classicalDeclarationStatement = 9
    RULE_classicalAssignment = 10
    RULE_assignmentStatement = 11
    RULE_returnSignature = 12
    RULE_designator = 13
    RULE_doubleDesignator = 14
    RULE_identifierList = 15
    RULE_quantumDeclaration = 16
    RULE_quantumArgument = 17
    RULE_quantumArgumentList = 18
    RULE_bitType = 19
    RULE_singleDesignatorType = 20
    RULE_doubleDesignatorType = 21
    RULE_noDesignatorType = 22
    RULE_classicalType = 23
    RULE_constantDeclaration = 24
    RULE_singleDesignatorDeclaration = 25
    RULE_doubleDesignatorDeclaration = 26
    RULE_noDesignatorDeclaration = 27
    RULE_bitDeclaration = 28
    RULE_classicalDeclaration = 29
    RULE_classicalTypeList = 30
    RULE_classicalArgument = 31
    RULE_classicalArgumentList = 32
    RULE_aliasStatement = 33
    RULE_indexIdentifier = 34
    RULE_indexIdentifierList = 35
    RULE_rangeDefinition = 36
    RULE_quantumGateDefinition = 37
    RULE_quantumGateSignature = 38
    RULE_quantumGateName = 39
    RULE_quantumBlock = 40
    RULE_quantumLoop = 41
    RULE_quantumLoopBlock = 42
    RULE_quantumStatement = 43
    RULE_quantumInstruction = 44
    RULE_quantumPhase = 45
    RULE_quantumReset = 46
    RULE_quantumMeasurement = 47
    RULE_quantumMeasurementAssignment = 48
    RULE_quantumBarrier = 49
    RULE_quantumGateModifier = 50
    RULE_powModifier = 51
    RULE_ctrlModifier = 52
    RULE_quantumGateCall = 53
    RULE_unaryOperator = 54
    RULE_comparisonOperator = 55
    RULE_equalityOperator = 56
    RULE_logicalOperator = 57
    RULE_expressionStatement = 58
    RULE_expression = 59
    RULE_logicalAndExpression = 60
    RULE_bitOrExpression = 61
    RULE_xOrExpression = 62
    RULE_bitAndExpression = 63
    RULE_equalityExpression = 64
    RULE_comparisonExpression = 65
    RULE_bitShiftExpression = 66
    RULE_additiveExpression = 67
    RULE_multiplicativeExpression = 68
    RULE_unaryExpression = 69
    RULE_powerExpression = 70
    RULE_expressionTerminator = 71
    RULE_booleanLiteral = 72
    RULE_incrementor = 73
    RULE_builtInCall = 74
    RULE_builtInMath = 75
    RULE_castOperator = 76
    RULE_expressionList = 77
    RULE_equalsExpression = 78
    RULE_assignmentOperator = 79
    RULE_setDeclaration = 80
    RULE_programBlock = 81
    RULE_branchingStatement = 82
    RULE_loopSignature = 83
    RULE_loopStatement = 84
    RULE_endStatement = 85
    RULE_returnStatement = 86
    RULE_controlDirective = 87
    RULE_externDeclaration = 88
    RULE_externCall = 89
    RULE_subroutineDefinition = 90
    RULE_subroutineBlock = 91
    RULE_subroutineCall = 92
    RULE_pragma = 93
    RULE_timingType = 94
    RULE_timingBox = 95
    RULE_timingIdentifier = 96
    RULE_timingInstructionName = 97
    RULE_timingInstruction = 98
    RULE_timingStatement = 99
    RULE_calibration = 100
    RULE_calibrationGrammarDeclaration = 101
    RULE_calibrationDefinition = 102
    RULE_calibrationGrammar = 103
    RULE_calibrationArgumentList = 104
    RULE_metaComment = 105

    ruleNames = [
        "program",
        "header",
        "version",
        "include",
        "ioIdentifier",
        "io",
        "globalStatement",
        "statement",
        "quantumDeclarationStatement",
        "classicalDeclarationStatement",
        "classicalAssignment",
        "assignmentStatement",
        "returnSignature",
        "designator",
        "doubleDesignator",
        "identifierList",
        "quantumDeclaration",
        "quantumArgument",
        "quantumArgumentList",
        "bitType",
        "singleDesignatorType",
        "doubleDesignatorType",
        "noDesignatorType",
        "classicalType",
        "constantDeclaration",
        "singleDesignatorDeclaration",
        "doubleDesignatorDeclaration",
        "noDesignatorDeclaration",
        "bitDeclaration",
        "classicalDeclaration",
        "classicalTypeList",
        "classicalArgument",
        "classicalArgumentList",
        "aliasStatement",
        "indexIdentifier",
        "indexIdentifierList",
        "rangeDefinition",
        "quantumGateDefinition",
        "quantumGateSignature",
        "quantumGateName",
        "quantumBlock",
        "quantumLoop",
        "quantumLoopBlock",
        "quantumStatement",
        "quantumInstruction",
        "quantumPhase",
        "quantumReset",
        "quantumMeasurement",
        "quantumMeasurementAssignment",
        "quantumBarrier",
        "quantumGateModifier",
        "powModifier",
        "ctrlModifier",
        "quantumGateCall",
        "unaryOperator",
        "comparisonOperator",
        "equalityOperator",
        "logicalOperator",
        "expressionStatement",
        "expression",
        "logicalAndExpression",
        "bitOrExpression",
        "xOrExpression",
        "bitAndExpression",
        "equalityExpression",
        "comparisonExpression",
        "bitShiftExpression",
        "additiveExpression",
        "multiplicativeExpression",
        "unaryExpression",
        "powerExpression",
        "expressionTerminator",
        "booleanLiteral",
        "incrementor",
        "builtInCall",
        "builtInMath",
        "castOperator",
        "expressionList",
        "equalsExpression",
        "assignmentOperator",
        "setDeclaration",
        "programBlock",
        "branchingStatement",
        "loopSignature",
        "loopStatement",
        "endStatement",
        "returnStatement",
        "controlDirective",
        "externDeclaration",
        "externCall",
        "subroutineDefinition",
        "subroutineBlock",
        "subroutineCall",
        "pragma",
        "timingType",
        "timingBox",
        "timingIdentifier",
        "timingInstructionName",
        "timingInstruction",
        "timingStatement",
        "calibration",
        "calibrationGrammarDeclaration",
        "calibrationDefinition",
        "calibrationGrammar",
        "calibrationArgumentList",
        "metaComment",
    ]

    EOF = Token.EOF
    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    T__47 = 48
    T__48 = 49
    T__49 = 50
    T__50 = 51
    T__51 = 52
    T__52 = 53
    T__53 = 54
    T__54 = 55
    T__55 = 56
    T__56 = 57
    T__57 = 58
    T__58 = 59
    T__59 = 60
    T__60 = 61
    T__61 = 62
    T__62 = 63
    T__63 = 64
    T__64 = 65
    T__65 = 66
    T__66 = 67
    T__67 = 68
    T__68 = 69
    T__69 = 70
    T__70 = 71
    T__71 = 72
    T__72 = 73
    T__73 = 74
    T__74 = 75
    T__75 = 76
    T__76 = 77
    T__77 = 78
    T__78 = 79
    T__79 = 80
    T__80 = 81
    T__81 = 82
    T__82 = 83
    T__83 = 84
    T__84 = 85
    T__85 = 86
    T__86 = 87
    T__87 = 88
    T__88 = 89
    T__89 = 90
    T__90 = 91
    LBRACKET = 92
    RBRACKET = 93
    LBRACE = 94
    RBRACE = 95
    LPAREN = 96
    RPAREN = 97
    COLON = 98
    SEMICOLON = 99
    DOT = 100
    COMMA = 101
    EQUALS = 102
    ARROW = 103
    PLUS = 104
    MINUS = 105
    MUL = 106
    DIV = 107
    MOD = 108
    Constant = 109
    Whitespace = 110
    Newline = 111
    Integer = 112
    Identifier = 113
    RealNumber = 114
    TimingLiteral = 115
    StringLiteral = 116
    LineComment = 117
    BlockComment = 118

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class ProgramContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def header(self):
            return self.getTypedRuleContext(qasm2Parser.HeaderContext, 0)

        def globalStatement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.GlobalStatementContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.GlobalStatementContext, i)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.StatementContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.StatementContext, i)

        def metaComment(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.MetaCommentContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.MetaCommentContext, i)

        def getRuleIndex(self):
            return qasm2Parser.RULE_program

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterProgram"):
                listener.enterProgram(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitProgram"):
                listener.exitProgram(self)

    def program(self):

        localctx = qasm2Parser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 212
            self.header()
            self.state = 218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << qasm2Parser.T__4)
                        | (1 << qasm2Parser.T__5)
                        | (1 << qasm2Parser.T__6)
                        | (1 << qasm2Parser.T__7)
                        | (1 << qasm2Parser.T__8)
                        | (1 << qasm2Parser.T__9)
                        | (1 << qasm2Parser.T__10)
                        | (1 << qasm2Parser.T__11)
                        | (1 << qasm2Parser.T__12)
                        | (1 << qasm2Parser.T__13)
                        | (1 << qasm2Parser.T__14)
                        | (1 << qasm2Parser.T__15)
                        | (1 << qasm2Parser.T__17)
                        | (1 << qasm2Parser.T__18)
                        | (1 << qasm2Parser.T__19)
                        | (1 << qasm2Parser.T__20)
                        | (1 << qasm2Parser.T__21)
                        | (1 << qasm2Parser.T__22)
                        | (1 << qasm2Parser.T__23)
                        | (1 << qasm2Parser.T__24)
                        | (1 << qasm2Parser.T__26)
                        | (1 << qasm2Parser.T__27)
                        | (1 << qasm2Parser.T__28)
                        | (1 << qasm2Parser.T__29)
                        | (1 << qasm2Parser.T__30)
                        | (1 << qasm2Parser.T__44)
                        | (1 << qasm2Parser.T__45)
                        | (1 << qasm2Parser.T__48)
                        | (1 << qasm2Parser.T__49)
                        | (1 << qasm2Parser.T__50)
                        | (1 << qasm2Parser.T__51)
                        | (1 << qasm2Parser.T__52)
                        | (1 << qasm2Parser.T__53)
                        | (1 << qasm2Parser.T__54)
                        | (1 << qasm2Parser.T__55)
                        | (1 << qasm2Parser.T__56)
                    )
                )
                != 0
            ) or (
                (((_la - 70)) & ~0x3F) == 0
                and (
                    (1 << (_la - 70))
                    & (
                        (1 << (qasm2Parser.T__69 - 70))
                        | (1 << (qasm2Parser.T__71 - 70))
                        | (1 << (qasm2Parser.T__73 - 70))
                        | (1 << (qasm2Parser.T__74 - 70))
                        | (1 << (qasm2Parser.T__78 - 70))
                        | (1 << (qasm2Parser.T__79 - 70))
                        | (1 << (qasm2Parser.T__80 - 70))
                        | (1 << (qasm2Parser.T__81 - 70))
                        | (1 << (qasm2Parser.T__82 - 70))
                        | (1 << (qasm2Parser.T__83 - 70))
                        | (1 << (qasm2Parser.T__84 - 70))
                        | (1 << (qasm2Parser.T__85 - 70))
                        | (1 << (qasm2Parser.T__86 - 70))
                        | (1 << (qasm2Parser.T__87 - 70))
                        | (1 << (qasm2Parser.T__88 - 70))
                        | (1 << (qasm2Parser.T__90 - 70))
                        | (1 << (qasm2Parser.LPAREN - 70))
                        | (1 << (qasm2Parser.MINUS - 70))
                        | (1 << (qasm2Parser.Constant - 70))
                        | (1 << (qasm2Parser.Integer - 70))
                        | (1 << (qasm2Parser.Identifier - 70))
                        | (1 << (qasm2Parser.RealNumber - 70))
                        | (1 << (qasm2Parser.TimingLiteral - 70))
                        | (1 << (qasm2Parser.StringLiteral - 70))
                    )
                )
                != 0
            ):
                self.state = 216
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                    qasm2Parser.T__4,
                    qasm2Parser.T__5,
                    qasm2Parser.T__17,
                    qasm2Parser.T__78,
                    qasm2Parser.T__79,
                    qasm2Parser.T__80,
                    qasm2Parser.T__87,
                    qasm2Parser.T__88,
                ]:
                    self.state = 213
                    self.globalStatement()
                    pass
                elif token in [
                    qasm2Parser.T__6,
                    qasm2Parser.T__7,
                    qasm2Parser.T__8,
                    qasm2Parser.T__9,
                    qasm2Parser.T__10,
                    qasm2Parser.T__11,
                    qasm2Parser.T__12,
                    qasm2Parser.T__13,
                    qasm2Parser.T__14,
                    qasm2Parser.T__15,
                    qasm2Parser.T__18,
                    qasm2Parser.T__19,
                    qasm2Parser.T__20,
                    qasm2Parser.T__21,
                    qasm2Parser.T__22,
                    qasm2Parser.T__23,
                    qasm2Parser.T__24,
                    qasm2Parser.T__26,
                    qasm2Parser.T__27,
                    qasm2Parser.T__28,
                    qasm2Parser.T__29,
                    qasm2Parser.T__30,
                    qasm2Parser.T__44,
                    qasm2Parser.T__45,
                    qasm2Parser.T__48,
                    qasm2Parser.T__49,
                    qasm2Parser.T__50,
                    qasm2Parser.T__51,
                    qasm2Parser.T__52,
                    qasm2Parser.T__53,
                    qasm2Parser.T__54,
                    qasm2Parser.T__55,
                    qasm2Parser.T__56,
                    qasm2Parser.T__69,
                    qasm2Parser.T__71,
                    qasm2Parser.T__73,
                    qasm2Parser.T__74,
                    qasm2Parser.T__81,
                    qasm2Parser.T__82,
                    qasm2Parser.T__83,
                    qasm2Parser.T__84,
                    qasm2Parser.T__85,
                    qasm2Parser.T__86,
                    qasm2Parser.LPAREN,
                    qasm2Parser.MINUS,
                    qasm2Parser.Constant,
                    qasm2Parser.Integer,
                    qasm2Parser.Identifier,
                    qasm2Parser.RealNumber,
                    qasm2Parser.TimingLiteral,
                    qasm2Parser.StringLiteral,
                ]:
                    self.state = 214
                    self.statement()
                    pass
                elif token in [qasm2Parser.T__90]:
                    self.state = 215
                    self.metaComment()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 220
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HeaderContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(qasm2Parser.VersionContext, 0)

        def include(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.IncludeContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.IncludeContext, i)

        def io(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.IoContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.IoContext, i)

        def getRuleIndex(self):
            return qasm2Parser.RULE_header

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHeader"):
                listener.enterHeader(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHeader"):
                listener.exitHeader(self)

    def header(self):

        localctx = qasm2Parser.HeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_header)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.T__0:
                self.state = 221
                self.version()

            self.state = 227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == qasm2Parser.T__1:
                self.state = 224
                self.include()
                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == qasm2Parser.T__2 or _la == qasm2Parser.T__3:
                self.state = 230
                self.io()
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(qasm2Parser.SEMICOLON, 0)

        def Integer(self):
            return self.getToken(qasm2Parser.Integer, 0)

        def RealNumber(self):
            return self.getToken(qasm2Parser.RealNumber, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_version

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVersion"):
                listener.enterVersion(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVersion"):
                listener.exitVersion(self)

    def version(self):

        localctx = qasm2Parser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_version)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.match(qasm2Parser.T__0)
            self.state = 237
            _la = self._input.LA(1)
            if not (_la == qasm2Parser.Integer or _la == qasm2Parser.RealNumber):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 238
            self.match(qasm2Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IncludeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(qasm2Parser.StringLiteral, 0)

        def SEMICOLON(self):
            return self.getToken(qasm2Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_include

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInclude"):
                listener.enterInclude(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInclude"):
                listener.exitInclude(self)

    def include(self):

        localctx = qasm2Parser.IncludeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_include)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.match(qasm2Parser.T__1)
            self.state = 241
            self.match(qasm2Parser.StringLiteral)
            self.state = 242
            self.match(qasm2Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IoIdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return qasm2Parser.RULE_ioIdentifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIoIdentifier"):
                listener.enterIoIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIoIdentifier"):
                listener.exitIoIdentifier(self)

    def ioIdentifier(self):

        localctx = qasm2Parser.IoIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_ioIdentifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            _la = self._input.LA(1)
            if not (_la == qasm2Parser.T__2 or _la == qasm2Parser.T__3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IoContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ioIdentifier(self):
            return self.getTypedRuleContext(qasm2Parser.IoIdentifierContext, 0)

        def classicalType(self):
            return self.getTypedRuleContext(qasm2Parser.ClassicalTypeContext, 0)

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(qasm2Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_io

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIo"):
                listener.enterIo(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIo"):
                listener.exitIo(self)

    def io(self):

        localctx = qasm2Parser.IoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_io)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.ioIdentifier()
            self.state = 247
            self.classicalType()
            self.state = 248
            self.match(qasm2Parser.Identifier)
            self.state = 249
            self.match(qasm2Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GlobalStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subroutineDefinition(self):
            return self.getTypedRuleContext(qasm2Parser.SubroutineDefinitionContext, 0)

        def externDeclaration(self):
            return self.getTypedRuleContext(qasm2Parser.ExternDeclarationContext, 0)

        def quantumGateDefinition(self):
            return self.getTypedRuleContext(qasm2Parser.QuantumGateDefinitionContext, 0)

        def calibration(self):
            return self.getTypedRuleContext(qasm2Parser.CalibrationContext, 0)

        def quantumDeclarationStatement(self):
            return self.getTypedRuleContext(qasm2Parser.QuantumDeclarationStatementContext, 0)

        def pragma(self):
            return self.getTypedRuleContext(qasm2Parser.PragmaContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_globalStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterGlobalStatement"):
                listener.enterGlobalStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitGlobalStatement"):
                listener.exitGlobalStatement(self)

    def globalStatement(self):

        localctx = qasm2Parser.GlobalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_globalStatement)
        try:
            self.state = 257
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm2Parser.T__79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 251
                self.subroutineDefinition()
                pass
            elif token in [qasm2Parser.T__78]:
                self.enterOuterAlt(localctx, 2)
                self.state = 252
                self.externDeclaration()
                pass
            elif token in [qasm2Parser.T__17]:
                self.enterOuterAlt(localctx, 3)
                self.state = 253
                self.quantumGateDefinition()
                pass
            elif token in [qasm2Parser.T__87, qasm2Parser.T__88]:
                self.enterOuterAlt(localctx, 4)
                self.state = 254
                self.calibration()
                pass
            elif token in [qasm2Parser.T__4, qasm2Parser.T__5]:
                self.enterOuterAlt(localctx, 5)
                self.state = 255
                self.quantumDeclarationStatement()
                pass
            elif token in [qasm2Parser.T__80]:
                self.enterOuterAlt(localctx, 6)
                self.state = 256
                self.pragma()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionStatement(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionStatementContext, 0)

        def assignmentStatement(self):
            return self.getTypedRuleContext(qasm2Parser.AssignmentStatementContext, 0)

        def classicalDeclarationStatement(self):
            return self.getTypedRuleContext(qasm2Parser.ClassicalDeclarationStatementContext, 0)

        def branchingStatement(self):
            return self.getTypedRuleContext(qasm2Parser.BranchingStatementContext, 0)

        def loopStatement(self):
            return self.getTypedRuleContext(qasm2Parser.LoopStatementContext, 0)

        def endStatement(self):
            return self.getTypedRuleContext(qasm2Parser.EndStatementContext, 0)

        def aliasStatement(self):
            return self.getTypedRuleContext(qasm2Parser.AliasStatementContext, 0)

        def quantumStatement(self):
            return self.getTypedRuleContext(qasm2Parser.QuantumStatementContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_statement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

    def statement(self):

        localctx = qasm2Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_statement)
        try:
            self.state = 267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 6, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 259
                self.expressionStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 260
                self.assignmentStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 261
                self.classicalDeclarationStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 262
                self.branchingStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 263
                self.loopStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 264
                self.endStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 265
                self.aliasStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 266
                self.quantumStatement()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumDeclarationStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumDeclaration(self):
            return self.getTypedRuleContext(qasm2Parser.QuantumDeclarationContext, 0)

        def SEMICOLON(self):
            return self.getToken(qasm2Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_quantumDeclarationStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuantumDeclarationStatement"):
                listener.enterQuantumDeclarationStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuantumDeclarationStatement"):
                listener.exitQuantumDeclarationStatement(self)

    def quantumDeclarationStatement(self):

        localctx = qasm2Parser.QuantumDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_quantumDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self.quantumDeclaration()
            self.state = 270
            self.match(qasm2Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassicalDeclarationStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(qasm2Parser.SEMICOLON, 0)

        def classicalDeclaration(self):
            return self.getTypedRuleContext(qasm2Parser.ClassicalDeclarationContext, 0)

        def constantDeclaration(self):
            return self.getTypedRuleContext(qasm2Parser.ConstantDeclarationContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_classicalDeclarationStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassicalDeclarationStatement"):
                listener.enterClassicalDeclarationStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassicalDeclarationStatement"):
                listener.exitClassicalDeclarationStatement(self)

    def classicalDeclarationStatement(self):

        localctx = qasm2Parser.ClassicalDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_classicalDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                qasm2Parser.T__6,
                qasm2Parser.T__7,
                qasm2Parser.T__8,
                qasm2Parser.T__9,
                qasm2Parser.T__10,
                qasm2Parser.T__11,
                qasm2Parser.T__12,
                qasm2Parser.T__13,
                qasm2Parser.T__81,
                qasm2Parser.T__82,
            ]:
                self.state = 272
                self.classicalDeclaration()
                pass
            elif token in [qasm2Parser.T__14]:
                self.state = 273
                self.constantDeclaration()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 276
            self.match(qasm2Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassicalAssignmentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def designator(self):
            return self.getTypedRuleContext(qasm2Parser.DesignatorContext, 0)

        def assignmentOperator(self):
            return self.getTypedRuleContext(qasm2Parser.AssignmentOperatorContext, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_classicalAssignment

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassicalAssignment"):
                listener.enterClassicalAssignment(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassicalAssignment"):
                listener.exitClassicalAssignment(self)

    def classicalAssignment(self):

        localctx = qasm2Parser.ClassicalAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_classicalAssignment)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.match(qasm2Parser.Identifier)
            self.state = 280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.LBRACKET:
                self.state = 279
                self.designator()

            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 58)) & ~0x3F) == 0 and (
                (1 << (_la - 58))
                & (
                    (1 << (qasm2Parser.T__57 - 58))
                    | (1 << (qasm2Parser.T__58 - 58))
                    | (1 << (qasm2Parser.T__59 - 58))
                    | (1 << (qasm2Parser.T__60 - 58))
                    | (1 << (qasm2Parser.T__61 - 58))
                    | (1 << (qasm2Parser.T__62 - 58))
                    | (1 << (qasm2Parser.T__63 - 58))
                    | (1 << (qasm2Parser.T__64 - 58))
                    | (1 << (qasm2Parser.T__65 - 58))
                    | (1 << (qasm2Parser.T__66 - 58))
                    | (1 << (qasm2Parser.T__67 - 58))
                    | (1 << (qasm2Parser.T__68 - 58))
                    | (1 << (qasm2Parser.EQUALS - 58))
                )
            ) != 0:
                self.state = 282
                self.assignmentOperator()
                self.state = 283
                self.expression(0)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(qasm2Parser.SEMICOLON, 0)

        def classicalAssignment(self):
            return self.getTypedRuleContext(qasm2Parser.ClassicalAssignmentContext, 0)

        def quantumMeasurementAssignment(self):
            return self.getTypedRuleContext(qasm2Parser.QuantumMeasurementAssignmentContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_assignmentStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentStatement"):
                listener.enterAssignmentStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentStatement"):
                listener.exitAssignmentStatement(self)

    def assignmentStatement(self):

        localctx = qasm2Parser.AssignmentStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_assignmentStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 10, self._ctx)
            if la_ == 1:
                self.state = 287
                self.classicalAssignment()
                pass

            elif la_ == 2:
                self.state = 288
                self.quantumMeasurementAssignment()
                pass

            self.state = 291
            self.match(qasm2Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnSignatureContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARROW(self):
            return self.getToken(qasm2Parser.ARROW, 0)

        def classicalType(self):
            return self.getTypedRuleContext(qasm2Parser.ClassicalTypeContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_returnSignature

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReturnSignature"):
                listener.enterReturnSignature(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReturnSignature"):
                listener.exitReturnSignature(self)

    def returnSignature(self):

        localctx = qasm2Parser.ReturnSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_returnSignature)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.match(qasm2Parser.ARROW)
            self.state = 294
            self.classicalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DesignatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(qasm2Parser.LBRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionContext, 0)

        def RBRACKET(self):
            return self.getToken(qasm2Parser.RBRACKET, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_designator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDesignator"):
                listener.enterDesignator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDesignator"):
                listener.exitDesignator(self)

    def designator(self):

        localctx = qasm2Parser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_designator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.match(qasm2Parser.LBRACKET)
            self.state = 297
            self.expression(0)
            self.state = 298
            self.match(qasm2Parser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoubleDesignatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(qasm2Parser.LBRACKET, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.ExpressionContext, i)

        def COMMA(self):
            return self.getToken(qasm2Parser.COMMA, 0)

        def RBRACKET(self):
            return self.getToken(qasm2Parser.RBRACKET, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_doubleDesignator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDoubleDesignator"):
                listener.enterDoubleDesignator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDoubleDesignator"):
                listener.exitDoubleDesignator(self)

    def doubleDesignator(self):

        localctx = qasm2Parser.DoubleDesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_doubleDesignator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.match(qasm2Parser.LBRACKET)
            self.state = 301
            self.expression(0)
            self.state = 302
            self.match(qasm2Parser.COMMA)
            self.state = 303
            self.expression(0)
            self.state = 304
            self.match(qasm2Parser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i: int = None):
            if i is None:
                return self.getTokens(qasm2Parser.Identifier)
            else:
                return self.getToken(qasm2Parser.Identifier, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(qasm2Parser.COMMA)
            else:
                return self.getToken(qasm2Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm2Parser.RULE_identifierList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIdentifierList"):
                listener.enterIdentifierList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIdentifierList"):
                listener.exitIdentifierList(self)

    def identifierList(self):

        localctx = qasm2Parser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 306
                    self.match(qasm2Parser.Identifier)
                    self.state = 307
                    self.match(qasm2Parser.COMMA)
                self.state = 312
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 11, self._ctx)

            self.state = 313
            self.match(qasm2Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def designator(self):
            return self.getTypedRuleContext(qasm2Parser.DesignatorContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_quantumDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuantumDeclaration"):
                listener.enterQuantumDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuantumDeclaration"):
                listener.exitQuantumDeclaration(self)

    def quantumDeclaration(self):

        localctx = qasm2Parser.QuantumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_quantumDeclaration)
        self._la = 0  # Token type
        try:
            self.state = 325
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm2Parser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 315
                self.match(qasm2Parser.T__4)
                self.state = 316
                self.match(qasm2Parser.Identifier)
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == qasm2Parser.LBRACKET:
                    self.state = 317
                    self.designator()

                pass
            elif token in [qasm2Parser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 320
                self.match(qasm2Parser.T__5)
                self.state = 322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == qasm2Parser.LBRACKET:
                    self.state = 321
                    self.designator()

                self.state = 324
                self.match(qasm2Parser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumArgumentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def designator(self):
            return self.getTypedRuleContext(qasm2Parser.DesignatorContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_quantumArgument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuantumArgument"):
                listener.enterQuantumArgument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuantumArgument"):
                listener.exitQuantumArgument(self)

    def quantumArgument(self):

        localctx = qasm2Parser.QuantumArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_quantumArgument)
        self._la = 0  # Token type
        try:
            self.state = 337
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm2Parser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 327
                self.match(qasm2Parser.T__4)
                self.state = 328
                self.match(qasm2Parser.Identifier)
                self.state = 330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == qasm2Parser.LBRACKET:
                    self.state = 329
                    self.designator()

                pass
            elif token in [qasm2Parser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 332
                self.match(qasm2Parser.T__5)
                self.state = 334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == qasm2Parser.LBRACKET:
                    self.state = 333
                    self.designator()

                self.state = 336
                self.match(qasm2Parser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumArgumentListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumArgument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.QuantumArgumentContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.QuantumArgumentContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(qasm2Parser.COMMA)
            else:
                return self.getToken(qasm2Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm2Parser.RULE_quantumArgumentList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuantumArgumentList"):
                listener.enterQuantumArgumentList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuantumArgumentList"):
                listener.exitQuantumArgumentList(self)

    def quantumArgumentList(self):

        localctx = qasm2Parser.QuantumArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_quantumArgumentList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.quantumArgument()
            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == qasm2Parser.COMMA:
                self.state = 340
                self.match(qasm2Parser.COMMA)
                self.state = 341
                self.quantumArgument()
                self.state = 346
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BitTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return qasm2Parser.RULE_bitType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBitType"):
                listener.enterBitType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBitType"):
                listener.exitBitType(self)

    def bitType(self):

        localctx = qasm2Parser.BitTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_bitType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            _la = self._input.LA(1)
            if not (_la == qasm2Parser.T__6 or _la == qasm2Parser.T__7):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleDesignatorTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return qasm2Parser.RULE_singleDesignatorType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSingleDesignatorType"):
                listener.enterSingleDesignatorType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSingleDesignatorType"):
                listener.exitSingleDesignatorType(self)

    def singleDesignatorType(self):

        localctx = qasm2Parser.SingleDesignatorTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_singleDesignatorType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << qasm2Parser.T__8)
                            | (1 << qasm2Parser.T__9)
                            | (1 << qasm2Parser.T__10)
                            | (1 << qasm2Parser.T__11)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoubleDesignatorTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return qasm2Parser.RULE_doubleDesignatorType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDoubleDesignatorType"):
                listener.enterDoubleDesignatorType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDoubleDesignatorType"):
                listener.exitDoubleDesignatorType(self)

    def doubleDesignatorType(self):

        localctx = qasm2Parser.DoubleDesignatorTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_doubleDesignatorType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.match(qasm2Parser.T__12)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoDesignatorTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timingType(self):
            return self.getTypedRuleContext(qasm2Parser.TimingTypeContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_noDesignatorType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoDesignatorType"):
                listener.enterNoDesignatorType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoDesignatorType"):
                listener.exitNoDesignatorType(self)

    def noDesignatorType(self):

        localctx = qasm2Parser.NoDesignatorTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_noDesignatorType)
        try:
            self.state = 355
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm2Parser.T__13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 353
                self.match(qasm2Parser.T__13)
                pass
            elif token in [qasm2Parser.T__81, qasm2Parser.T__82]:
                self.enterOuterAlt(localctx, 2)
                self.state = 354
                self.timingType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassicalTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDesignatorType(self):
            return self.getTypedRuleContext(qasm2Parser.SingleDesignatorTypeContext, 0)

        def designator(self):
            return self.getTypedRuleContext(qasm2Parser.DesignatorContext, 0)

        def doubleDesignatorType(self):
            return self.getTypedRuleContext(qasm2Parser.DoubleDesignatorTypeContext, 0)

        def doubleDesignator(self):
            return self.getTypedRuleContext(qasm2Parser.DoubleDesignatorContext, 0)

        def noDesignatorType(self):
            return self.getTypedRuleContext(qasm2Parser.NoDesignatorTypeContext, 0)

        def bitType(self):
            return self.getTypedRuleContext(qasm2Parser.BitTypeContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_classicalType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassicalType"):
                listener.enterClassicalType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassicalType"):
                listener.exitClassicalType(self)

    def classicalType(self):

        localctx = qasm2Parser.ClassicalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_classicalType)
        self._la = 0  # Token type
        try:
            self.state = 368
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                qasm2Parser.T__8,
                qasm2Parser.T__9,
                qasm2Parser.T__10,
                qasm2Parser.T__11,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 357
                self.singleDesignatorType()
                self.state = 358
                self.designator()
                pass
            elif token in [qasm2Parser.T__12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 360
                self.doubleDesignatorType()
                self.state = 361
                self.doubleDesignator()
                pass
            elif token in [qasm2Parser.T__13, qasm2Parser.T__81, qasm2Parser.T__82]:
                self.enterOuterAlt(localctx, 3)
                self.state = 363
                self.noDesignatorType()
                pass
            elif token in [qasm2Parser.T__6, qasm2Parser.T__7]:
                self.enterOuterAlt(localctx, 4)
                self.state = 364
                self.bitType()
                self.state = 366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == qasm2Parser.LBRACKET:
                    self.state = 365
                    self.designator()

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(qasm2Parser.EqualsExpressionContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_constantDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterConstantDeclaration"):
                listener.enterConstantDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitConstantDeclaration"):
                listener.exitConstantDeclaration(self)

    def constantDeclaration(self):

        localctx = qasm2Parser.ConstantDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_constantDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.match(qasm2Parser.T__14)
            self.state = 371
            self.match(qasm2Parser.Identifier)
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.EQUALS:
                self.state = 372
                self.equalsExpression()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleDesignatorDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDesignatorType(self):
            return self.getTypedRuleContext(qasm2Parser.SingleDesignatorTypeContext, 0)

        def designator(self):
            return self.getTypedRuleContext(qasm2Parser.DesignatorContext, 0)

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(qasm2Parser.EqualsExpressionContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_singleDesignatorDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSingleDesignatorDeclaration"):
                listener.enterSingleDesignatorDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSingleDesignatorDeclaration"):
                listener.exitSingleDesignatorDeclaration(self)

    def singleDesignatorDeclaration(self):

        localctx = qasm2Parser.SingleDesignatorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_singleDesignatorDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.singleDesignatorType()
            self.state = 376
            self.designator()
            self.state = 377
            self.match(qasm2Parser.Identifier)
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.EQUALS:
                self.state = 378
                self.equalsExpression()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoubleDesignatorDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def doubleDesignatorType(self):
            return self.getTypedRuleContext(qasm2Parser.DoubleDesignatorTypeContext, 0)

        def doubleDesignator(self):
            return self.getTypedRuleContext(qasm2Parser.DoubleDesignatorContext, 0)

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(qasm2Parser.EqualsExpressionContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_doubleDesignatorDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDoubleDesignatorDeclaration"):
                listener.enterDoubleDesignatorDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDoubleDesignatorDeclaration"):
                listener.exitDoubleDesignatorDeclaration(self)

    def doubleDesignatorDeclaration(self):

        localctx = qasm2Parser.DoubleDesignatorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_doubleDesignatorDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.doubleDesignatorType()
            self.state = 382
            self.doubleDesignator()
            self.state = 383
            self.match(qasm2Parser.Identifier)
            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.EQUALS:
                self.state = 384
                self.equalsExpression()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NoDesignatorDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noDesignatorType(self):
            return self.getTypedRuleContext(qasm2Parser.NoDesignatorTypeContext, 0)

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(qasm2Parser.EqualsExpressionContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_noDesignatorDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNoDesignatorDeclaration"):
                listener.enterNoDesignatorDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNoDesignatorDeclaration"):
                listener.exitNoDesignatorDeclaration(self)

    def noDesignatorDeclaration(self):

        localctx = qasm2Parser.NoDesignatorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_noDesignatorDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.noDesignatorType()
            self.state = 388
            self.match(qasm2Parser.Identifier)
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.EQUALS:
                self.state = 389
                self.equalsExpression()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BitDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def equalsExpression(self):
            return self.getTypedRuleContext(qasm2Parser.EqualsExpressionContext, 0)

        def designator(self):
            return self.getTypedRuleContext(qasm2Parser.DesignatorContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_bitDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBitDeclaration"):
                listener.enterBitDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBitDeclaration"):
                listener.exitBitDeclaration(self)

    def bitDeclaration(self):

        localctx = qasm2Parser.BitDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_bitDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm2Parser.T__7]:
                self.state = 392
                self.match(qasm2Parser.T__7)
                self.state = 393
                self.match(qasm2Parser.Identifier)
                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == qasm2Parser.LBRACKET:
                    self.state = 394
                    self.designator()

                pass
            elif token in [qasm2Parser.T__6]:
                self.state = 397
                self.match(qasm2Parser.T__6)
                self.state = 399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == qasm2Parser.LBRACKET:
                    self.state = 398
                    self.designator()

                self.state = 401
                self.match(qasm2Parser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.EQUALS:
                self.state = 404
                self.equalsExpression()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassicalDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDesignatorDeclaration(self):
            return self.getTypedRuleContext(qasm2Parser.SingleDesignatorDeclarationContext, 0)

        def doubleDesignatorDeclaration(self):
            return self.getTypedRuleContext(qasm2Parser.DoubleDesignatorDeclarationContext, 0)

        def noDesignatorDeclaration(self):
            return self.getTypedRuleContext(qasm2Parser.NoDesignatorDeclarationContext, 0)

        def bitDeclaration(self):
            return self.getTypedRuleContext(qasm2Parser.BitDeclarationContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_classicalDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassicalDeclaration"):
                listener.enterClassicalDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassicalDeclaration"):
                listener.exitClassicalDeclaration(self)

    def classicalDeclaration(self):

        localctx = qasm2Parser.ClassicalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_classicalDeclaration)
        try:
            self.state = 411
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                qasm2Parser.T__8,
                qasm2Parser.T__9,
                qasm2Parser.T__10,
                qasm2Parser.T__11,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 407
                self.singleDesignatorDeclaration()
                pass
            elif token in [qasm2Parser.T__12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 408
                self.doubleDesignatorDeclaration()
                pass
            elif token in [qasm2Parser.T__13, qasm2Parser.T__81, qasm2Parser.T__82]:
                self.enterOuterAlt(localctx, 3)
                self.state = 409
                self.noDesignatorDeclaration()
                pass
            elif token in [qasm2Parser.T__6, qasm2Parser.T__7]:
                self.enterOuterAlt(localctx, 4)
                self.state = 410
                self.bitDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassicalTypeListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalType(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.ClassicalTypeContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.ClassicalTypeContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(qasm2Parser.COMMA)
            else:
                return self.getToken(qasm2Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm2Parser.RULE_classicalTypeList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassicalTypeList"):
                listener.enterClassicalTypeList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassicalTypeList"):
                listener.exitClassicalTypeList(self)

    def classicalTypeList(self):

        localctx = qasm2Parser.ClassicalTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_classicalTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 31, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 413
                    self.classicalType()
                    self.state = 414
                    self.match(qasm2Parser.COMMA)
                self.state = 420
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 31, self._ctx)

            self.state = 421
            self.classicalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassicalArgumentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def singleDesignatorType(self):
            return self.getTypedRuleContext(qasm2Parser.SingleDesignatorTypeContext, 0)

        def designator(self):
            return self.getTypedRuleContext(qasm2Parser.DesignatorContext, 0)

        def doubleDesignatorType(self):
            return self.getTypedRuleContext(qasm2Parser.DoubleDesignatorTypeContext, 0)

        def doubleDesignator(self):
            return self.getTypedRuleContext(qasm2Parser.DoubleDesignatorContext, 0)

        def noDesignatorType(self):
            return self.getTypedRuleContext(qasm2Parser.NoDesignatorTypeContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_classicalArgument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassicalArgument"):
                listener.enterClassicalArgument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassicalArgument"):
                listener.exitClassicalArgument(self)

    def classicalArgument(self):

        localctx = qasm2Parser.ClassicalArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_classicalArgument)
        self._la = 0  # Token type
        try:
            self.state = 444
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                qasm2Parser.T__8,
                qasm2Parser.T__9,
                qasm2Parser.T__10,
                qasm2Parser.T__11,
                qasm2Parser.T__12,
                qasm2Parser.T__13,
                qasm2Parser.T__81,
                qasm2Parser.T__82,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 430
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                    qasm2Parser.T__8,
                    qasm2Parser.T__9,
                    qasm2Parser.T__10,
                    qasm2Parser.T__11,
                ]:
                    self.state = 423
                    self.singleDesignatorType()
                    self.state = 424
                    self.designator()
                    pass
                elif token in [qasm2Parser.T__12]:
                    self.state = 426
                    self.doubleDesignatorType()
                    self.state = 427
                    self.doubleDesignator()
                    pass
                elif token in [qasm2Parser.T__13, qasm2Parser.T__81, qasm2Parser.T__82]:
                    self.state = 429
                    self.noDesignatorType()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 432
                self.match(qasm2Parser.Identifier)
                pass
            elif token in [qasm2Parser.T__7]:
                self.enterOuterAlt(localctx, 2)
                self.state = 434
                self.match(qasm2Parser.T__7)
                self.state = 435
                self.match(qasm2Parser.Identifier)
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == qasm2Parser.LBRACKET:
                    self.state = 436
                    self.designator()

                pass
            elif token in [qasm2Parser.T__6]:
                self.enterOuterAlt(localctx, 3)
                self.state = 439
                self.match(qasm2Parser.T__6)
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == qasm2Parser.LBRACKET:
                    self.state = 440
                    self.designator()

                self.state = 443
                self.match(qasm2Parser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassicalArgumentListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalArgument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.ClassicalArgumentContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.ClassicalArgumentContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(qasm2Parser.COMMA)
            else:
                return self.getToken(qasm2Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm2Parser.RULE_classicalArgumentList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterClassicalArgumentList"):
                listener.enterClassicalArgumentList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitClassicalArgumentList"):
                listener.exitClassicalArgumentList(self)

    def classicalArgumentList(self):

        localctx = qasm2Parser.ClassicalArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_classicalArgumentList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.classicalArgument()
            self.state = 451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == qasm2Parser.COMMA:
                self.state = 447
                self.match(qasm2Parser.COMMA)
                self.state = 448
                self.classicalArgument()
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AliasStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def EQUALS(self):
            return self.getToken(qasm2Parser.EQUALS, 0)

        def indexIdentifier(self):
            return self.getTypedRuleContext(qasm2Parser.IndexIdentifierContext, 0)

        def SEMICOLON(self):
            return self.getToken(qasm2Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_aliasStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAliasStatement"):
                listener.enterAliasStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAliasStatement"):
                listener.exitAliasStatement(self)

    def aliasStatement(self):

        localctx = qasm2Parser.AliasStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_aliasStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.match(qasm2Parser.T__15)
            self.state = 455
            self.match(qasm2Parser.Identifier)
            self.state = 456
            self.match(qasm2Parser.EQUALS)
            self.state = 457
            self.indexIdentifier(0)
            self.state = 458
            self.match(qasm2Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexIdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def rangeDefinition(self):
            return self.getTypedRuleContext(qasm2Parser.RangeDefinitionContext, 0)

        def LBRACKET(self):
            return self.getToken(qasm2Parser.LBRACKET, 0)

        def expressionList(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionListContext, 0)

        def RBRACKET(self):
            return self.getToken(qasm2Parser.RBRACKET, 0)

        def indexIdentifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.IndexIdentifierContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.IndexIdentifierContext, i)

        def getRuleIndex(self):
            return qasm2Parser.RULE_indexIdentifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIndexIdentifier"):
                listener.enterIndexIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIndexIdentifier"):
                listener.exitIndexIdentifier(self)

    def indexIdentifier(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm2Parser.IndexIdentifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_indexIdentifier, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 38, self._ctx)
            if la_ == 1:
                self.state = 461
                self.match(qasm2Parser.Identifier)
                self.state = 462
                self.rangeDefinition()
                pass

            elif la_ == 2:
                self.state = 463
                self.match(qasm2Parser.Identifier)
                self.state = 468
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 37, self._ctx)
                if la_ == 1:
                    self.state = 464
                    self.match(qasm2Parser.LBRACKET)
                    self.state = 465
                    self.expressionList()
                    self.state = 466
                    self.match(qasm2Parser.RBRACKET)

                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 477
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 39, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm2Parser.IndexIdentifierContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_indexIdentifier)
                    self.state = 472
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 473
                    self.match(qasm2Parser.T__16)
                    self.state = 474
                    self.indexIdentifier(2)
                self.state = 479
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 39, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class IndexIdentifierListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexIdentifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.IndexIdentifierContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.IndexIdentifierContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(qasm2Parser.COMMA)
            else:
                return self.getToken(qasm2Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm2Parser.RULE_indexIdentifierList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIndexIdentifierList"):
                listener.enterIndexIdentifierList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIndexIdentifierList"):
                listener.exitIndexIdentifierList(self)

    def indexIdentifierList(self):

        localctx = qasm2Parser.IndexIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_indexIdentifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.indexIdentifier(0)
            self.state = 485
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 40, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 481
                    self.match(qasm2Parser.COMMA)
                    self.state = 482
                    self.indexIdentifier(0)
                self.state = 487
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 40, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RangeDefinitionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(qasm2Parser.LBRACKET, 0)

        def COLON(self, i: int = None):
            if i is None:
                return self.getTokens(qasm2Parser.COLON)
            else:
                return self.getToken(qasm2Parser.COLON, i)

        def RBRACKET(self):
            return self.getToken(qasm2Parser.RBRACKET, 0)

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.ExpressionContext, i)

        def getRuleIndex(self):
            return qasm2Parser.RULE_rangeDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterRangeDefinition"):
                listener.enterRangeDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitRangeDefinition"):
                listener.exitRangeDefinition(self)

    def rangeDefinition(self):

        localctx = qasm2Parser.RangeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_rangeDefinition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.match(qasm2Parser.LBRACKET)
            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << qasm2Parser.T__6)
                        | (1 << qasm2Parser.T__7)
                        | (1 << qasm2Parser.T__8)
                        | (1 << qasm2Parser.T__9)
                        | (1 << qasm2Parser.T__10)
                        | (1 << qasm2Parser.T__11)
                        | (1 << qasm2Parser.T__12)
                        | (1 << qasm2Parser.T__13)
                        | (1 << qasm2Parser.T__29)
                        | (1 << qasm2Parser.T__30)
                        | (1 << qasm2Parser.T__44)
                        | (1 << qasm2Parser.T__45)
                        | (1 << qasm2Parser.T__48)
                        | (1 << qasm2Parser.T__49)
                        | (1 << qasm2Parser.T__50)
                        | (1 << qasm2Parser.T__51)
                        | (1 << qasm2Parser.T__52)
                        | (1 << qasm2Parser.T__53)
                        | (1 << qasm2Parser.T__54)
                        | (1 << qasm2Parser.T__55)
                        | (1 << qasm2Parser.T__56)
                    )
                )
                != 0
            ) or (
                (((_la - 82)) & ~0x3F) == 0
                and (
                    (1 << (_la - 82))
                    & (
                        (1 << (qasm2Parser.T__81 - 82))
                        | (1 << (qasm2Parser.T__82 - 82))
                        | (1 << (qasm2Parser.T__84 - 82))
                        | (1 << (qasm2Parser.LPAREN - 82))
                        | (1 << (qasm2Parser.MINUS - 82))
                        | (1 << (qasm2Parser.Constant - 82))
                        | (1 << (qasm2Parser.Integer - 82))
                        | (1 << (qasm2Parser.Identifier - 82))
                        | (1 << (qasm2Parser.RealNumber - 82))
                        | (1 << (qasm2Parser.TimingLiteral - 82))
                        | (1 << (qasm2Parser.StringLiteral - 82))
                    )
                )
                != 0
            ):
                self.state = 489
                self.expression(0)

            self.state = 492
            self.match(qasm2Parser.COLON)
            self.state = 494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << qasm2Parser.T__6)
                        | (1 << qasm2Parser.T__7)
                        | (1 << qasm2Parser.T__8)
                        | (1 << qasm2Parser.T__9)
                        | (1 << qasm2Parser.T__10)
                        | (1 << qasm2Parser.T__11)
                        | (1 << qasm2Parser.T__12)
                        | (1 << qasm2Parser.T__13)
                        | (1 << qasm2Parser.T__29)
                        | (1 << qasm2Parser.T__30)
                        | (1 << qasm2Parser.T__44)
                        | (1 << qasm2Parser.T__45)
                        | (1 << qasm2Parser.T__48)
                        | (1 << qasm2Parser.T__49)
                        | (1 << qasm2Parser.T__50)
                        | (1 << qasm2Parser.T__51)
                        | (1 << qasm2Parser.T__52)
                        | (1 << qasm2Parser.T__53)
                        | (1 << qasm2Parser.T__54)
                        | (1 << qasm2Parser.T__55)
                        | (1 << qasm2Parser.T__56)
                    )
                )
                != 0
            ) or (
                (((_la - 82)) & ~0x3F) == 0
                and (
                    (1 << (_la - 82))
                    & (
                        (1 << (qasm2Parser.T__81 - 82))
                        | (1 << (qasm2Parser.T__82 - 82))
                        | (1 << (qasm2Parser.T__84 - 82))
                        | (1 << (qasm2Parser.LPAREN - 82))
                        | (1 << (qasm2Parser.MINUS - 82))
                        | (1 << (qasm2Parser.Constant - 82))
                        | (1 << (qasm2Parser.Integer - 82))
                        | (1 << (qasm2Parser.Identifier - 82))
                        | (1 << (qasm2Parser.RealNumber - 82))
                        | (1 << (qasm2Parser.TimingLiteral - 82))
                        | (1 << (qasm2Parser.StringLiteral - 82))
                    )
                )
                != 0
            ):
                self.state = 493
                self.expression(0)

            self.state = 498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.COLON:
                self.state = 496
                self.match(qasm2Parser.COLON)
                self.state = 497
                self.expression(0)

            self.state = 500
            self.match(qasm2Parser.RBRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumGateDefinitionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumGateSignature(self):
            return self.getTypedRuleContext(qasm2Parser.QuantumGateSignatureContext, 0)

        def quantumBlock(self):
            return self.getTypedRuleContext(qasm2Parser.QuantumBlockContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_quantumGateDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuantumGateDefinition"):
                listener.enterQuantumGateDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuantumGateDefinition"):
                listener.exitQuantumGateDefinition(self)

    def quantumGateDefinition(self):

        localctx = qasm2Parser.QuantumGateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_quantumGateDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.match(qasm2Parser.T__17)
            self.state = 503
            self.quantumGateSignature()
            self.state = 504
            self.quantumBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumGateSignatureContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumGateName(self):
            return self.getTypedRuleContext(qasm2Parser.QuantumGateNameContext, 0)

        def identifierList(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.IdentifierListContext, i)

        def LPAREN(self):
            return self.getToken(qasm2Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm2Parser.RPAREN, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_quantumGateSignature

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuantumGateSignature"):
                listener.enterQuantumGateSignature(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuantumGateSignature"):
                listener.exitQuantumGateSignature(self)

    def quantumGateSignature(self):

        localctx = qasm2Parser.QuantumGateSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_quantumGateSignature)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.quantumGateName()
            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.LPAREN:
                self.state = 507
                self.match(qasm2Parser.LPAREN)
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == qasm2Parser.Identifier:
                    self.state = 508
                    self.identifierList()

                self.state = 511
                self.match(qasm2Parser.RPAREN)

            self.state = 514
            self.identifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumGateNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_quantumGateName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuantumGateName"):
                listener.enterQuantumGateName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuantumGateName"):
                listener.exitQuantumGateName(self)

    def quantumGateName(self):

        localctx = qasm2Parser.QuantumGateNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_quantumGateName)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            _la = self._input.LA(1)
            if not (
                _la == qasm2Parser.T__18
                or _la == qasm2Parser.T__19
                or _la == qasm2Parser.Identifier
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumBlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(qasm2Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(qasm2Parser.RBRACE, 0)

        def quantumStatement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.QuantumStatementContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.QuantumStatementContext, i)

        def quantumLoop(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.QuantumLoopContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.QuantumLoopContext, i)

        def getRuleIndex(self):
            return qasm2Parser.RULE_quantumBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuantumBlock"):
                listener.enterQuantumBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuantumBlock"):
                listener.exitQuantumBlock(self)

    def quantumBlock(self):

        localctx = qasm2Parser.QuantumBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_quantumBlock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.match(qasm2Parser.LBRACE)
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << qasm2Parser.T__18)
                        | (1 << qasm2Parser.T__19)
                        | (1 << qasm2Parser.T__20)
                        | (1 << qasm2Parser.T__21)
                        | (1 << qasm2Parser.T__22)
                        | (1 << qasm2Parser.T__23)
                        | (1 << qasm2Parser.T__24)
                        | (1 << qasm2Parser.T__26)
                        | (1 << qasm2Parser.T__27)
                        | (1 << qasm2Parser.T__28)
                    )
                )
                != 0
            ) or (
                (((_la - 72)) & ~0x3F) == 0
                and (
                    (1 << (_la - 72))
                    & (
                        (1 << (qasm2Parser.T__71 - 72))
                        | (1 << (qasm2Parser.T__73 - 72))
                        | (1 << (qasm2Parser.T__83 - 72))
                        | (1 << (qasm2Parser.T__85 - 72))
                        | (1 << (qasm2Parser.T__86 - 72))
                        | (1 << (qasm2Parser.Identifier - 72))
                    )
                )
                != 0
            ):
                self.state = 521
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [
                    qasm2Parser.T__18,
                    qasm2Parser.T__19,
                    qasm2Parser.T__20,
                    qasm2Parser.T__21,
                    qasm2Parser.T__22,
                    qasm2Parser.T__23,
                    qasm2Parser.T__24,
                    qasm2Parser.T__26,
                    qasm2Parser.T__27,
                    qasm2Parser.T__28,
                    qasm2Parser.T__83,
                    qasm2Parser.T__85,
                    qasm2Parser.T__86,
                    qasm2Parser.Identifier,
                ]:
                    self.state = 519
                    self.quantumStatement()
                    pass
                elif token in [qasm2Parser.T__71, qasm2Parser.T__73]:
                    self.state = 520
                    self.quantumLoop()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 526
            self.match(qasm2Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumLoopContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loopSignature(self):
            return self.getTypedRuleContext(qasm2Parser.LoopSignatureContext, 0)

        def quantumLoopBlock(self):
            return self.getTypedRuleContext(qasm2Parser.QuantumLoopBlockContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_quantumLoop

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuantumLoop"):
                listener.enterQuantumLoop(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuantumLoop"):
                listener.exitQuantumLoop(self)

    def quantumLoop(self):

        localctx = qasm2Parser.QuantumLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_quantumLoop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.loopSignature()
            self.state = 529
            self.quantumLoopBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumLoopBlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumStatement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.QuantumStatementContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.QuantumStatementContext, i)

        def LBRACE(self):
            return self.getToken(qasm2Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(qasm2Parser.RBRACE, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_quantumLoopBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuantumLoopBlock"):
                listener.enterQuantumLoopBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuantumLoopBlock"):
                listener.exitQuantumLoopBlock(self)

    def quantumLoopBlock(self):

        localctx = qasm2Parser.QuantumLoopBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_quantumLoopBlock)
        self._la = 0  # Token type
        try:
            self.state = 540
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                qasm2Parser.T__18,
                qasm2Parser.T__19,
                qasm2Parser.T__20,
                qasm2Parser.T__21,
                qasm2Parser.T__22,
                qasm2Parser.T__23,
                qasm2Parser.T__24,
                qasm2Parser.T__26,
                qasm2Parser.T__27,
                qasm2Parser.T__28,
                qasm2Parser.T__83,
                qasm2Parser.T__85,
                qasm2Parser.T__86,
                qasm2Parser.Identifier,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 531
                self.quantumStatement()
                pass
            elif token in [qasm2Parser.LBRACE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 532
                self.match(qasm2Parser.LBRACE)
                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << qasm2Parser.T__18)
                            | (1 << qasm2Parser.T__19)
                            | (1 << qasm2Parser.T__20)
                            | (1 << qasm2Parser.T__21)
                            | (1 << qasm2Parser.T__22)
                            | (1 << qasm2Parser.T__23)
                            | (1 << qasm2Parser.T__24)
                            | (1 << qasm2Parser.T__26)
                            | (1 << qasm2Parser.T__27)
                            | (1 << qasm2Parser.T__28)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 84)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 84))
                        & (
                            (1 << (qasm2Parser.T__83 - 84))
                            | (1 << (qasm2Parser.T__85 - 84))
                            | (1 << (qasm2Parser.T__86 - 84))
                            | (1 << (qasm2Parser.Identifier - 84))
                        )
                    )
                    != 0
                ):
                    self.state = 533
                    self.quantumStatement()
                    self.state = 538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 539
                self.match(qasm2Parser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumInstruction(self):
            return self.getTypedRuleContext(qasm2Parser.QuantumInstructionContext, 0)

        def SEMICOLON(self):
            return self.getToken(qasm2Parser.SEMICOLON, 0)

        def timingStatement(self):
            return self.getTypedRuleContext(qasm2Parser.TimingStatementContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_quantumStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuantumStatement"):
                listener.enterQuantumStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuantumStatement"):
                listener.exitQuantumStatement(self)

    def quantumStatement(self):

        localctx = qasm2Parser.QuantumStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_quantumStatement)
        try:
            self.state = 546
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                qasm2Parser.T__18,
                qasm2Parser.T__19,
                qasm2Parser.T__20,
                qasm2Parser.T__21,
                qasm2Parser.T__22,
                qasm2Parser.T__23,
                qasm2Parser.T__24,
                qasm2Parser.T__26,
                qasm2Parser.T__27,
                qasm2Parser.T__28,
                qasm2Parser.Identifier,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 542
                self.quantumInstruction()
                self.state = 543
                self.match(qasm2Parser.SEMICOLON)
                pass
            elif token in [qasm2Parser.T__83, qasm2Parser.T__85, qasm2Parser.T__86]:
                self.enterOuterAlt(localctx, 2)
                self.state = 545
                self.timingStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumInstructionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumGateCall(self):
            return self.getTypedRuleContext(qasm2Parser.QuantumGateCallContext, 0)

        def quantumPhase(self):
            return self.getTypedRuleContext(qasm2Parser.QuantumPhaseContext, 0)

        def quantumMeasurement(self):
            return self.getTypedRuleContext(qasm2Parser.QuantumMeasurementContext, 0)

        def quantumReset(self):
            return self.getTypedRuleContext(qasm2Parser.QuantumResetContext, 0)

        def quantumBarrier(self):
            return self.getTypedRuleContext(qasm2Parser.QuantumBarrierContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_quantumInstruction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuantumInstruction"):
                listener.enterQuantumInstruction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuantumInstruction"):
                listener.exitQuantumInstruction(self)

    def quantumInstruction(self):

        localctx = qasm2Parser.QuantumInstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_quantumInstruction)
        try:
            self.state = 553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 51, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 548
                self.quantumGateCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 549
                self.quantumPhase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 550
                self.quantumMeasurement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 551
                self.quantumReset()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 552
                self.quantumBarrier()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumPhaseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(qasm2Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionContext, 0)

        def RPAREN(self):
            return self.getToken(qasm2Parser.RPAREN, 0)

        def quantumGateModifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.QuantumGateModifierContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.QuantumGateModifierContext, i)

        def indexIdentifierList(self):
            return self.getTypedRuleContext(qasm2Parser.IndexIdentifierListContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_quantumPhase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuantumPhase"):
                listener.enterQuantumPhase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuantumPhase"):
                listener.exitQuantumPhase(self)

    def quantumPhase(self):

        localctx = qasm2Parser.QuantumPhaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_quantumPhase)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3F) == 0 and (
                (1 << _la)
                & (
                    (1 << qasm2Parser.T__24)
                    | (1 << qasm2Parser.T__26)
                    | (1 << qasm2Parser.T__27)
                    | (1 << qasm2Parser.T__28)
                )
            ) != 0:
                self.state = 555
                self.quantumGateModifier()
                self.state = 560
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 561
            self.match(qasm2Parser.T__20)
            self.state = 562
            self.match(qasm2Parser.LPAREN)
            self.state = 563
            self.expression(0)
            self.state = 564
            self.match(qasm2Parser.RPAREN)
            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.Identifier:
                self.state = 565
                self.indexIdentifierList()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumResetContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexIdentifierList(self):
            return self.getTypedRuleContext(qasm2Parser.IndexIdentifierListContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_quantumReset

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuantumReset"):
                listener.enterQuantumReset(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuantumReset"):
                listener.exitQuantumReset(self)

    def quantumReset(self):

        localctx = qasm2Parser.QuantumResetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_quantumReset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(qasm2Parser.T__21)
            self.state = 569
            self.indexIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumMeasurementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexIdentifierList(self):
            return self.getTypedRuleContext(qasm2Parser.IndexIdentifierListContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_quantumMeasurement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuantumMeasurement"):
                listener.enterQuantumMeasurement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuantumMeasurement"):
                listener.exitQuantumMeasurement(self)

    def quantumMeasurement(self):

        localctx = qasm2Parser.QuantumMeasurementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_quantumMeasurement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(qasm2Parser.T__22)
            self.state = 572
            self.indexIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumMeasurementAssignmentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumMeasurement(self):
            return self.getTypedRuleContext(qasm2Parser.QuantumMeasurementContext, 0)

        def ARROW(self):
            return self.getToken(qasm2Parser.ARROW, 0)

        def indexIdentifierList(self):
            return self.getTypedRuleContext(qasm2Parser.IndexIdentifierListContext, 0)

        def EQUALS(self):
            return self.getToken(qasm2Parser.EQUALS, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_quantumMeasurementAssignment

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuantumMeasurementAssignment"):
                listener.enterQuantumMeasurementAssignment(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuantumMeasurementAssignment"):
                listener.exitQuantumMeasurementAssignment(self)

    def quantumMeasurementAssignment(self):

        localctx = qasm2Parser.QuantumMeasurementAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_quantumMeasurementAssignment)
        self._la = 0  # Token type
        try:
            self.state = 583
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm2Parser.T__22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 574
                self.quantumMeasurement()
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == qasm2Parser.ARROW:
                    self.state = 575
                    self.match(qasm2Parser.ARROW)
                    self.state = 576
                    self.indexIdentifierList()

                pass
            elif token in [qasm2Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 579
                self.indexIdentifierList()
                self.state = 580
                self.match(qasm2Parser.EQUALS)
                self.state = 581
                self.quantumMeasurement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumBarrierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexIdentifierList(self):
            return self.getTypedRuleContext(qasm2Parser.IndexIdentifierListContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_quantumBarrier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuantumBarrier"):
                listener.enterQuantumBarrier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuantumBarrier"):
                listener.exitQuantumBarrier(self)

    def quantumBarrier(self):

        localctx = qasm2Parser.QuantumBarrierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_quantumBarrier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.match(qasm2Parser.T__23)
            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.Identifier:
                self.state = 586
                self.indexIdentifierList()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumGateModifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def powModifier(self):
            return self.getTypedRuleContext(qasm2Parser.PowModifierContext, 0)

        def ctrlModifier(self):
            return self.getTypedRuleContext(qasm2Parser.CtrlModifierContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_quantumGateModifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuantumGateModifier"):
                listener.enterQuantumGateModifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuantumGateModifier"):
                listener.exitQuantumGateModifier(self)

    def quantumGateModifier(self):

        localctx = qasm2Parser.QuantumGateModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_quantumGateModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm2Parser.T__24]:
                self.state = 589
                self.match(qasm2Parser.T__24)
                pass
            elif token in [qasm2Parser.T__26]:
                self.state = 590
                self.powModifier()
                pass
            elif token in [qasm2Parser.T__27, qasm2Parser.T__28]:
                self.state = 591
                self.ctrlModifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 594
            self.match(qasm2Parser.T__25)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowModifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(qasm2Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionContext, 0)

        def RPAREN(self):
            return self.getToken(qasm2Parser.RPAREN, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_powModifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPowModifier"):
                listener.enterPowModifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPowModifier"):
                listener.exitPowModifier(self)

    def powModifier(self):

        localctx = qasm2Parser.PowModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_powModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.match(qasm2Parser.T__26)
            self.state = 597
            self.match(qasm2Parser.LPAREN)
            self.state = 598
            self.expression(0)
            self.state = 599
            self.match(qasm2Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CtrlModifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(qasm2Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionContext, 0)

        def RPAREN(self):
            return self.getToken(qasm2Parser.RPAREN, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_ctrlModifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCtrlModifier"):
                listener.enterCtrlModifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCtrlModifier"):
                listener.exitCtrlModifier(self)

    def ctrlModifier(self):

        localctx = qasm2Parser.CtrlModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_ctrlModifier)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            _la = self._input.LA(1)
            if not (_la == qasm2Parser.T__27 or _la == qasm2Parser.T__28):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.LPAREN:
                self.state = 602
                self.match(qasm2Parser.LPAREN)
                self.state = 603
                self.expression(0)
                self.state = 604
                self.match(qasm2Parser.RPAREN)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantumGateCallContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumGateName(self):
            return self.getTypedRuleContext(qasm2Parser.QuantumGateNameContext, 0)

        def indexIdentifierList(self):
            return self.getTypedRuleContext(qasm2Parser.IndexIdentifierListContext, 0)

        def quantumGateModifier(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.QuantumGateModifierContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.QuantumGateModifierContext, i)

        def LPAREN(self):
            return self.getToken(qasm2Parser.LPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionListContext, 0)

        def RPAREN(self):
            return self.getToken(qasm2Parser.RPAREN, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_quantumGateCall

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterQuantumGateCall"):
                listener.enterQuantumGateCall(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitQuantumGateCall"):
                listener.exitQuantumGateCall(self)

    def quantumGateCall(self):

        localctx = qasm2Parser.QuantumGateCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_quantumGateCall)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3F) == 0 and (
                (1 << _la)
                & (
                    (1 << qasm2Parser.T__24)
                    | (1 << qasm2Parser.T__26)
                    | (1 << qasm2Parser.T__27)
                    | (1 << qasm2Parser.T__28)
                )
            ) != 0:
                self.state = 608
                self.quantumGateModifier()
                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 614
            self.quantumGateName()
            self.state = 619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.LPAREN:
                self.state = 615
                self.match(qasm2Parser.LPAREN)
                self.state = 616
                self.expressionList()
                self.state = 617
                self.match(qasm2Parser.RPAREN)

            self.state = 621
            self.indexIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(qasm2Parser.MINUS, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_unaryOperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryOperator"):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryOperator"):
                listener.exitUnaryOperator(self)

    def unaryOperator(self):

        localctx = qasm2Parser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_unaryOperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            _la = self._input.LA(1)
            if not (
                _la == qasm2Parser.T__29 or _la == qasm2Parser.T__30 or _la == qasm2Parser.MINUS
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return qasm2Parser.RULE_comparisonOperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComparisonOperator"):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComparisonOperator"):
                listener.exitComparisonOperator(self)

    def comparisonOperator(self):

        localctx = qasm2Parser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_comparisonOperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << qasm2Parser.T__31)
                            | (1 << qasm2Parser.T__32)
                            | (1 << qasm2Parser.T__33)
                            | (1 << qasm2Parser.T__34)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EqualityOperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return qasm2Parser.RULE_equalityOperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEqualityOperator"):
                listener.enterEqualityOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEqualityOperator"):
                listener.exitEqualityOperator(self)

    def equalityOperator(self):

        localctx = qasm2Parser.EqualityOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_equalityOperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            _la = self._input.LA(1)
            if not (_la == qasm2Parser.T__35 or _la == qasm2Parser.T__36):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogicalOperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return qasm2Parser.RULE_logicalOperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicalOperator"):
                listener.enterLogicalOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicalOperator"):
                listener.exitLogicalOperator(self)

    def logicalOperator(self):

        localctx = qasm2Parser.LogicalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_logicalOperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            _la = self._input.LA(1)
            if not (_la == qasm2Parser.T__16 or _la == qasm2Parser.T__37):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionContext, 0)

        def SEMICOLON(self):
            return self.getToken(qasm2Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_expressionStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionStatement"):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionStatement"):
                listener.exitExpressionStatement(self)

    def expressionStatement(self):

        localctx = qasm2Parser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.expression(0)
            self.state = 632
            self.match(qasm2Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionTerminator(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionTerminatorContext, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(qasm2Parser.UnaryExpressionContext, 0)

        def logicalAndExpression(self):
            return self.getTypedRuleContext(qasm2Parser.LogicalAndExpressionContext, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_expression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpression"):
                listener.enterExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpression"):
                listener.exitExpression(self)

    def expression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm2Parser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 118
        self.enterRecursionRule(localctx, 118, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 61, self._ctx)
            if la_ == 1:
                self.state = 635
                self.expressionTerminator(0)
                pass

            elif la_ == 2:
                self.state = 636
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.state = 637
                self.logicalAndExpression(0)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 645
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 62, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm2Parser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 640
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 641
                    self.match(qasm2Parser.T__16)
                    self.state = 642
                    self.logicalAndExpression(0)
                self.state = 647
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 62, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitOrExpression(self):
            return self.getTypedRuleContext(qasm2Parser.BitOrExpressionContext, 0)

        def logicalAndExpression(self):
            return self.getTypedRuleContext(qasm2Parser.LogicalAndExpressionContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_logicalAndExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLogicalAndExpression"):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLogicalAndExpression"):
                listener.exitLogicalAndExpression(self)

    def logicalAndExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm2Parser.LogicalAndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 120
        self.enterRecursionRule(localctx, 120, self.RULE_logicalAndExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.bitOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 656
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 63, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm2Parser.LogicalAndExpressionContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_logicalAndExpression
                    )
                    self.state = 651
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 652
                    self.match(qasm2Parser.T__37)
                    self.state = 653
                    self.bitOrExpression(0)
                self.state = 658
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 63, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BitOrExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xOrExpression(self):
            return self.getTypedRuleContext(qasm2Parser.XOrExpressionContext, 0)

        def bitOrExpression(self):
            return self.getTypedRuleContext(qasm2Parser.BitOrExpressionContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_bitOrExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBitOrExpression"):
                listener.enterBitOrExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBitOrExpression"):
                listener.exitBitOrExpression(self)

    def bitOrExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm2Parser.BitOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 122
        self.enterRecursionRule(localctx, 122, self.RULE_bitOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.xOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 667
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 64, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm2Parser.BitOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitOrExpression)
                    self.state = 662
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 663
                    self.match(qasm2Parser.T__38)
                    self.state = 664
                    self.xOrExpression(0)
                self.state = 669
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 64, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class XOrExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitAndExpression(self):
            return self.getTypedRuleContext(qasm2Parser.BitAndExpressionContext, 0)

        def xOrExpression(self):
            return self.getTypedRuleContext(qasm2Parser.XOrExpressionContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_xOrExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterXOrExpression"):
                listener.enterXOrExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitXOrExpression"):
                listener.exitXOrExpression(self)

    def xOrExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm2Parser.XOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 124
        self.enterRecursionRule(localctx, 124, self.RULE_xOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.bitAndExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 678
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 65, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm2Parser.XOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_xOrExpression)
                    self.state = 673
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 674
                    self.match(qasm2Parser.T__39)
                    self.state = 675
                    self.bitAndExpression(0)
                self.state = 680
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 65, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BitAndExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self):
            return self.getTypedRuleContext(qasm2Parser.EqualityExpressionContext, 0)

        def bitAndExpression(self):
            return self.getTypedRuleContext(qasm2Parser.BitAndExpressionContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_bitAndExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBitAndExpression"):
                listener.enterBitAndExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBitAndExpression"):
                listener.exitBitAndExpression(self)

    def bitAndExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm2Parser.BitAndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 126
        self.enterRecursionRule(localctx, 126, self.RULE_bitAndExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.equalityExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 689
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 66, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm2Parser.BitAndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitAndExpression)
                    self.state = 684
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 685
                    self.match(qasm2Parser.T__40)
                    self.state = 686
                    self.equalityExpression(0)
                self.state = 691
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 66, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparisonExpression(self):
            return self.getTypedRuleContext(qasm2Parser.ComparisonExpressionContext, 0)

        def equalityExpression(self):
            return self.getTypedRuleContext(qasm2Parser.EqualityExpressionContext, 0)

        def equalityOperator(self):
            return self.getTypedRuleContext(qasm2Parser.EqualityOperatorContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_equalityExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEqualityExpression"):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEqualityExpression"):
                listener.exitEqualityExpression(self)

    def equalityExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm2Parser.EqualityExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_equalityExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.comparisonExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 701
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 67, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm2Parser.EqualityExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_equalityExpression
                    )
                    self.state = 695
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 696
                    self.equalityOperator()
                    self.state = 697
                    self.comparisonExpression(0)
                self.state = 703
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 67, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ComparisonExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitShiftExpression(self):
            return self.getTypedRuleContext(qasm2Parser.BitShiftExpressionContext, 0)

        def comparisonExpression(self):
            return self.getTypedRuleContext(qasm2Parser.ComparisonExpressionContext, 0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(qasm2Parser.ComparisonOperatorContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_comparisonExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterComparisonExpression"):
                listener.enterComparisonExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitComparisonExpression"):
                listener.exitComparisonExpression(self)

    def comparisonExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm2Parser.ComparisonExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 130
        self.enterRecursionRule(localctx, 130, self.RULE_comparisonExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.bitShiftExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 713
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 68, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm2Parser.ComparisonExpressionContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_comparisonExpression
                    )
                    self.state = 707
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 708
                    self.comparisonOperator()
                    self.state = 709
                    self.bitShiftExpression(0)
                self.state = 715
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 68, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BitShiftExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self):
            return self.getTypedRuleContext(qasm2Parser.AdditiveExpressionContext, 0)

        def bitShiftExpression(self):
            return self.getTypedRuleContext(qasm2Parser.BitShiftExpressionContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_bitShiftExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBitShiftExpression"):
                listener.enterBitShiftExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBitShiftExpression"):
                listener.exitBitShiftExpression(self)

    def bitShiftExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm2Parser.BitShiftExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 132
        self.enterRecursionRule(localctx, 132, self.RULE_bitShiftExpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.additiveExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 724
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 69, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm2Parser.BitShiftExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_bitShiftExpression
                    )
                    self.state = 719
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 720
                    _la = self._input.LA(1)
                    if not (_la == qasm2Parser.T__41 or _la == qasm2Parser.T__42):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 721
                    self.additiveExpression(0)
                self.state = 726
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 69, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(qasm2Parser.MultiplicativeExpressionContext, 0)

        def additiveExpression(self):
            return self.getTypedRuleContext(qasm2Parser.AdditiveExpressionContext, 0)

        def PLUS(self):
            return self.getToken(qasm2Parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(qasm2Parser.MINUS, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_additiveExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAdditiveExpression"):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAdditiveExpression"):
                listener.exitAdditiveExpression(self)

    def additiveExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm2Parser.AdditiveExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 134
        self.enterRecursionRule(localctx, 134, self.RULE_additiveExpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.multiplicativeExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 735
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 70, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm2Parser.AdditiveExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_additiveExpression
                    )
                    self.state = 730
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 731
                    _la = self._input.LA(1)
                    if not (_la == qasm2Parser.PLUS or _la == qasm2Parser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 732
                    self.multiplicativeExpression(0)
                self.state = 737
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 70, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def powerExpression(self):
            return self.getTypedRuleContext(qasm2Parser.PowerExpressionContext, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(qasm2Parser.UnaryExpressionContext, 0)

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(qasm2Parser.MultiplicativeExpressionContext, 0)

        def MUL(self):
            return self.getToken(qasm2Parser.MUL, 0)

        def DIV(self):
            return self.getToken(qasm2Parser.DIV, 0)

        def MOD(self):
            return self.getToken(qasm2Parser.MOD, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_multiplicativeExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMultiplicativeExpression"):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMultiplicativeExpression"):
                listener.exitMultiplicativeExpression(self)

    def multiplicativeExpression(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm2Parser.MultiplicativeExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 136
        self.enterRecursionRule(localctx, 136, self.RULE_multiplicativeExpression, _p)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                qasm2Parser.T__6,
                qasm2Parser.T__7,
                qasm2Parser.T__8,
                qasm2Parser.T__9,
                qasm2Parser.T__10,
                qasm2Parser.T__11,
                qasm2Parser.T__12,
                qasm2Parser.T__13,
                qasm2Parser.T__44,
                qasm2Parser.T__45,
                qasm2Parser.T__48,
                qasm2Parser.T__49,
                qasm2Parser.T__50,
                qasm2Parser.T__51,
                qasm2Parser.T__52,
                qasm2Parser.T__53,
                qasm2Parser.T__54,
                qasm2Parser.T__55,
                qasm2Parser.T__56,
                qasm2Parser.T__81,
                qasm2Parser.T__82,
                qasm2Parser.T__84,
                qasm2Parser.LPAREN,
                qasm2Parser.Constant,
                qasm2Parser.Integer,
                qasm2Parser.Identifier,
                qasm2Parser.RealNumber,
                qasm2Parser.TimingLiteral,
                qasm2Parser.StringLiteral,
            ]:
                self.state = 739
                self.powerExpression()
                pass
            elif token in [qasm2Parser.T__29, qasm2Parser.T__30, qasm2Parser.MINUS]:
                self.state = 740
                self.unaryExpression()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 751
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 73, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = qasm2Parser.MultiplicativeExpressionContext(
                        self, _parentctx, _parentState
                    )
                    self.pushNewRecursionContext(
                        localctx, _startState, self.RULE_multiplicativeExpression
                    )
                    self.state = 743
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException

                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 744
                    _la = self._input.LA(1)
                    if not (
                        (
                            (((_la - 106)) & ~0x3F) == 0
                            and (
                                (1 << (_la - 106))
                                & (
                                    (1 << (qasm2Parser.MUL - 106))
                                    | (1 << (qasm2Parser.DIV - 106))
                                    | (1 << (qasm2Parser.MOD - 106))
                                )
                            )
                            != 0
                        )
                    ):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 747
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [
                        qasm2Parser.T__6,
                        qasm2Parser.T__7,
                        qasm2Parser.T__8,
                        qasm2Parser.T__9,
                        qasm2Parser.T__10,
                        qasm2Parser.T__11,
                        qasm2Parser.T__12,
                        qasm2Parser.T__13,
                        qasm2Parser.T__44,
                        qasm2Parser.T__45,
                        qasm2Parser.T__48,
                        qasm2Parser.T__49,
                        qasm2Parser.T__50,
                        qasm2Parser.T__51,
                        qasm2Parser.T__52,
                        qasm2Parser.T__53,
                        qasm2Parser.T__54,
                        qasm2Parser.T__55,
                        qasm2Parser.T__56,
                        qasm2Parser.T__81,
                        qasm2Parser.T__82,
                        qasm2Parser.T__84,
                        qasm2Parser.LPAREN,
                        qasm2Parser.Constant,
                        qasm2Parser.Integer,
                        qasm2Parser.Identifier,
                        qasm2Parser.RealNumber,
                        qasm2Parser.TimingLiteral,
                        qasm2Parser.StringLiteral,
                    ]:
                        self.state = 745
                        self.powerExpression()
                        pass
                    elif token in [
                        qasm2Parser.T__29,
                        qasm2Parser.T__30,
                        qasm2Parser.MINUS,
                    ]:
                        self.state = 746
                        self.unaryExpression()
                        pass
                    else:
                        raise NoViableAltException(self)

                self.state = 753
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 73, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryOperator(self):
            return self.getTypedRuleContext(qasm2Parser.UnaryOperatorContext, 0)

        def powerExpression(self):
            return self.getTypedRuleContext(qasm2Parser.PowerExpressionContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_unaryExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUnaryExpression"):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUnaryExpression"):
                listener.exitUnaryExpression(self)

    def unaryExpression(self):

        localctx = qasm2Parser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_unaryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.unaryOperator()
            self.state = 755
            self.powerExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionTerminator(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionTerminatorContext, 0)

        def powerExpression(self):
            return self.getTypedRuleContext(qasm2Parser.PowerExpressionContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_powerExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPowerExpression"):
                listener.enterPowerExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPowerExpression"):
                listener.exitPowerExpression(self)

    def powerExpression(self):

        localctx = qasm2Parser.PowerExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_powerExpression)
        try:
            self.state = 762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 74, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 757
                self.expressionTerminator(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 758
                self.expressionTerminator(0)
                self.state = 759
                self.match(qasm2Parser.T__43)
                self.state = 760
                self.powerExpression()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionTerminatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Constant(self):
            return self.getToken(qasm2Parser.Constant, 0)

        def Integer(self):
            return self.getToken(qasm2Parser.Integer, 0)

        def RealNumber(self):
            return self.getToken(qasm2Parser.RealNumber, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(qasm2Parser.BooleanLiteralContext, 0)

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def StringLiteral(self):
            return self.getToken(qasm2Parser.StringLiteral, 0)

        def builtInCall(self):
            return self.getTypedRuleContext(qasm2Parser.BuiltInCallContext, 0)

        def externCall(self):
            return self.getTypedRuleContext(qasm2Parser.ExternCallContext, 0)

        def subroutineCall(self):
            return self.getTypedRuleContext(qasm2Parser.SubroutineCallContext, 0)

        def timingIdentifier(self):
            return self.getTypedRuleContext(qasm2Parser.TimingIdentifierContext, 0)

        def LPAREN(self):
            return self.getToken(qasm2Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionContext, 0)

        def RPAREN(self):
            return self.getToken(qasm2Parser.RPAREN, 0)

        def expressionTerminator(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionTerminatorContext, 0)

        def LBRACKET(self):
            return self.getToken(qasm2Parser.LBRACKET, 0)

        def RBRACKET(self):
            return self.getToken(qasm2Parser.RBRACKET, 0)

        def incrementor(self):
            return self.getTypedRuleContext(qasm2Parser.IncrementorContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_expressionTerminator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionTerminator"):
                listener.enterExpressionTerminator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionTerminator"):
                listener.exitExpressionTerminator(self)

    def expressionTerminator(self, _p: int = 0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = qasm2Parser.ExpressionTerminatorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 142
        self.enterRecursionRule(localctx, 142, self.RULE_expressionTerminator, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 75, self._ctx)
            if la_ == 1:
                self.state = 765
                self.match(qasm2Parser.Constant)
                pass

            elif la_ == 2:
                self.state = 766
                self.match(qasm2Parser.Integer)
                pass

            elif la_ == 3:
                self.state = 767
                self.match(qasm2Parser.RealNumber)
                pass

            elif la_ == 4:
                self.state = 768
                self.booleanLiteral()
                pass

            elif la_ == 5:
                self.state = 769
                self.match(qasm2Parser.Identifier)
                pass

            elif la_ == 6:
                self.state = 770
                self.match(qasm2Parser.StringLiteral)
                pass

            elif la_ == 7:
                self.state = 771
                self.builtInCall()
                pass

            elif la_ == 8:
                self.state = 772
                self.externCall()
                pass

            elif la_ == 9:
                self.state = 773
                self.subroutineCall()
                pass

            elif la_ == 10:
                self.state = 774
                self.timingIdentifier()
                pass

            elif la_ == 11:
                self.state = 775
                self.match(qasm2Parser.LPAREN)
                self.state = 776
                self.expression(0)
                self.state = 777
                self.match(qasm2Parser.RPAREN)
                pass

            self._ctx.stop = self._input.LT(-1)
            self.state = 790
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 77, self._ctx)
            while _alt != 2 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 788
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 76, self._ctx)
                    if la_ == 1:
                        localctx = qasm2Parser.ExpressionTerminatorContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expressionTerminator
                        )
                        self.state = 781
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 782
                        self.match(qasm2Parser.LBRACKET)
                        self.state = 783
                        self.expression(0)
                        self.state = 784
                        self.match(qasm2Parser.RBRACKET)
                        pass

                    elif la_ == 2:
                        localctx = qasm2Parser.ExpressionTerminatorContext(
                            self, _parentctx, _parentState
                        )
                        self.pushNewRecursionContext(
                            localctx, _startState, self.RULE_expressionTerminator
                        )
                        self.state = 786
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException

                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 787
                        self.incrementor()
                        pass

                self.state = 792
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 77, self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return qasm2Parser.RULE_booleanLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBooleanLiteral"):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBooleanLiteral"):
                listener.exitBooleanLiteral(self)

    def booleanLiteral(self):

        localctx = qasm2Parser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_booleanLiteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            _la = self._input.LA(1)
            if not (_la == qasm2Parser.T__44 or _la == qasm2Parser.T__45):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IncrementorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return qasm2Parser.RULE_incrementor

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIncrementor"):
                listener.enterIncrementor(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIncrementor"):
                listener.exitIncrementor(self)

    def incrementor(self):

        localctx = qasm2Parser.IncrementorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_incrementor)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            _la = self._input.LA(1)
            if not (_la == qasm2Parser.T__46 or _la == qasm2Parser.T__47):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BuiltInCallContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(qasm2Parser.LPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionListContext, 0)

        def RPAREN(self):
            return self.getToken(qasm2Parser.RPAREN, 0)

        def builtInMath(self):
            return self.getTypedRuleContext(qasm2Parser.BuiltInMathContext, 0)

        def castOperator(self):
            return self.getTypedRuleContext(qasm2Parser.CastOperatorContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_builtInCall

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBuiltInCall"):
                listener.enterBuiltInCall(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBuiltInCall"):
                listener.exitBuiltInCall(self)

    def builtInCall(self):

        localctx = qasm2Parser.BuiltInCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_builtInCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                qasm2Parser.T__48,
                qasm2Parser.T__49,
                qasm2Parser.T__50,
                qasm2Parser.T__51,
                qasm2Parser.T__52,
                qasm2Parser.T__53,
                qasm2Parser.T__54,
                qasm2Parser.T__55,
                qasm2Parser.T__56,
            ]:
                self.state = 797
                self.builtInMath()
                pass
            elif token in [
                qasm2Parser.T__6,
                qasm2Parser.T__7,
                qasm2Parser.T__8,
                qasm2Parser.T__9,
                qasm2Parser.T__10,
                qasm2Parser.T__11,
                qasm2Parser.T__12,
                qasm2Parser.T__13,
                qasm2Parser.T__81,
                qasm2Parser.T__82,
            ]:
                self.state = 798
                self.castOperator()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 801
            self.match(qasm2Parser.LPAREN)
            self.state = 802
            self.expressionList()
            self.state = 803
            self.match(qasm2Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BuiltInMathContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return qasm2Parser.RULE_builtInMath

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBuiltInMath"):
                listener.enterBuiltInMath(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBuiltInMath"):
                listener.exitBuiltInMath(self)

    def builtInMath(self):

        localctx = qasm2Parser.BuiltInMathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_builtInMath)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            _la = self._input.LA(1)
            if not (
                (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << qasm2Parser.T__48)
                            | (1 << qasm2Parser.T__49)
                            | (1 << qasm2Parser.T__50)
                            | (1 << qasm2Parser.T__51)
                            | (1 << qasm2Parser.T__52)
                            | (1 << qasm2Parser.T__53)
                            | (1 << qasm2Parser.T__54)
                            | (1 << qasm2Parser.T__55)
                            | (1 << qasm2Parser.T__56)
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastOperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalType(self):
            return self.getTypedRuleContext(qasm2Parser.ClassicalTypeContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_castOperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCastOperator"):
                listener.enterCastOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCastOperator"):
                listener.exitCastOperator(self)

    def castOperator(self):

        localctx = qasm2Parser.CastOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_castOperator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.classicalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.ExpressionContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(qasm2Parser.COMMA)
            else:
                return self.getToken(qasm2Parser.COMMA, i)

        def getRuleIndex(self):
            return qasm2Parser.RULE_expressionList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExpressionList"):
                listener.enterExpressionList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExpressionList"):
                listener.exitExpressionList(self)

    def expressionList(self):

        localctx = qasm2Parser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_expressionList)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self.expression(0)
            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == qasm2Parser.COMMA:
                self.state = 810
                self.match(qasm2Parser.COMMA)
                self.state = 811
                self.expression(0)
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EqualsExpressionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(qasm2Parser.EQUALS, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_equalsExpression

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEqualsExpression"):
                listener.enterEqualsExpression(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEqualsExpression"):
                listener.exitEqualsExpression(self)

    def equalsExpression(self):

        localctx = qasm2Parser.EqualsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_equalsExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.match(qasm2Parser.EQUALS)
            self.state = 818
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS(self):
            return self.getToken(qasm2Parser.EQUALS, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_assignmentOperator

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterAssignmentOperator"):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitAssignmentOperator"):
                listener.exitAssignmentOperator(self)

    def assignmentOperator(self):

        localctx = qasm2Parser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_assignmentOperator)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            _la = self._input.LA(1)
            if not (
                (
                    (((_la - 58)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 58))
                        & (
                            (1 << (qasm2Parser.T__57 - 58))
                            | (1 << (qasm2Parser.T__58 - 58))
                            | (1 << (qasm2Parser.T__59 - 58))
                            | (1 << (qasm2Parser.T__60 - 58))
                            | (1 << (qasm2Parser.T__61 - 58))
                            | (1 << (qasm2Parser.T__62 - 58))
                            | (1 << (qasm2Parser.T__63 - 58))
                            | (1 << (qasm2Parser.T__64 - 58))
                            | (1 << (qasm2Parser.T__65 - 58))
                            | (1 << (qasm2Parser.T__66 - 58))
                            | (1 << (qasm2Parser.T__67 - 58))
                            | (1 << (qasm2Parser.T__68 - 58))
                            | (1 << (qasm2Parser.EQUALS - 58))
                        )
                    )
                    != 0
                )
            ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(qasm2Parser.LBRACE, 0)

        def expressionList(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionListContext, 0)

        def RBRACE(self):
            return self.getToken(qasm2Parser.RBRACE, 0)

        def rangeDefinition(self):
            return self.getTypedRuleContext(qasm2Parser.RangeDefinitionContext, 0)

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_setDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSetDeclaration"):
                listener.enterSetDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSetDeclaration"):
                listener.exitSetDeclaration(self)

    def setDeclaration(self):

        localctx = qasm2Parser.SetDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_setDeclaration)
        try:
            self.state = 828
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm2Parser.LBRACE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 822
                self.match(qasm2Parser.LBRACE)
                self.state = 823
                self.expressionList()
                self.state = 824
                self.match(qasm2Parser.RBRACE)
                pass
            elif token in [qasm2Parser.LBRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 826
                self.rangeDefinition()
                pass
            elif token in [qasm2Parser.Identifier]:
                self.enterOuterAlt(localctx, 3)
                self.state = 827
                self.match(qasm2Parser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProgramBlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.StatementContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.StatementContext, i)

        def controlDirective(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.ControlDirectiveContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.ControlDirectiveContext, i)

        def LBRACE(self):
            return self.getToken(qasm2Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(qasm2Parser.RBRACE, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_programBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterProgramBlock"):
                listener.enterProgramBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitProgramBlock"):
                listener.exitProgramBlock(self)

    def programBlock(self):

        localctx = qasm2Parser.ProgramBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_programBlock)
        self._la = 0  # Token type
        try:
            self.state = 841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 83, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 830
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 831
                self.controlDirective()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 832
                self.match(qasm2Parser.LBRACE)
                self.state = 837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << qasm2Parser.T__6)
                            | (1 << qasm2Parser.T__7)
                            | (1 << qasm2Parser.T__8)
                            | (1 << qasm2Parser.T__9)
                            | (1 << qasm2Parser.T__10)
                            | (1 << qasm2Parser.T__11)
                            | (1 << qasm2Parser.T__12)
                            | (1 << qasm2Parser.T__13)
                            | (1 << qasm2Parser.T__14)
                            | (1 << qasm2Parser.T__15)
                            | (1 << qasm2Parser.T__18)
                            | (1 << qasm2Parser.T__19)
                            | (1 << qasm2Parser.T__20)
                            | (1 << qasm2Parser.T__21)
                            | (1 << qasm2Parser.T__22)
                            | (1 << qasm2Parser.T__23)
                            | (1 << qasm2Parser.T__24)
                            | (1 << qasm2Parser.T__26)
                            | (1 << qasm2Parser.T__27)
                            | (1 << qasm2Parser.T__28)
                            | (1 << qasm2Parser.T__29)
                            | (1 << qasm2Parser.T__30)
                            | (1 << qasm2Parser.T__44)
                            | (1 << qasm2Parser.T__45)
                            | (1 << qasm2Parser.T__48)
                            | (1 << qasm2Parser.T__49)
                            | (1 << qasm2Parser.T__50)
                            | (1 << qasm2Parser.T__51)
                            | (1 << qasm2Parser.T__52)
                            | (1 << qasm2Parser.T__53)
                            | (1 << qasm2Parser.T__54)
                            | (1 << qasm2Parser.T__55)
                            | (1 << qasm2Parser.T__56)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 70)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 70))
                        & (
                            (1 << (qasm2Parser.T__69 - 70))
                            | (1 << (qasm2Parser.T__71 - 70))
                            | (1 << (qasm2Parser.T__73 - 70))
                            | (1 << (qasm2Parser.T__74 - 70))
                            | (1 << (qasm2Parser.T__75 - 70))
                            | (1 << (qasm2Parser.T__76 - 70))
                            | (1 << (qasm2Parser.T__77 - 70))
                            | (1 << (qasm2Parser.T__81 - 70))
                            | (1 << (qasm2Parser.T__82 - 70))
                            | (1 << (qasm2Parser.T__83 - 70))
                            | (1 << (qasm2Parser.T__84 - 70))
                            | (1 << (qasm2Parser.T__85 - 70))
                            | (1 << (qasm2Parser.T__86 - 70))
                            | (1 << (qasm2Parser.LPAREN - 70))
                            | (1 << (qasm2Parser.MINUS - 70))
                            | (1 << (qasm2Parser.Constant - 70))
                            | (1 << (qasm2Parser.Integer - 70))
                            | (1 << (qasm2Parser.Identifier - 70))
                            | (1 << (qasm2Parser.RealNumber - 70))
                            | (1 << (qasm2Parser.TimingLiteral - 70))
                            | (1 << (qasm2Parser.StringLiteral - 70))
                        )
                    )
                    != 0
                ):
                    self.state = 835
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input, 81, self._ctx)
                    if la_ == 1:
                        self.state = 833
                        self.statement()
                        pass

                    elif la_ == 2:
                        self.state = 834
                        self.controlDirective()
                        pass

                    self.state = 839
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 840
                self.match(qasm2Parser.RBRACE)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BranchingStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(qasm2Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionContext, 0)

        def RPAREN(self):
            return self.getToken(qasm2Parser.RPAREN, 0)

        def programBlock(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.ProgramBlockContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.ProgramBlockContext, i)

        def getRuleIndex(self):
            return qasm2Parser.RULE_branchingStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBranchingStatement"):
                listener.enterBranchingStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBranchingStatement"):
                listener.exitBranchingStatement(self)

    def branchingStatement(self):

        localctx = qasm2Parser.BranchingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_branchingStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.match(qasm2Parser.T__69)
            self.state = 844
            self.match(qasm2Parser.LPAREN)
            self.state = 845
            self.expression(0)
            self.state = 846
            self.match(qasm2Parser.RPAREN)
            self.state = 847
            self.programBlock()
            self.state = 850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 84, self._ctx)
            if la_ == 1:
                self.state = 848
                self.match(qasm2Parser.T__70)
                self.state = 849
                self.programBlock()

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoopSignatureContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def setDeclaration(self):
            return self.getTypedRuleContext(qasm2Parser.SetDeclarationContext, 0)

        def LPAREN(self):
            return self.getToken(qasm2Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionContext, 0)

        def RPAREN(self):
            return self.getToken(qasm2Parser.RPAREN, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_loopSignature

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLoopSignature"):
                listener.enterLoopSignature(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLoopSignature"):
                listener.exitLoopSignature(self)

    def loopSignature(self):

        localctx = qasm2Parser.LoopSignatureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_loopSignature)
        try:
            self.state = 861
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm2Parser.T__71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 852
                self.match(qasm2Parser.T__71)
                self.state = 853
                self.match(qasm2Parser.Identifier)
                self.state = 854
                self.match(qasm2Parser.T__72)
                self.state = 855
                self.setDeclaration()
                pass
            elif token in [qasm2Parser.T__73]:
                self.enterOuterAlt(localctx, 2)
                self.state = 856
                self.match(qasm2Parser.T__73)
                self.state = 857
                self.match(qasm2Parser.LPAREN)
                self.state = 858
                self.expression(0)
                self.state = 859
                self.match(qasm2Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoopStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def loopSignature(self):
            return self.getTypedRuleContext(qasm2Parser.LoopSignatureContext, 0)

        def programBlock(self):
            return self.getTypedRuleContext(qasm2Parser.ProgramBlockContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_loopStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterLoopStatement"):
                listener.enterLoopStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitLoopStatement"):
                listener.exitLoopStatement(self)

    def loopStatement(self):

        localctx = qasm2Parser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_loopStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.loopSignature()
            self.state = 864
            self.programBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EndStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(qasm2Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_endStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterEndStatement"):
                listener.enterEndStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitEndStatement"):
                listener.exitEndStatement(self)

    def endStatement(self):

        localctx = qasm2Parser.EndStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_endStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.match(qasm2Parser.T__74)
            self.state = 867
            self.match(qasm2Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(qasm2Parser.SEMICOLON, 0)

        def expression(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionContext, 0)

        def quantumMeasurement(self):
            return self.getTypedRuleContext(qasm2Parser.QuantumMeasurementContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_returnStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterReturnStatement"):
                listener.enterReturnStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitReturnStatement"):
                listener.exitReturnStatement(self)

    def returnStatement(self):

        localctx = qasm2Parser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.match(qasm2Parser.T__75)
            self.state = 872
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                qasm2Parser.T__6,
                qasm2Parser.T__7,
                qasm2Parser.T__8,
                qasm2Parser.T__9,
                qasm2Parser.T__10,
                qasm2Parser.T__11,
                qasm2Parser.T__12,
                qasm2Parser.T__13,
                qasm2Parser.T__29,
                qasm2Parser.T__30,
                qasm2Parser.T__44,
                qasm2Parser.T__45,
                qasm2Parser.T__48,
                qasm2Parser.T__49,
                qasm2Parser.T__50,
                qasm2Parser.T__51,
                qasm2Parser.T__52,
                qasm2Parser.T__53,
                qasm2Parser.T__54,
                qasm2Parser.T__55,
                qasm2Parser.T__56,
                qasm2Parser.T__81,
                qasm2Parser.T__82,
                qasm2Parser.T__84,
                qasm2Parser.LPAREN,
                qasm2Parser.MINUS,
                qasm2Parser.Constant,
                qasm2Parser.Integer,
                qasm2Parser.Identifier,
                qasm2Parser.RealNumber,
                qasm2Parser.TimingLiteral,
                qasm2Parser.StringLiteral,
            ]:
                self.state = 870
                self.expression(0)
                pass
            elif token in [qasm2Parser.T__22]:
                self.state = 871
                self.quantumMeasurement()
                pass
            elif token in [qasm2Parser.SEMICOLON]:
                pass
            else:
                pass
            self.state = 874
            self.match(qasm2Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ControlDirectiveContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(qasm2Parser.SEMICOLON, 0)

        def endStatement(self):
            return self.getTypedRuleContext(qasm2Parser.EndStatementContext, 0)

        def returnStatement(self):
            return self.getTypedRuleContext(qasm2Parser.ReturnStatementContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_controlDirective

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterControlDirective"):
                listener.enterControlDirective(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitControlDirective"):
                listener.exitControlDirective(self)

    def controlDirective(self):

        localctx = qasm2Parser.ControlDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_controlDirective)
        self._la = 0  # Token type
        try:
            self.state = 880
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm2Parser.T__76, qasm2Parser.T__77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 876
                _la = self._input.LA(1)
                if not (_la == qasm2Parser.T__76 or _la == qasm2Parser.T__77):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 877
                self.match(qasm2Parser.SEMICOLON)
                pass
            elif token in [qasm2Parser.T__74]:
                self.enterOuterAlt(localctx, 2)
                self.state = 878
                self.endStatement()
                pass
            elif token in [qasm2Parser.T__75]:
                self.enterOuterAlt(localctx, 3)
                self.state = 879
                self.returnStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExternDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def SEMICOLON(self):
            return self.getToken(qasm2Parser.SEMICOLON, 0)

        def LPAREN(self):
            return self.getToken(qasm2Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm2Parser.RPAREN, 0)

        def returnSignature(self):
            return self.getTypedRuleContext(qasm2Parser.ReturnSignatureContext, 0)

        def classicalTypeList(self):
            return self.getTypedRuleContext(qasm2Parser.ClassicalTypeListContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_externDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExternDeclaration"):
                listener.enterExternDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExternDeclaration"):
                listener.exitExternDeclaration(self)

    def externDeclaration(self):

        localctx = qasm2Parser.ExternDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_externDeclaration)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.match(qasm2Parser.T__78)
            self.state = 883
            self.match(qasm2Parser.Identifier)
            self.state = 889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.LPAREN:
                self.state = 884
                self.match(qasm2Parser.LPAREN)
                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << qasm2Parser.T__6)
                                | (1 << qasm2Parser.T__7)
                                | (1 << qasm2Parser.T__8)
                                | (1 << qasm2Parser.T__9)
                                | (1 << qasm2Parser.T__10)
                                | (1 << qasm2Parser.T__11)
                                | (1 << qasm2Parser.T__12)
                                | (1 << qasm2Parser.T__13)
                            )
                        )
                        != 0
                    )
                    or _la == qasm2Parser.T__81
                    or _la == qasm2Parser.T__82
                ):
                    self.state = 885
                    self.classicalTypeList()

                self.state = 888
                self.match(qasm2Parser.RPAREN)

            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.ARROW:
                self.state = 891
                self.returnSignature()

            self.state = 894
            self.match(qasm2Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExternCallContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(qasm2Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm2Parser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionListContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_externCall

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterExternCall"):
                listener.enterExternCall(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitExternCall"):
                listener.exitExternCall(self)

    def externCall(self):

        localctx = qasm2Parser.ExternCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_externCall)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896
            self.match(qasm2Parser.Identifier)
            self.state = 897
            self.match(qasm2Parser.LPAREN)
            self.state = 899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << qasm2Parser.T__6)
                        | (1 << qasm2Parser.T__7)
                        | (1 << qasm2Parser.T__8)
                        | (1 << qasm2Parser.T__9)
                        | (1 << qasm2Parser.T__10)
                        | (1 << qasm2Parser.T__11)
                        | (1 << qasm2Parser.T__12)
                        | (1 << qasm2Parser.T__13)
                        | (1 << qasm2Parser.T__29)
                        | (1 << qasm2Parser.T__30)
                        | (1 << qasm2Parser.T__44)
                        | (1 << qasm2Parser.T__45)
                        | (1 << qasm2Parser.T__48)
                        | (1 << qasm2Parser.T__49)
                        | (1 << qasm2Parser.T__50)
                        | (1 << qasm2Parser.T__51)
                        | (1 << qasm2Parser.T__52)
                        | (1 << qasm2Parser.T__53)
                        | (1 << qasm2Parser.T__54)
                        | (1 << qasm2Parser.T__55)
                        | (1 << qasm2Parser.T__56)
                    )
                )
                != 0
            ) or (
                (((_la - 82)) & ~0x3F) == 0
                and (
                    (1 << (_la - 82))
                    & (
                        (1 << (qasm2Parser.T__81 - 82))
                        | (1 << (qasm2Parser.T__82 - 82))
                        | (1 << (qasm2Parser.T__84 - 82))
                        | (1 << (qasm2Parser.LPAREN - 82))
                        | (1 << (qasm2Parser.MINUS - 82))
                        | (1 << (qasm2Parser.Constant - 82))
                        | (1 << (qasm2Parser.Integer - 82))
                        | (1 << (qasm2Parser.Identifier - 82))
                        | (1 << (qasm2Parser.RealNumber - 82))
                        | (1 << (qasm2Parser.TimingLiteral - 82))
                        | (1 << (qasm2Parser.StringLiteral - 82))
                    )
                )
                != 0
            ):
                self.state = 898
                self.expressionList()

            self.state = 901
            self.match(qasm2Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubroutineDefinitionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def subroutineBlock(self):
            return self.getTypedRuleContext(qasm2Parser.SubroutineBlockContext, 0)

        def LPAREN(self):
            return self.getToken(qasm2Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm2Parser.RPAREN, 0)

        def quantumArgumentList(self):
            return self.getTypedRuleContext(qasm2Parser.QuantumArgumentListContext, 0)

        def returnSignature(self):
            return self.getTypedRuleContext(qasm2Parser.ReturnSignatureContext, 0)

        def classicalArgumentList(self):
            return self.getTypedRuleContext(qasm2Parser.ClassicalArgumentListContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_subroutineDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubroutineDefinition"):
                listener.enterSubroutineDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubroutineDefinition"):
                listener.exitSubroutineDefinition(self)

    def subroutineDefinition(self):

        localctx = qasm2Parser.SubroutineDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_subroutineDefinition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.match(qasm2Parser.T__79)
            self.state = 904
            self.match(qasm2Parser.Identifier)
            self.state = 910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.LPAREN:
                self.state = 905
                self.match(qasm2Parser.LPAREN)
                self.state = 907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    (
                        ((_la) & ~0x3F) == 0
                        and (
                            (1 << _la)
                            & (
                                (1 << qasm2Parser.T__6)
                                | (1 << qasm2Parser.T__7)
                                | (1 << qasm2Parser.T__8)
                                | (1 << qasm2Parser.T__9)
                                | (1 << qasm2Parser.T__10)
                                | (1 << qasm2Parser.T__11)
                                | (1 << qasm2Parser.T__12)
                                | (1 << qasm2Parser.T__13)
                            )
                        )
                        != 0
                    )
                    or _la == qasm2Parser.T__81
                    or _la == qasm2Parser.T__82
                ):
                    self.state = 906
                    self.classicalArgumentList()

                self.state = 909
                self.match(qasm2Parser.RPAREN)

            self.state = 913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.T__4 or _la == qasm2Parser.T__5:
                self.state = 912
                self.quantumArgumentList()

            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.ARROW:
                self.state = 915
                self.returnSignature()

            self.state = 918
            self.subroutineBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubroutineBlockContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(qasm2Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(qasm2Parser.RBRACE, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.StatementContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.StatementContext, i)

        def returnStatement(self):
            return self.getTypedRuleContext(qasm2Parser.ReturnStatementContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_subroutineBlock

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubroutineBlock"):
                listener.enterSubroutineBlock(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubroutineBlock"):
                listener.exitSubroutineBlock(self)

    def subroutineBlock(self):

        localctx = qasm2Parser.SubroutineBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_subroutineBlock)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.match(qasm2Parser.LBRACE)
            self.state = 924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << qasm2Parser.T__6)
                        | (1 << qasm2Parser.T__7)
                        | (1 << qasm2Parser.T__8)
                        | (1 << qasm2Parser.T__9)
                        | (1 << qasm2Parser.T__10)
                        | (1 << qasm2Parser.T__11)
                        | (1 << qasm2Parser.T__12)
                        | (1 << qasm2Parser.T__13)
                        | (1 << qasm2Parser.T__14)
                        | (1 << qasm2Parser.T__15)
                        | (1 << qasm2Parser.T__18)
                        | (1 << qasm2Parser.T__19)
                        | (1 << qasm2Parser.T__20)
                        | (1 << qasm2Parser.T__21)
                        | (1 << qasm2Parser.T__22)
                        | (1 << qasm2Parser.T__23)
                        | (1 << qasm2Parser.T__24)
                        | (1 << qasm2Parser.T__26)
                        | (1 << qasm2Parser.T__27)
                        | (1 << qasm2Parser.T__28)
                        | (1 << qasm2Parser.T__29)
                        | (1 << qasm2Parser.T__30)
                        | (1 << qasm2Parser.T__44)
                        | (1 << qasm2Parser.T__45)
                        | (1 << qasm2Parser.T__48)
                        | (1 << qasm2Parser.T__49)
                        | (1 << qasm2Parser.T__50)
                        | (1 << qasm2Parser.T__51)
                        | (1 << qasm2Parser.T__52)
                        | (1 << qasm2Parser.T__53)
                        | (1 << qasm2Parser.T__54)
                        | (1 << qasm2Parser.T__55)
                        | (1 << qasm2Parser.T__56)
                    )
                )
                != 0
            ) or (
                (((_la - 70)) & ~0x3F) == 0
                and (
                    (1 << (_la - 70))
                    & (
                        (1 << (qasm2Parser.T__69 - 70))
                        | (1 << (qasm2Parser.T__71 - 70))
                        | (1 << (qasm2Parser.T__73 - 70))
                        | (1 << (qasm2Parser.T__74 - 70))
                        | (1 << (qasm2Parser.T__81 - 70))
                        | (1 << (qasm2Parser.T__82 - 70))
                        | (1 << (qasm2Parser.T__83 - 70))
                        | (1 << (qasm2Parser.T__84 - 70))
                        | (1 << (qasm2Parser.T__85 - 70))
                        | (1 << (qasm2Parser.T__86 - 70))
                        | (1 << (qasm2Parser.LPAREN - 70))
                        | (1 << (qasm2Parser.MINUS - 70))
                        | (1 << (qasm2Parser.Constant - 70))
                        | (1 << (qasm2Parser.Integer - 70))
                        | (1 << (qasm2Parser.Identifier - 70))
                        | (1 << (qasm2Parser.RealNumber - 70))
                        | (1 << (qasm2Parser.TimingLiteral - 70))
                        | (1 << (qasm2Parser.StringLiteral - 70))
                    )
                )
                != 0
            ):
                self.state = 921
                self.statement()
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.T__75:
                self.state = 927
                self.returnStatement()

            self.state = 930
            self.match(qasm2Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubroutineCallContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def indexIdentifierList(self):
            return self.getTypedRuleContext(qasm2Parser.IndexIdentifierListContext, 0)

        def LPAREN(self):
            return self.getToken(qasm2Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm2Parser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionListContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_subroutineCall

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubroutineCall"):
                listener.enterSubroutineCall(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubroutineCall"):
                listener.exitSubroutineCall(self)

    def subroutineCall(self):

        localctx = qasm2Parser.SubroutineCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_subroutineCall)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.match(qasm2Parser.Identifier)
            self.state = 938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.LPAREN:
                self.state = 933
                self.match(qasm2Parser.LPAREN)
                self.state = 935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << qasm2Parser.T__6)
                            | (1 << qasm2Parser.T__7)
                            | (1 << qasm2Parser.T__8)
                            | (1 << qasm2Parser.T__9)
                            | (1 << qasm2Parser.T__10)
                            | (1 << qasm2Parser.T__11)
                            | (1 << qasm2Parser.T__12)
                            | (1 << qasm2Parser.T__13)
                            | (1 << qasm2Parser.T__29)
                            | (1 << qasm2Parser.T__30)
                            | (1 << qasm2Parser.T__44)
                            | (1 << qasm2Parser.T__45)
                            | (1 << qasm2Parser.T__48)
                            | (1 << qasm2Parser.T__49)
                            | (1 << qasm2Parser.T__50)
                            | (1 << qasm2Parser.T__51)
                            | (1 << qasm2Parser.T__52)
                            | (1 << qasm2Parser.T__53)
                            | (1 << qasm2Parser.T__54)
                            | (1 << qasm2Parser.T__55)
                            | (1 << qasm2Parser.T__56)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 82)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 82))
                        & (
                            (1 << (qasm2Parser.T__81 - 82))
                            | (1 << (qasm2Parser.T__82 - 82))
                            | (1 << (qasm2Parser.T__84 - 82))
                            | (1 << (qasm2Parser.LPAREN - 82))
                            | (1 << (qasm2Parser.MINUS - 82))
                            | (1 << (qasm2Parser.Constant - 82))
                            | (1 << (qasm2Parser.Integer - 82))
                            | (1 << (qasm2Parser.Identifier - 82))
                            | (1 << (qasm2Parser.RealNumber - 82))
                            | (1 << (qasm2Parser.TimingLiteral - 82))
                            | (1 << (qasm2Parser.StringLiteral - 82))
                        )
                    )
                    != 0
                ):
                    self.state = 934
                    self.expressionList()

                self.state = 937
                self.match(qasm2Parser.RPAREN)

            self.state = 940
            self.indexIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PragmaContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(qasm2Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(qasm2Parser.RBRACE, 0)

        def statement(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(qasm2Parser.StatementContext)
            else:
                return self.getTypedRuleContext(qasm2Parser.StatementContext, i)

        def getRuleIndex(self):
            return qasm2Parser.RULE_pragma

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPragma"):
                listener.enterPragma(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPragma"):
                listener.exitPragma(self)

    def pragma(self):

        localctx = qasm2Parser.PragmaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_pragma)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.match(qasm2Parser.T__80)
            self.state = 943
            self.match(qasm2Parser.LBRACE)
            self.state = 947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (
                ((_la) & ~0x3F) == 0
                and (
                    (1 << _la)
                    & (
                        (1 << qasm2Parser.T__6)
                        | (1 << qasm2Parser.T__7)
                        | (1 << qasm2Parser.T__8)
                        | (1 << qasm2Parser.T__9)
                        | (1 << qasm2Parser.T__10)
                        | (1 << qasm2Parser.T__11)
                        | (1 << qasm2Parser.T__12)
                        | (1 << qasm2Parser.T__13)
                        | (1 << qasm2Parser.T__14)
                        | (1 << qasm2Parser.T__15)
                        | (1 << qasm2Parser.T__18)
                        | (1 << qasm2Parser.T__19)
                        | (1 << qasm2Parser.T__20)
                        | (1 << qasm2Parser.T__21)
                        | (1 << qasm2Parser.T__22)
                        | (1 << qasm2Parser.T__23)
                        | (1 << qasm2Parser.T__24)
                        | (1 << qasm2Parser.T__26)
                        | (1 << qasm2Parser.T__27)
                        | (1 << qasm2Parser.T__28)
                        | (1 << qasm2Parser.T__29)
                        | (1 << qasm2Parser.T__30)
                        | (1 << qasm2Parser.T__44)
                        | (1 << qasm2Parser.T__45)
                        | (1 << qasm2Parser.T__48)
                        | (1 << qasm2Parser.T__49)
                        | (1 << qasm2Parser.T__50)
                        | (1 << qasm2Parser.T__51)
                        | (1 << qasm2Parser.T__52)
                        | (1 << qasm2Parser.T__53)
                        | (1 << qasm2Parser.T__54)
                        | (1 << qasm2Parser.T__55)
                        | (1 << qasm2Parser.T__56)
                    )
                )
                != 0
            ) or (
                (((_la - 70)) & ~0x3F) == 0
                and (
                    (1 << (_la - 70))
                    & (
                        (1 << (qasm2Parser.T__69 - 70))
                        | (1 << (qasm2Parser.T__71 - 70))
                        | (1 << (qasm2Parser.T__73 - 70))
                        | (1 << (qasm2Parser.T__74 - 70))
                        | (1 << (qasm2Parser.T__81 - 70))
                        | (1 << (qasm2Parser.T__82 - 70))
                        | (1 << (qasm2Parser.T__83 - 70))
                        | (1 << (qasm2Parser.T__84 - 70))
                        | (1 << (qasm2Parser.T__85 - 70))
                        | (1 << (qasm2Parser.T__86 - 70))
                        | (1 << (qasm2Parser.LPAREN - 70))
                        | (1 << (qasm2Parser.MINUS - 70))
                        | (1 << (qasm2Parser.Constant - 70))
                        | (1 << (qasm2Parser.Integer - 70))
                        | (1 << (qasm2Parser.Identifier - 70))
                        | (1 << (qasm2Parser.RealNumber - 70))
                        | (1 << (qasm2Parser.TimingLiteral - 70))
                        | (1 << (qasm2Parser.StringLiteral - 70))
                    )
                )
                != 0
            ):
                self.state = 944
                self.statement()
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 950
            self.match(qasm2Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimingTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return qasm2Parser.RULE_timingType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimingType"):
                listener.enterTimingType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimingType"):
                listener.exitTimingType(self)

    def timingType(self):

        localctx = qasm2Parser.TimingTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_timingType)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            _la = self._input.LA(1)
            if not (_la == qasm2Parser.T__81 or _la == qasm2Parser.T__82):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimingBoxContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantumBlock(self):
            return self.getTypedRuleContext(qasm2Parser.QuantumBlockContext, 0)

        def designator(self):
            return self.getTypedRuleContext(qasm2Parser.DesignatorContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_timingBox

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimingBox"):
                listener.enterTimingBox(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimingBox"):
                listener.exitTimingBox(self)

    def timingBox(self):

        localctx = qasm2Parser.TimingBoxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_timingBox)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.match(qasm2Parser.T__83)
            self.state = 956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.LBRACKET:
                self.state = 955
                self.designator()

            self.state = 958
            self.quantumBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimingIdentifierContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TimingLiteral(self):
            return self.getToken(qasm2Parser.TimingLiteral, 0)

        def LPAREN(self):
            return self.getToken(qasm2Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm2Parser.RPAREN, 0)

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def quantumBlock(self):
            return self.getTypedRuleContext(qasm2Parser.QuantumBlockContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_timingIdentifier

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimingIdentifier"):
                listener.enterTimingIdentifier(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimingIdentifier"):
                listener.exitTimingIdentifier(self)

    def timingIdentifier(self):

        localctx = qasm2Parser.TimingIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_timingIdentifier)
        try:
            self.state = 968
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm2Parser.TimingLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 960
                self.match(qasm2Parser.TimingLiteral)
                pass
            elif token in [qasm2Parser.T__84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 961
                self.match(qasm2Parser.T__84)
                self.state = 962
                self.match(qasm2Parser.LPAREN)
                self.state = 965
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [qasm2Parser.Identifier]:
                    self.state = 963
                    self.match(qasm2Parser.Identifier)
                    pass
                elif token in [qasm2Parser.LBRACE]:
                    self.state = 964
                    self.quantumBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 967
                self.match(qasm2Parser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimingInstructionNameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return qasm2Parser.RULE_timingInstructionName

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimingInstructionName"):
                listener.enterTimingInstructionName(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimingInstructionName"):
                listener.exitTimingInstructionName(self)

    def timingInstructionName(self):

        localctx = qasm2Parser.TimingInstructionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_timingInstructionName)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            _la = self._input.LA(1)
            if not (_la == qasm2Parser.T__85 or _la == qasm2Parser.T__86):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimingInstructionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timingInstructionName(self):
            return self.getTypedRuleContext(qasm2Parser.TimingInstructionNameContext, 0)

        def designator(self):
            return self.getTypedRuleContext(qasm2Parser.DesignatorContext, 0)

        def indexIdentifierList(self):
            return self.getTypedRuleContext(qasm2Parser.IndexIdentifierListContext, 0)

        def LPAREN(self):
            return self.getToken(qasm2Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm2Parser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionListContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_timingInstruction

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimingInstruction"):
                listener.enterTimingInstruction(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimingInstruction"):
                listener.exitTimingInstruction(self)

    def timingInstruction(self):

        localctx = qasm2Parser.TimingInstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_timingInstruction)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self.timingInstructionName()
            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.LPAREN:
                self.state = 973
                self.match(qasm2Parser.LPAREN)
                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << qasm2Parser.T__6)
                            | (1 << qasm2Parser.T__7)
                            | (1 << qasm2Parser.T__8)
                            | (1 << qasm2Parser.T__9)
                            | (1 << qasm2Parser.T__10)
                            | (1 << qasm2Parser.T__11)
                            | (1 << qasm2Parser.T__12)
                            | (1 << qasm2Parser.T__13)
                            | (1 << qasm2Parser.T__29)
                            | (1 << qasm2Parser.T__30)
                            | (1 << qasm2Parser.T__44)
                            | (1 << qasm2Parser.T__45)
                            | (1 << qasm2Parser.T__48)
                            | (1 << qasm2Parser.T__49)
                            | (1 << qasm2Parser.T__50)
                            | (1 << qasm2Parser.T__51)
                            | (1 << qasm2Parser.T__52)
                            | (1 << qasm2Parser.T__53)
                            | (1 << qasm2Parser.T__54)
                            | (1 << qasm2Parser.T__55)
                            | (1 << qasm2Parser.T__56)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 82)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 82))
                        & (
                            (1 << (qasm2Parser.T__81 - 82))
                            | (1 << (qasm2Parser.T__82 - 82))
                            | (1 << (qasm2Parser.T__84 - 82))
                            | (1 << (qasm2Parser.LPAREN - 82))
                            | (1 << (qasm2Parser.MINUS - 82))
                            | (1 << (qasm2Parser.Constant - 82))
                            | (1 << (qasm2Parser.Integer - 82))
                            | (1 << (qasm2Parser.Identifier - 82))
                            | (1 << (qasm2Parser.RealNumber - 82))
                            | (1 << (qasm2Parser.TimingLiteral - 82))
                            | (1 << (qasm2Parser.StringLiteral - 82))
                        )
                    )
                    != 0
                ):
                    self.state = 974
                    self.expressionList()

                self.state = 977
                self.match(qasm2Parser.RPAREN)

            self.state = 980
            self.designator()
            self.state = 981
            self.indexIdentifierList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimingStatementContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timingInstruction(self):
            return self.getTypedRuleContext(qasm2Parser.TimingInstructionContext, 0)

        def SEMICOLON(self):
            return self.getToken(qasm2Parser.SEMICOLON, 0)

        def timingBox(self):
            return self.getTypedRuleContext(qasm2Parser.TimingBoxContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_timingStatement

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimingStatement"):
                listener.enterTimingStatement(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimingStatement"):
                listener.exitTimingStatement(self)

    def timingStatement(self):

        localctx = qasm2Parser.TimingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_timingStatement)
        try:
            self.state = 987
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm2Parser.T__85, qasm2Parser.T__86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 983
                self.timingInstruction()
                self.state = 984
                self.match(qasm2Parser.SEMICOLON)
                pass
            elif token in [qasm2Parser.T__83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 986
                self.timingBox()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CalibrationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def calibrationGrammarDeclaration(self):
            return self.getTypedRuleContext(qasm2Parser.CalibrationGrammarDeclarationContext, 0)

        def calibrationDefinition(self):
            return self.getTypedRuleContext(qasm2Parser.CalibrationDefinitionContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_calibration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCalibration"):
                listener.enterCalibration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCalibration"):
                listener.exitCalibration(self)

    def calibration(self):

        localctx = qasm2Parser.CalibrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_calibration)
        try:
            self.state = 991
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [qasm2Parser.T__87]:
                self.enterOuterAlt(localctx, 1)
                self.state = 989
                self.calibrationGrammarDeclaration()
                pass
            elif token in [qasm2Parser.T__88]:
                self.enterOuterAlt(localctx, 2)
                self.state = 990
                self.calibrationDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CalibrationGrammarDeclarationContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def calibrationGrammar(self):
            return self.getTypedRuleContext(qasm2Parser.CalibrationGrammarContext, 0)

        def SEMICOLON(self):
            return self.getToken(qasm2Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_calibrationGrammarDeclaration

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCalibrationGrammarDeclaration"):
                listener.enterCalibrationGrammarDeclaration(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCalibrationGrammarDeclaration"):
                listener.exitCalibrationGrammarDeclaration(self)

    def calibrationGrammarDeclaration(self):

        localctx = qasm2Parser.CalibrationGrammarDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_calibrationGrammarDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.match(qasm2Parser.T__87)
            self.state = 994
            self.calibrationGrammar()
            self.state = 995
            self.match(qasm2Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CalibrationDefinitionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(qasm2Parser.Identifier, 0)

        def identifierList(self):
            return self.getTypedRuleContext(qasm2Parser.IdentifierListContext, 0)

        def LBRACE(self):
            return self.getToken(qasm2Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(qasm2Parser.RBRACE, 0)

        def LPAREN(self):
            return self.getToken(qasm2Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(qasm2Parser.RPAREN, 0)

        def returnSignature(self):
            return self.getTypedRuleContext(qasm2Parser.ReturnSignatureContext, 0)

        def calibrationArgumentList(self):
            return self.getTypedRuleContext(qasm2Parser.CalibrationArgumentListContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_calibrationDefinition

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCalibrationDefinition"):
                listener.enterCalibrationDefinition(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCalibrationDefinition"):
                listener.exitCalibrationDefinition(self)

    def calibrationDefinition(self):

        localctx = qasm2Parser.CalibrationDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_calibrationDefinition)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.match(qasm2Parser.T__88)
            self.state = 998
            self.match(qasm2Parser.Identifier)
            self.state = 1004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.LPAREN:
                self.state = 999
                self.match(qasm2Parser.LPAREN)
                self.state = 1001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (
                    ((_la) & ~0x3F) == 0
                    and (
                        (1 << _la)
                        & (
                            (1 << qasm2Parser.T__6)
                            | (1 << qasm2Parser.T__7)
                            | (1 << qasm2Parser.T__8)
                            | (1 << qasm2Parser.T__9)
                            | (1 << qasm2Parser.T__10)
                            | (1 << qasm2Parser.T__11)
                            | (1 << qasm2Parser.T__12)
                            | (1 << qasm2Parser.T__13)
                            | (1 << qasm2Parser.T__29)
                            | (1 << qasm2Parser.T__30)
                            | (1 << qasm2Parser.T__44)
                            | (1 << qasm2Parser.T__45)
                            | (1 << qasm2Parser.T__48)
                            | (1 << qasm2Parser.T__49)
                            | (1 << qasm2Parser.T__50)
                            | (1 << qasm2Parser.T__51)
                            | (1 << qasm2Parser.T__52)
                            | (1 << qasm2Parser.T__53)
                            | (1 << qasm2Parser.T__54)
                            | (1 << qasm2Parser.T__55)
                            | (1 << qasm2Parser.T__56)
                        )
                    )
                    != 0
                ) or (
                    (((_la - 82)) & ~0x3F) == 0
                    and (
                        (1 << (_la - 82))
                        & (
                            (1 << (qasm2Parser.T__81 - 82))
                            | (1 << (qasm2Parser.T__82 - 82))
                            | (1 << (qasm2Parser.T__84 - 82))
                            | (1 << (qasm2Parser.LPAREN - 82))
                            | (1 << (qasm2Parser.MINUS - 82))
                            | (1 << (qasm2Parser.Constant - 82))
                            | (1 << (qasm2Parser.Integer - 82))
                            | (1 << (qasm2Parser.Identifier - 82))
                            | (1 << (qasm2Parser.RealNumber - 82))
                            | (1 << (qasm2Parser.TimingLiteral - 82))
                            | (1 << (qasm2Parser.StringLiteral - 82))
                        )
                    )
                    != 0
                ):
                    self.state = 1000
                    self.calibrationArgumentList()

                self.state = 1003
                self.match(qasm2Parser.RPAREN)

            self.state = 1006
            self.identifierList()
            self.state = 1008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == qasm2Parser.ARROW:
                self.state = 1007
                self.returnSignature()

            self.state = 1010
            self.match(qasm2Parser.LBRACE)
            self.state = 1014
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 111, self._ctx)
            while _alt != 1 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1 + 1:
                    self.state = 1011
                    self.matchWildcard()
                self.state = 1016
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 111, self._ctx)

            self.state = 1017
            self.match(qasm2Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CalibrationGrammarContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(qasm2Parser.StringLiteral, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_calibrationGrammar

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCalibrationGrammar"):
                listener.enterCalibrationGrammar(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCalibrationGrammar"):
                listener.exitCalibrationGrammar(self)

    def calibrationGrammar(self):

        localctx = qasm2Parser.CalibrationGrammarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_calibrationGrammar)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            _la = self._input.LA(1)
            if not (_la == qasm2Parser.T__89 or _la == qasm2Parser.StringLiteral):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CalibrationArgumentListContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classicalArgumentList(self):
            return self.getTypedRuleContext(qasm2Parser.ClassicalArgumentListContext, 0)

        def expressionList(self):
            return self.getTypedRuleContext(qasm2Parser.ExpressionListContext, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_calibrationArgumentList

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterCalibrationArgumentList"):
                listener.enterCalibrationArgumentList(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitCalibrationArgumentList"):
                listener.exitCalibrationArgumentList(self)

    def calibrationArgumentList(self):

        localctx = qasm2Parser.CalibrationArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_calibrationArgumentList)
        try:
            self.state = 1023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 112, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1021
                self.classicalArgumentList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1022
                self.expressionList()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MetaCommentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(self, parser, parent: ParserRuleContext = None, invokingState: int = -1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(qasm2Parser.SEMICOLON, 0)

        def getRuleIndex(self):
            return qasm2Parser.RULE_metaComment

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterMetaComment"):
                listener.enterMetaComment(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitMetaComment"):
                listener.exitMetaComment(self)

    def metaComment(self):

        localctx = qasm2Parser.MetaCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_metaComment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.match(qasm2Parser.T__90)
            self.state = 1029
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input, 113, self._ctx)
            while _alt != 1 and _alt != ATN.INVALID_ALT_NUMBER:
                if _alt == 1 + 1:
                    self.state = 1026
                    self.matchWildcard()
                self.state = 1031
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input, 113, self._ctx)

            self.state = 1032
            self.match(qasm2Parser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    def sempred(self, localctx: RuleContext, ruleIndex: int, predIndex: int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[34] = self.indexIdentifier_sempred
        self._predicates[59] = self.expression_sempred
        self._predicates[60] = self.logicalAndExpression_sempred
        self._predicates[61] = self.bitOrExpression_sempred
        self._predicates[62] = self.xOrExpression_sempred
        self._predicates[63] = self.bitAndExpression_sempred
        self._predicates[64] = self.equalityExpression_sempred
        self._predicates[65] = self.comparisonExpression_sempred
        self._predicates[66] = self.bitShiftExpression_sempred
        self._predicates[67] = self.additiveExpression_sempred
        self._predicates[68] = self.multiplicativeExpression_sempred
        self._predicates[71] = self.expressionTerminator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def indexIdentifier_sempred(self, localctx: IndexIdentifierContext, predIndex: int):
        if predIndex == 0:
            return self.precpred(self._ctx, 1)

    def expression_sempred(self, localctx: ExpressionContext, predIndex: int):
        if predIndex == 1:
            return self.precpred(self._ctx, 1)

    def logicalAndExpression_sempred(self, localctx: LogicalAndExpressionContext, predIndex: int):
        if predIndex == 2:
            return self.precpred(self._ctx, 1)

    def bitOrExpression_sempred(self, localctx: BitOrExpressionContext, predIndex: int):
        if predIndex == 3:
            return self.precpred(self._ctx, 1)

    def xOrExpression_sempred(self, localctx: XOrExpressionContext, predIndex: int):
        if predIndex == 4:
            return self.precpred(self._ctx, 1)

    def bitAndExpression_sempred(self, localctx: BitAndExpressionContext, predIndex: int):
        if predIndex == 5:
            return self.precpred(self._ctx, 1)

    def equalityExpression_sempred(self, localctx: EqualityExpressionContext, predIndex: int):
        if predIndex == 6:
            return self.precpred(self._ctx, 1)

    def comparisonExpression_sempred(self, localctx: ComparisonExpressionContext, predIndex: int):
        if predIndex == 7:
            return self.precpred(self._ctx, 1)

    def bitShiftExpression_sempred(self, localctx: BitShiftExpressionContext, predIndex: int):
        if predIndex == 8:
            return self.precpred(self._ctx, 1)

    def additiveExpression_sempred(self, localctx: AdditiveExpressionContext, predIndex: int):
        if predIndex == 9:
            return self.precpred(self._ctx, 1)

    def multiplicativeExpression_sempred(
        self, localctx: MultiplicativeExpressionContext, predIndex: int
    ):
        if predIndex == 10:
            return self.precpred(self._ctx, 1)

    def expressionTerminator_sempred(self, localctx: ExpressionTerminatorContext, predIndex: int):
        if predIndex == 11:
            return self.precpred(self._ctx, 2)

        if predIndex == 12:
            return self.precpred(self._ctx, 1)
