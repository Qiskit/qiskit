---
name: Wheel Builds
on:
  push:
    tags:
      - '*'
jobs:
  build_wheels:
    name: Build wheels
    runs-on: ${{ matrix.os }}
    environment: release
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-12, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.10'
      - uses: dtolnay/rust-toolchain@stable
        if: runner.os != 'macOS'
      - uses: dtolnay/rust-toolchain@1.73
        if: runner.os == 'macOS'
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.19.2
      - uses: actions/upload-artifact@v4
        with:
          path: ./wheelhouse/*.whl
          name: wheels-${{ matrix.os }}
  build_wheels_macos_arm:
    name: Build wheels on macOS arm
    runs-on: ${{ matrix.os }}
    environment: release
    strategy:
      fail-fast: false
      matrix:
        os: [macos-12]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.10'
      - uses: dtolnay/rust-toolchain@stable
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.19.2
        env:
          CIBW_BEFORE_ALL: rustup target add aarch64-apple-darwin
          CIBW_ARCHS_MACOS: arm64 universal2
          CIBW_ENVIRONMENT: >-
            CARGO_BUILD_TARGET="aarch64-apple-darwin"
            PYO3_CROSS_LIB_DIR="/Library/Frameworks/Python.framework/Versions/$(python -c 'import sys; print(str(sys.version_info[0])+"."+str(sys.version_info[1]))')/lib/python$(python -c 'import sys; print(str(sys.version_info[0])+"."+str(sys.version_info[1]))')"
      - uses: actions/upload-artifact@v4
        with:
          path: ./wheelhouse/*.whl
          name: wheels-${{ matrix.os }}-arm
  upload_shared_wheels:
    name: Upload shared build wheels
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
    needs: ["build_wheels", "build_wheels_macos_arm"]
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: 'wheels-*'
          merge-multiple: true
          path: deploy
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: deploy
  build_wheels_s390x:
    name: Build wheels on s390x
    runs-on: ${{ matrix.os }}
    environment: release
    permissions:
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.10'
      - uses: dtolnay/rust-toolchain@stable
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.19.2
        env:
          CIBW_ARCHS_LINUX: s390x
          CIBW_TEST_SKIP: "cp*"
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-s390x
          path: ./wheelhouse/*.whl
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: wheelhouse/
  build_wheels_ppc64le:
    name: Build wheels on ppc64le
    runs-on: ${{ matrix.os }}
    environment: release
    permissions:
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.10'
      - uses: dtolnay/rust-toolchain@stable
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.19.2
        env:
          CIBW_ARCHS_LINUX: ppc64le
          CIBW_TEST_SKIP: "cp*"
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-ppc64le
          path: ./wheelhouse/*.whl
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: wheelhouse/
  build_wheels_aarch64:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    environment: release
    permissions:
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.10'
      - uses: dtolnay/rust-toolchain@stable
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.19.2
        env:
          CIBW_ARCHS_LINUX: aarch64
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-aarch64
          path: ./wheelhouse/*.whl
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: wheelhouse/
  sdist:
    name: Build and publish terra sdist
    runs-on: ${{ matrix.os }}
    needs: ["upload_shared_wheels"]
    environment: release
    permissions:
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.10'
      - name: Install deps
        run: pip install -U twine setuptools-rust wheel build
      - name: Build sdist
        run: python -m build . --sdist
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
  metapackage:
    name: Build and publish terra sdist
    runs-on: ${{ matrix.os }}
    needs: ["sdist"]
    environment: release
    permissions:
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.10'
      - name: Install deps
        run: pip install -U twine setuptools-rust wheel build
      - name: Build packages
        run: |
          set -e
          cd qiskit_pkg
          python -m build .
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: qiskit_pkg/dist
